<roblox version="4">
  <Item class="Folder" referent="0">
    <Properties>
      <string name="Name">Emergency-Vehicle-Creator</string>
    </Properties>
    <Item class="ModuleScript" referent="1">
      <Properties>
        <string name="Name">LICENSE</string>
        <string name="Source">--[[

	MIT License

	Copyright (c) 2022-2024 Redon Tech

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.

--]]

return</string>
      </Properties>
    </Item>
    <Item class="Folder" referent="2">
      <Properties>
        <string name="Name">packages</string>
      </Properties>
    </Item>
    <Item class="Folder" referent="3">
      <Properties>
        <string name="Name">src</string>
      </Properties>
      <Item class="Folder" referent="4">
        <Properties>
          <string name="Name">Components</string>
        </Properties>
        <Item class="ModuleScript" referent="5">
          <Properties>
            <string name="Name">container</string>
            <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local topBar = require(script.Parent.topBar)

return function()
	local Container = Instance.new("Frame")
	Container.Name = "Container"
	Container.ZIndex = 1
	Container.AnchorPoint = Vector2.new(0.5, 0.5)
	Container.Position = UDim2.fromScale(0.5, 0.5)
	Container.Size = UDim2.fromScale(1, 1)
	Container.BackgroundTransparency = 1

	local Tabs = topBar()
	Tabs.Parent = Container

	local content = Instance.new("Frame")
	content.Name = "Content"
	content.AnchorPoint = Vector2.new(0.5, 0.5)
	content.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	content.BackgroundTransparency = 1
	content.Position = UDim2.fromScale(0.5, 0.523)
	content.Size = UDim2.fromScale(1, 0.954)
	content.ZIndex = 2
	content.Parent = Container

	local popUps = Instance.new("Frame")
	popUps.Name = "PopUps"
	popUps.AnchorPoint = Vector2.new(0.5, 0.5)
	popUps.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	popUps.BackgroundTransparency = 1
	popUps.Position = UDim2.fromScale(0.5, 0.5)
	popUps.Size = UDim2.fromScale(1, 1)
	popUps.ZIndex = 100000
	popUps.Parent = Container

	local versionWarning = Instance.new("TextButton")
	versionWarning.Name = "VersionWarning"
	versionWarning.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	versionWarning.Text = "Plugin version out of date. Click to dismiss warning."
	versionWarning.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	versionWarning.TextScaled = true
	versionWarning.TextSize = 30
	versionWarning.AnchorPoint = Vector2.new(0.5, 1)
	versionWarning.BackgroundTransparency = 1
	versionWarning.Position = UDim2.fromScale(0.5, 1)
	versionWarning.Size = UDim2.fromScale(1, 0.05)
	versionWarning.ZIndex = 100001
	versionWarning.Visible = false
	versionWarning.Parent = Container

	return Container
end</string>
          </Properties>
        </Item>
        <Item class="Folder" referent="6">
          <Properties>
            <string name="Name">elsCreator</string>
          </Properties>
          <Item class="ModuleScript" referent="7">
            <Properties>
              <string name="Name">column</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local columnRow = require(script.Parent.columnRow)

return function(columnNumber: number, rows: number)
	local w = Instance.new("Frame")
	w.Name = columnNumber
	w.BackgroundTransparency = 1
	w.LayoutOrder = columnNumber
	w.Size = UDim2.new(0, 37.5, 1, 0) -- 75

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5) -- 10
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = w

	for i = 1, rows do
		columnRow(i).Parent = w
	end

	return w
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="8">
            <Properties>
              <string name="Name">columnButtons</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local columnRow = require(script.Parent.columnRow)
local columnControls = require(script.Parent.columnControls)

return function(rows: number)
	local w = Instance.new("Frame")
	w.Name = "Buttons"
	w.BackgroundTransparency = 1
	w.LayoutOrder = 0
	w.Size = UDim2.new(0, 37.5, 1, 0) -- 75

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5) -- 10
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = w

	for i = 1, rows-1 do
		local row = columnRow(i)
		row.Parent = w
		row.BackgroundTransparency = 1
		row.UICorner:Destroy()
	end

	columnControls().Parent = w

	return w
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="9">
            <Properties>
              <string name="Name">columnContainer</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local column = require(script.Parent.column)
local columnButtons = require(script.Parent.columnButtons)

return function()
	local columns = Instance.new("ScrollingFrame")
	columns.Name = "Columns"
	columns.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	columns.CanvasSize = UDim2.new()
	columns.ScrollBarThickness = 5
	columns.ScrollingDirection = Enum.ScrollingDirection.Y
	columns.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	columns.VerticalScrollBarInset = Enum.ScrollBarInset.Always
	columns.AnchorPoint = Vector2.new(0.5, 0)
	columns.BackgroundTransparency = 1
	columns.BorderSizePixel = 0
	columns.Position = UDim2.new(0.5, -19, 0, 75) -- -40, 150
	columns.Selectable = false
	columns.Size = UDim2.fromOffset(62.5, 500) -- 165, 700

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5) -- 10
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = columns

	local indicatorHolder = Instance.new("ScrollingFrame")
	indicatorHolder.Name = "IndicatorHolder"
	indicatorHolder.CanvasSize = columns.CanvasSize
	indicatorHolder.CanvasPosition = columns.CanvasPosition
	indicatorHolder.AnchorPoint = columns.AnchorPoint
	indicatorHolder.Position = UDim2.new(0.5, -2, 0, 75)
	indicatorHolder.Size = columns.Size
	indicatorHolder.ScrollBarThickness = 0
	indicatorHolder.ScrollingDirection = Enum.ScrollingDirection.Y
	indicatorHolder.BackgroundTransparency = 1
	indicatorHolder.Selectable = false
	indicatorHolder.ScrollingEnabled = false
	indicatorHolder.ClipsDescendants = false

	local indicator = Instance.new("Frame")
	indicator.Name = "Indicator"
	indicator.AnchorPoint = Vector2.new(0.5, 0)
	indicator.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton, Enum.StudioStyleGuideModifier.Pressed)
	indicator.BackgroundTransparency = 0.7
	indicator.Position = UDim2.fromScale(0.5, 0)
	-- indicator.Size = UDim2.fromOffset(42.5, 21) -- 85, 40
	indicator.Size = UDim2.new(1, 6, 0, 21)
	indicator.Parent = indicatorHolder
	indicator.ZIndex = 0

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 4)
	uICorner.Parent = indicator
	
	local function changeSize()
		-- 75, 10, 700
		columns.Size = UDim2.fromOffset((37.5 * (#columns:GetChildren() - 1)) + (5 * (#columns:GetChildren() - 2)) + 5, 500)
		-- columns.Position = UDim2.new(0.5, -((37.5 * (#columns:GetChildren() - 2)) + (5 * (#columns:GetChildren() - 2)) - 5)/2, 0, 75)

		-- indicatorHolder.Size = UDim2.fromOffset((37 * (#columns:GetChildren() - 2)) + (5 * (#columns:GetChildren() - 3)), 500)
		indicatorHolder.Size = UDim2.fromOffset(uIListLayout.AbsoluteContentSize.X-37, 500)
		-- indicator.Size = UDim2.fromOffset((37 * (#columns:GetChildren() - 2)) + (5 * (#columns:GetChildren() - 2)) + 5, 20) -- 75, 10, 40

		if columns:FindFirstChild("Buttons") then
			columns.CanvasSize = UDim2.fromOffset(0, ((#columns.Buttons:GetChildren() - 1) * 15) + ((#columns.Buttons:GetChildren() - 2) * 5) + 40)
		end
	end

	columns.ChildAdded:Connect(changeSize)
	columns.ChildRemoved:Connect(changeSize)
	columns:GetPropertyChangedSignal("AbsoluteSize"):Connect(changeSize)
	uIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(changeSize)
	
	local function updateCanvas()
		indicatorHolder.CanvasSize = columns.CanvasSize
		indicatorHolder.CanvasPosition = columns.CanvasPosition
		
		if indicatorHolder.CanvasPosition.Y > 0.5 then
			indicatorHolder.ClipsDescendants = true
		else
			indicatorHolder.ClipsDescendants = false
		end
	end
	
	columns:GetPropertyChangedSignal("CanvasSize"):Connect(updateCanvas)
	columns:GetPropertyChangedSignal("CanvasPosition"):Connect(updateCanvas)
	
	column(1, 20).Parent = columns
	columnButtons(20).Parent = columns

	columns:WaitForChild("Buttons").ChildAdded:Connect(changeSize)
	columns.Buttons.ChildRemoved:Connect(changeSize)

	return columns, indicatorHolder
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="10">
            <Properties>
              <string name="Name">columnControls</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function()
	local controls = Instance.new("Frame")
	controls.Name = "Controls"
	controls.AnchorPoint = Vector2.new(0.5, 0.5)
	controls.BackgroundTransparency = 1
	controls.BorderSizePixel = 0
	controls.LayoutOrder = 1000000
	controls.Size = UDim2.new(1, 0, 0, 15) -- 30

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5) -- 10
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = controls

	local holder = Instance.new("Frame")
	holder.Name = "RemoveHolder"
	holder.BackgroundTransparency = 1
	holder.Size = UDim2.new(1, 0, 0, 15) -- 30

	local remove = Instance.new("ImageButton")
	remove.Name = "RemoveButton"
	remove.Image = "rbxassetid://12788801841"
	remove.ScaleType = Enum.ScaleType.Fit
	remove.AnchorPoint = Vector2.new(0.5, 0.5)
	remove.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	remove.ImageTransparency = 0.5
	remove.BackgroundTransparency = 1
	remove.BorderSizePixel = 0
	remove.LayoutOrder = 1
	remove.Position = UDim2.fromScale(0.5, 0.5)
	remove.Size = UDim2.fromOffset(11.5, 11.5) -- 23, 23
	remove.Parent = holder

	holder.Parent = controls

	local holder1 = Instance.new("Frame")
	holder1.Name = "AddHolder"
	holder1.BackgroundTransparency = 1
	holder1.Size = UDim2.new(1, 0, 0, 15)

	local add = Instance.new("ImageButton")
	add.Name = "Add"
	add.Image = "rbxassetid://12788800986"
	add.ScaleType = Enum.ScaleType.Fit
	add.AnchorPoint = Vector2.new(0.5, 0.5)
	add.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	add.BackgroundTransparency = 1
	add.BorderSizePixel = 0
	add.LayoutOrder = 3
	add.Position = UDim2.fromScale(0.5, 0.5)
	add.Size = UDim2.fromOffset(11.5, 11.5)
	add.Parent = holder1

	holder1.Parent = controls

	return controls
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="11">
            <Properties>
              <string name="Name">columnHeader</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(ColumnNumber: number)
	local w = Instance.new("Frame")
	w.Name = ColumnNumber
	w.LayoutOrder = ColumnNumber
	w.BackgroundTransparency = 1
	w.Size = UDim2.new(0, 37.5, 1, 0) -- 75

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5) -- 10
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = w

	local devider = Instance.new("Frame")
	devider.Name = "Devider"
	devider.BackgroundTransparency = 1
	devider.LayoutOrder = 1
	devider.Size = UDim2.new(1, 0, 0, 15) -- 30

	local frame = Instance.new("Frame")
	frame.Name = "Frame"
	frame.AnchorPoint = Vector2.new(0.5, 0.5)
	frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	frame.BorderSizePixel = 0
	frame.Position = UDim2.fromScale(0.5, 0.5)
	frame.Size = UDim2.fromOffset(35, 5) -- 50, 10
	frame.Parent = devider

	devider.Parent = w

	local top = Instance.new("Frame")
	top.Name = "Top"
	top.AnchorPoint = Vector2.new(0.5, 0.5)
	top.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	top.BorderSizePixel = 0
	top.LayoutOrder = 0
	top.Size = UDim2.new(1, 0, 0, 15) -- 30
	top.ZIndex = 3

	local textBox = Instance.new("TextBox")
	textBox.Name = "TextBox"
	textBox.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	textBox.PlaceholderText = "Light1"
	textBox.Text = ""
	textBox.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textBox.TextScaled = true
	textBox.TextWrapped = true
	textBox.AnchorPoint = Vector2.new(0.5, 0.5)
	textBox.BackgroundTransparency = 1
	textBox.Position = UDim2.fromScale(0.5, 0.5)
	textBox.Size = UDim2.fromScale(0.95, 1)
	textBox.Visible = false
	textBox.ZIndex = 4
	textBox.Parent = top

	local light1 = Instance.new("ImageLabel")
	light1.Name = "Light1"
	light1.Image = "rbxassetid://17838553865"
	light1.ImageTransparency = 0.2
	light1.ScaleType = Enum.ScaleType.Slice
	light1.SliceCenter = Rect.new(256, 256, 256, 256)
	light1.AnchorPoint = Vector2.new(0.5, 0.5)
	light1.BackgroundTransparency = 1
	light1.Position = UDim2.fromScale(0.5, 0.5)
	light1.Size = UDim2.new(1, 150, 1, 150)
	light1.ZIndex = 2
	light1.Parent = top
	light1.Visible = false

	local light = Instance.new("ImageLabel")
	light.Name = "Light"
	light.Image = "rbxassetid://17838553865"
	light.ScaleType = Enum.ScaleType.Slice
	light.SliceCenter = Rect.new(256, 256, 256, 256)
	light.AnchorPoint = Vector2.new(0.5, 0.5)
	light.BackgroundTransparency = 1
	light.Position = UDim2.fromScale(0.5, 0.5)
	light.Size = UDim2.new(1, 25, 1, 25)
	light.ZIndex = 2
	light.Parent = top
	light.Visible = false

	local light2 = Instance.new("ImageLabel")
	light2.Name = "Light2"
	light2.Image = "rbxassetid://17838553865"
	light2.ImageTransparency = 0.5
	light2.ScaleType = Enum.ScaleType.Slice
	light2.SliceCenter = Rect.new(256, 256, 256, 256)
	light2.AnchorPoint = Vector2.new(0.5, 0.5)
	light2.BackgroundTransparency = 1
	light2.Position = UDim2.fromScale(0.5, 0.5)
	light2.Size = UDim2.new(1, 200, 1, 200)
	light2.ZIndex = 2
	light2.Parent = top
	light2.Visible = false
	
	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 2.5) -- 5
	uICorner.Parent = top

	top.Parent = w

	return w
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="12">
            <Properties>
              <string name="Name">columnHeaderButtons</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function()
	local buttons = Instance.new("Frame")
	buttons.Name = "Buttons"
	buttons.BackgroundTransparency = 1
	buttons.LayoutOrder = 100000
	buttons.Size = UDim2.new(0, 37, 1, 0)

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = buttons

	local controls = Instance.new("Frame")
	controls.Name = "Controls"
	controls.BackgroundTransparency = 1
	controls.LayoutOrder = 1
	controls.Size = UDim2.new(1, 0, 0, 15)

	local addHolder = Instance.new("Frame")
	addHolder.Name = "AddHolder"
	addHolder.AnchorPoint = Vector2.new(0, 0.5)
	addHolder.BackgroundTransparency = 1
	addHolder.BorderSizePixel = 0
	addHolder.Position = UDim2.fromScale(0, 0.5)
	addHolder.Size = UDim2.fromScale(0.5, 1)

	local add = Instance.new("ImageButton")
	add.Name = "Add"
	add.Image = "rbxassetid://12788800986"
	add.ScaleType = Enum.ScaleType.Fit
	add.AnchorPoint = Vector2.new(0.5, 0.5)
	add.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	add.BackgroundTransparency = 1
	add.BorderSizePixel = 0
	add.LayoutOrder = 3
	add.Position = UDim2.fromScale(0.5, 0.5)
	add.Size = UDim2.fromOffset(11, 11)
	add.Parent = addHolder

	addHolder.Parent = controls

	local removeHolder = Instance.new("Frame")
	removeHolder.Name = "RemoveHolder"
	removeHolder.AnchorPoint = Vector2.new(1, 0.5)
	removeHolder.BackgroundTransparency = 1
	removeHolder.BorderSizePixel = 0
	removeHolder.Position = UDim2.fromScale(1, 0.5)
	removeHolder.Size = UDim2.fromScale(0.5, 1)

	local remove = Instance.new("ImageButton")
	remove.Name = "RemoveButton"
	remove.Image = "rbxassetid://12788801841"
	remove.ScaleType = Enum.ScaleType.Fit
	remove.AnchorPoint = Vector2.new(0.5, 0.5)
	remove.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	remove.ImageTransparency = 0.5
	remove.BackgroundTransparency = 1
	remove.BorderSizePixel = 0
	remove.LayoutOrder = 1
	remove.Position = UDim2.fromScale(0.5, 0.5)
	remove.Size = UDim2.fromOffset(11, 11)
	remove.Parent = removeHolder

	removeHolder.Parent = controls

	controls.Parent = buttons

	local top = Instance.new("Frame")
	top.Name = "Top"
	top.AnchorPoint = Vector2.new(0.5, 0.5)
	top.BackgroundTransparency = 1
	top.BorderSizePixel = 0
	top.LayoutOrder = 0
	top.Size = UDim2.new(1, 0, 0, 15)
	top.Parent = buttons

	return buttons
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="13">
            <Properties>
              <string name="Name">columnHeaderContainer</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local columnHeader = require(script.Parent.columnHeader)
local columnHeaderButtons = require(script.Parent.columnHeaderButtons)

return function()
	local columnHeaders = Instance.new("Frame")
	columnHeaders.Name = "ColumnHeaders"
	columnHeaders.AnchorPoint = Vector2.new(0.5, 0)
	columnHeaders.BackgroundTransparency = 1
	columnHeaders.Position = UDim2.new(0.5, 20, 0, 35) -- 70
	columnHeaders.Size = UDim2.fromOffset(37.5, 50) -- 75, 80
	columnHeaders.ZIndex = 2

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5) -- 10
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = columnHeaders

	columnHeader(1).Parent = columnHeaders
	columnHeaderButtons().Parent = columnHeaders

	local function changeSize()
		-- 75, 10, 80
		columnHeaders.Size = UDim2.fromOffset((37.5 * (#columnHeaders:GetChildren() - 1)) + (5 * (#columnHeaders:GetChildren() - 2)), 40)
	end

	columnHeaders.ChildAdded:Connect(changeSize)
	columnHeaders.ChildRemoved:Connect(changeSize)
	columnHeaders:GetPropertyChangedSignal("AbsoluteSize"):Connect(changeSize)

	return columnHeaders
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="14">
            <Properties>
              <string name="Name">columnRow</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(rowNumber: number)
	local w = Instance.new("Frame")
	w.Name = rowNumber
	w.AnchorPoint = Vector2.new(0.5, 0.5)
	w.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	w.BorderSizePixel = 0
	w.LayoutOrder = rowNumber
	w.Size = UDim2.new(1, 0, 0, 15) -- 30

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 2.5) -- 5
	uICorner.Parent = w

	return w
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="15">
            <Properties>
              <string name="Name">container</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local section = require(script.Parent.section)

return function()
	local mainContainer = Instance.new("ScrollingFrame")
	mainContainer.Name = "MainContainer"
	mainContainer.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	mainContainer.CanvasSize = UDim2.new()
	mainContainer.ScrollBarThickness = 5
	mainContainer.ScrollingDirection = Enum.ScrollingDirection.XY
	mainContainer.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	mainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
	mainContainer.BackgroundTransparency = 1
	mainContainer.BorderSizePixel = 0
	mainContainer.Position = UDim2.fromScale(0.5, 0.529)
	mainContainer.Selectable = false
	mainContainer.Size = UDim2.fromScale(1, 0.942)

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.Parent = mainContainer

	local uIPadding = Instance.new("UIPadding")
	uIPadding.Name = "UIPadding"
	uIPadding.PaddingBottom = UDim.new(0.0361, 0)
	uIPadding.PaddingLeft = UDim.new(0.0182, 0)
	uIPadding.PaddingRight = UDim.new(0.018, 0)
	uIPadding.PaddingTop = UDim.new(0.036, 0)
	uIPadding.Parent = mainContainer

	local function changeSize()
		mainContainer.CanvasSize = UDim2.fromOffset(uIListLayout.AbsoluteContentSize.X, uIListLayout.AbsoluteContentSize.Y)
	end
	
	mainContainer:GetPropertyChangedSignal("AbsoluteSize"):Connect(changeSize)
	uIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(changeSize)

	section(1).Parent = mainContainer

	return mainContainer
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="16">
            <Properties>
              <string name="Name">section</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local columnHeaderContainer = require(script.Parent.columnHeaderContainer)
local columnContainer = require(script.Parent.columnContainer)

return function(sectionNumer: number)
	local section = Instance.new("Frame")
	section.Name = "Section"..sectionNumer
	section.BackgroundTransparency = 1
	section.LayoutOrder = sectionNumer
	section.Size = UDim2.fromOffset(235, 550) -- 900

	local sectionControls = Instance.new("Frame")
	sectionControls.Name = "SectionControls"
	sectionControls.AnchorPoint = Vector2.new(0.5, 0)
	sectionControls.BackgroundTransparency = 1
	sectionControls.Position = UDim2.new(0.5, 0, 0, 7.5) -- 15
	sectionControls.Size = UDim2.fromOffset(75, 22.5) -- 150, 45

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5) -- 10
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.Parent = sectionControls

	local waitTime = Instance.new("TextBox")
	waitTime.Name = "WaitTime"
	waitTime.CursorPosition = -1
	waitTime.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	waitTime.PlaceholderText = "Wait Time"
	waitTime.Text = "0.1"
	waitTime.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	waitTime.TextScaled = true
	waitTime.TextSize = 40
	waitTime.TextWrapped = true
	waitTime.TextYAlignment = Enum.TextYAlignment.Bottom
	waitTime.AnchorPoint = Vector2.new(0.5, 0)
	waitTime.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	waitTime.LayoutOrder = 2
	waitTime.Position = UDim2.new(0.5, 0, 0, 7.5) -- 15
	waitTime.Size = UDim2.fromOffset(75, 22.5) -- 150, 45
	waitTime.ZIndex = 4

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 5)
	uICorner.Parent = waitTime

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 40
	uITextSizeConstraint.Parent = waitTime

	waitTime.Parent = sectionControls

	local add = Instance.new("ImageButton")
	add.Name = "Add"
	add.Image = "rbxassetid://12788800986"
	add.ScaleType = Enum.ScaleType.Fit
	add.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	add.BackgroundTransparency = 1
	add.BorderSizePixel = 0
	add.LayoutOrder = 3
	add.Size = UDim2.fromOffset(11.5, 11.5) -- 23, 23
	add.Parent = sectionControls
	add.ZIndex = 4

	local remove = Instance.new("ImageButton")
	remove.Name = "RemoveButton"
	remove.Image = "rbxassetid://12788801841"
	remove.ScaleType = Enum.ScaleType.Fit
	remove.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	remove.ImageTransparency = 0.5
	remove.BackgroundTransparency = 1
	remove.BorderSizePixel = 0
	remove.LayoutOrder = 1
	remove.Size = UDim2.fromOffset(11.5, 11.5)
	remove.Parent = sectionControls
	remove.ZIndex = 4

	sectionControls.Parent = section

	local columnHeaders = columnHeaderContainer()
	columnHeaders.Parent = section
	
	local columnContainer, indicator = columnContainer()
	columnContainer.Parent = section
	indicator.Parent = section

	-- indicator.Indicator.Position = UDim2.new(0.5, 1.25, 0, (columnContainer["1"]["1"].AbsolutePosition.Y - 2.5) + 37.5) -- 2.5, 5
	indicator.Indicator.Position = UDim2.new(0.5, 1.25, 0, ((columnContainer["1"]["1"].LayoutOrder - 1) * 20)-3)

	return section
end</string>
            </Properties>
          </Item>
        </Item>
        <Item class="Folder" referent="17">
          <Properties>
            <string name="Name">export</string>
          </Properties>
          <Item class="ModuleScript" referent="18">
            <Properties>
              <string name="Name">container</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local exportOption = require(script.Parent:WaitForChild("exportOption"))

return function()
	local mainContainer = Instance.new("ScrollingFrame")
	mainContainer.Name = "MainContainer"
	mainContainer.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	mainContainer.CanvasSize = UDim2.new()
	mainContainer.ScrollBarThickness = 5
	mainContainer.ScrollingDirection = Enum.ScrollingDirection.XY
	mainContainer.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	mainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
	mainContainer.BackgroundTransparency = 1
	mainContainer.BorderSizePixel = 0
	mainContainer.Position = UDim2.fromScale(0.5, 0.5)
	mainContainer.Selectable = false
	mainContainer.Size = UDim2.fromScale(1, 1)

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.Parent = mainContainer

	local selectExportOption = Instance.new("Frame")
	selectExportOption.Name = "SelectExportOption"
	selectExportOption.AnchorPoint = Vector2.new(0.5, 0.5)
	selectExportOption.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	selectExportOption.BorderSizePixel = 0
	selectExportOption.Position = UDim2.fromScale(0.5, 0.5)
	selectExportOption.Size = UDim2.fromOffset(350, 200)
	selectExportOption.Parent = mainContainer
	-- selectExportOption.Visible = false

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0, 10)
	UICorner.Parent = selectExportOption

	local textLabel = Instance.new("TextLabel")
	textLabel.Name = "TextLabel"
	textLabel.AnchorPoint = Vector2.new(0.5, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.Position = UDim2.fromScale(0.5, 0.02)
	textLabel.Size = UDim2.new(1, 0, 0, 30)
	textLabel.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	textLabel.Text = "Select Export Option"
	textLabel.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textLabel.TextScaled = true
	textLabel.TextSize = 45
	
	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.MaxTextSize = 45
	uITextSizeConstraint.Parent = textLabel
	
	textLabel.Parent = selectExportOption

	local options = Instance.new("Frame")
	options.Name = "Options"
	options.AnchorPoint = Vector2.new(0.5, 1)
	options.BackgroundTransparency = 1
	options.Position = UDim2.fromScale(0.5, 0.95)
	options.Size = UDim2.new(1, 0, 0, 150)

	exportOption("ChassisPlugin", "Chassis Plugin").Parent = options
	exportOption("CustomCode", "Custom Code").Parent = options

	options.Parent = selectExportOption

	local uIGridLayout = Instance.new("UIGridLayout")
	uIGridLayout.Name = "UIGridLayout"
	uIGridLayout.CellPadding = UDim2.new(0, 7, 0, 7)
	uIGridLayout.CellSize = UDim2.new(0, 113, 0, 33)
	uIGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIGridLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIGridLayout.Parent = options

	local selection = Instance.new("Frame")
	selection.Name = "Selection"
	selection.AnchorPoint = Vector2.new(0.5, 0.5)
	selection.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	selection.BorderSizePixel = 0
	selection.Position = UDim2.fromScale(0.5, 0.5)
	selection.Size = UDim2.fromOffset(350, 150)
	selection.Parent = mainContainer
	selection.Visible = false

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 10)
	uICorner.Parent = selection

	local textLabel = Instance.new("TextLabel")
	textLabel.Name = "TextLabel"
	textLabel.FontFace = Font.new(
	"rbxasset://fonts/families/Arial.json",
	Enum.FontWeight.Bold,
	Enum.FontStyle.Normal
	)
	textLabel.Text = "Select The Car You Want To Export To"
	textLabel.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textLabel.TextScaled = true
	textLabel.TextSize = 45
	textLabel.TextWrapped = true
	textLabel.AnchorPoint = Vector2.new(0.5, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.Position = UDim2.fromScale(0.5, 0.1)
	textLabel.Size = UDim2.new(1, 0, 0, 30)

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 45
	uITextSizeConstraint.Parent = textLabel

	textLabel.Parent = selection

	local options = Instance.new("Frame")
	options.Name = "Options"
	options.AnchorPoint = Vector2.new(0.5, 1)
	options.BackgroundTransparency = 1
	options.Position = UDim2.fromScale(0.5, 0.9)
	options.Size = UDim2.new(1, 0, 0, 33)

	local selectButton = Instance.new("TextButton")
	selectButton.Name = "SelectButton"
	selectButton.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	selectButton.Text = "Select"
	selectButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	selectButton.TextScaled = true
	selectButton.TextSize = 25
	selectButton.TextWrapped = true
	selectButton.AutoButtonColor = false
	selectButton.AnchorPoint = Vector2.new(0.5, 0)
	selectButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton)
	selectButton.BorderSizePixel = 0
	selectButton.LayoutOrder = 1
	selectButton.Position = UDim2.fromScale(0.5, 0.13)
	selectButton.Size = UDim2.fromOffset(113, 33)

	local uITextSizeConstraint1 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint1.Name = "UITextSizeConstraint"
	uITextSizeConstraint1.MaxTextSize = 25
	uITextSizeConstraint1.Parent = selectButton

	local uICorner1 = Instance.new("UICorner")
	uICorner1.Name = "UICorner"
	uICorner1.CornerRadius = UDim.new(0, 7)
	uICorner1.Parent = selectButton

	selectButton.Parent = options

	local cancelButton = Instance.new("TextButton")
	cancelButton.Name = "CancelButton"
	cancelButton.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	cancelButton.Text = "Cancel"
	cancelButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	cancelButton.TextScaled = true
	cancelButton.TextSize = 25
	cancelButton.TextWrapped = true
	cancelButton.AutoButtonColor = false
	cancelButton.AnchorPoint = Vector2.new(0.5, 0)
	cancelButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	cancelButton.BorderSizePixel = 0
	cancelButton.LayoutOrder = 1
	cancelButton.Position = UDim2.fromScale(0.5, 0.13)
	cancelButton.Size = UDim2.fromOffset(113, 33)

	local uITextSizeConstraint2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint2.Name = "UITextSizeConstraint"
	uITextSizeConstraint2.MaxTextSize = 25
	uITextSizeConstraint2.Parent = cancelButton

	local uICorner2 = Instance.new("UICorner")
	uICorner2.Name = "UICorner"
	uICorner2.CornerRadius = UDim.new(0, 7)
	uICorner2.Parent = cancelButton

	cancelButton.Parent = options

	local uIGridLayout = Instance.new("UIGridLayout")
	uIGridLayout.Name = "UIGridLayout"
	uIGridLayout.CellPadding = UDim2.fromOffset(7, 7)
	uIGridLayout.CellSize = UDim2.fromOffset(113, 33)
	uIGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIGridLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIGridLayout.Parent = options

	options.Parent = selection

	local selection1 = Instance.new("TextLabel")
	selection1.Name = "Selection"
	selection1.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	selection1.RichText = true
	selection1.Text = "&lt;b>Currently Selecting:&lt;/b> Nothing"
	selection1.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Selected)
	selection1.TextScaled = true
	selection1.TextSize = 45
	selection1.TextWrapped = true
	selection1.AnchorPoint = Vector2.new(0.5, 0.5)
	selection1.BackgroundTransparency = 1
	selection1.Position = UDim2.fromScale(0.5, 0.5)
	selection1.Size = UDim2.new(1, 0, 0, 30)

	local uITextSizeConstraint3 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint3.Name = "UITextSizeConstraint"
	uITextSizeConstraint3.MaxTextSize = 25
	uITextSizeConstraint3.Parent = selection1

	selection1.Parent = selection

	local chassisPluginExports = Instance.new("Frame")
	chassisPluginExports.Name = "ChassisPluginExports"
	chassisPluginExports.AnchorPoint = Vector2.new(0.5, 0.5)
	chassisPluginExports.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	chassisPluginExports.BorderSizePixel = 0
	chassisPluginExports.Position = UDim2.fromScale(0.5, 0.5)
	chassisPluginExports.Size = UDim2.fromOffset(600, 617)
	chassisPluginExports.Parent = mainContainer
	chassisPluginExports.Visible = false

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0, 10)
	UICorner.Parent = chassisPluginExports

	local textLabel = Instance.new("TextLabel")
	textLabel.Name = "TextLabel"
	textLabel.AnchorPoint = Vector2.new(0.5, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.Position = UDim2.fromScale(0.5, 0.02)
	textLabel.Size = UDim2.new(1, 0, 0, 30)
	textLabel.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	textLabel.Text = "Select Pattern To Export To"
	textLabel.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textLabel.TextScaled = true
	textLabel.TextSize = 45
	
	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.MaxTextSize = 45
	uITextSizeConstraint.Parent = textLabel
	
	textLabel.Parent = chassisPluginExports

	local functionsHolder = Instance.new("ScrollingFrame")
	functionsHolder.Name = "FunctionsHolder"
	functionsHolder.AnchorPoint = Vector2.new(0.5, 0)
	functionsHolder.BackgroundTransparency = 1
	functionsHolder.BorderSizePixel = 0
	functionsHolder.Position = UDim2.fromScale(0.5, 0.16)
	functionsHolder.Size = UDim2.new(1, 0, 0, 38)
	functionsHolder.Parent = chassisPluginExports
	functionsHolder.AutomaticCanvasSize = Enum.AutomaticSize.X
	functionsHolder.ClipsDescendants = true
	functionsHolder.CanvasSize = UDim2.new(0, 0, 0, 0)
	functionsHolder.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	functionsHolder.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	functionsHolder.ScrollBarThickness = 5

	local uIListLayout_10 = Instance.new("UIListLayout")
	uIListLayout_10.Padding = UDim.new(0, 7)
	uIListLayout_10.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout_10.HorizontalAlignment = Enum.HorizontalAlignment.Left
	uIListLayout_10.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout_10.Parent = functionsHolder

	local createPatternHolder = Instance.new("Frame")
	createPatternHolder.Name = "CreatePatternHolder"
	createPatternHolder.AnchorPoint = Vector2.new(0.5, 0)
	createPatternHolder.BackgroundTransparency = 1
	createPatternHolder.Position = UDim2.fromScale(0.5, 0.1)
	createPatternHolder.Size = UDim2.new(1, 0, 0, 33)

	local uIListLayout_1 = Instance.new("UIListLayout")
	uIListLayout_1.Padding = UDim.new(0, 7)
	uIListLayout_1.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout_1.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout_1.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout_1.Parent = createPatternHolder

	local patternName = Instance.new("TextBox")
	patternName.Name = "PatternName"
	patternName.AnchorPoint = Vector2.new(0.5, 0)
	patternName.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	patternName.BorderSizePixel = 0
	patternName.LayoutOrder = 1
	patternName.Position = UDim2.fromScale(0.5, 0.13)
	patternName.Size = UDim2.fromOffset(233, 33)
	patternName.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	patternName.Text = ""
	patternName.PlaceholderText = "Pattern Number/Function Name"
	patternName.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	patternName.TextScaled = true
	patternName.TextSize = 25

	local uITextSizeConstraint_2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_2.MaxTextSize = 25
	uITextSizeConstraint_2.Parent = patternName

	local uICorner_2 = Instance.new("UICorner")
	uICorner_2.CornerRadius = UDim.new(0, 7)
	uICorner_2.Parent = patternName

	patternName.Parent = createPatternHolder

	local createPattern = Instance.new("TextButton")
	createPattern.Name = "CreatePattern"
	createPattern.AnchorPoint = Vector2.new(0.5, 0)
	createPattern.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	createPattern.BorderSizePixel = 0
	createPattern.LayoutOrder = 1
	createPattern.Position = UDim2.fromScale(0.5, 0.13)
	createPattern.Size = UDim2.fromOffset(113, 33)
	createPattern.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	createPattern.Text = "Create Pattern"
	createPattern.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	createPattern.AutoButtonColor = false
	createPattern.TextScaled = true
	createPattern.TextSize = 25

	local uITextSizeConstraint_2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_2.MaxTextSize = 25
	uITextSizeConstraint_2.Parent = createPattern

	local uICorner_2 = Instance.new("UICorner")
	uICorner_2.CornerRadius = UDim.new(0, 7)
	uICorner_2.Parent = createPattern

	createPattern.Parent = createPatternHolder

	local createFunction = Instance.new("TextButton")
	createFunction.Name = "CreateFunction"
	createFunction.AnchorPoint = Vector2.new(0.5, 0)
	createFunction.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	createFunction.BorderSizePixel = 0
	createFunction.LayoutOrder = 1
	createFunction.Position = UDim2.fromScale(0.5, 0.13)
	createFunction.Size = UDim2.fromOffset(113, 33)
	createFunction.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	createFunction.Text = "Create Function"
	createFunction.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	createFunction.AutoButtonColor = false
	createFunction.TextScaled = true
	createFunction.TextSize = 25

	local uITextSizeConstraint_2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_2.MaxTextSize = 25
	uITextSizeConstraint_2.Parent = createFunction

	local uICorner_2 = Instance.new("UICorner")
	uICorner_2.CornerRadius = UDim.new(0, 7)
	uICorner_2.Parent = createFunction

	createFunction.Parent = createPatternHolder

	createPatternHolder.Parent = chassisPluginExports

	local exportsContainer = Instance.new("ScrollingFrame")
	exportsContainer.Name = "ExportsContainer"
	exportsContainer.AnchorPoint = Vector2.new(0.5, 1)
	exportsContainer.BackgroundTransparency = 1
	exportsContainer.Position = UDim2.fromScale(0.5, 0.96)
	exportsContainer.Size = UDim2.fromOffset(533, 450)
	exportsContainer.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	exportsContainer.CanvasSize = UDim2.new()
	exportsContainer.ScrollBarThickness = 5
	exportsContainer.ScrollingDirection = Enum.ScrollingDirection.Y
	exportsContainer.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	exportsContainer.VerticalScrollBarInset = Enum.ScrollBarInset.Always

	local uIListLayout_2 = Instance.new("UIListLayout")
	uIListLayout_2.Padding = UDim.new(0, 7)
	uIListLayout_2.FillDirection = Enum.FillDirection.Vertical
	uIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout_2.Parent = exportsContainer

	exportsContainer.Parent = chassisPluginExports

	local function updateSavesCanvas()
		exportsContainer.CanvasSize = UDim2.fromOffset(0, uIListLayout_2.AbsoluteContentSize.Y)
	end
	exportsContainer:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateSavesCanvas)
	uIListLayout_2:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateSavesCanvas)

	local function sortSavesCanvas()
		local children = {}
		for _, child in pairs(exportsContainer:GetChildren()) do
			if child:IsA("Frame") then
				table.insert(children, child.Name)
			end
		end
		table.sort(children)

		for i=1, #children do
			exportsContainer:FindFirstChild(children[i]).LayoutOrder = i
		end
	end
	exportsContainer.ChildAdded:Connect(sortSavesCanvas)
	exportsContainer.ChildRemoved:Connect(sortSavesCanvas)

	local function updateCanvas()
		mainContainer.CanvasSize = UDim2.fromOffset(uIListLayout.AbsoluteContentSize.X, uIListLayout.AbsoluteContentSize.Y)
	end
	
	mainContainer:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateCanvas)
	uIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvas)

	createPattern.MouseEnter:Connect(function()
		createPattern.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Hover)
		createPattern.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	createPattern.MouseLeave:Connect(function()
		createPattern.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
		createPattern.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	createFunction.MouseEnter:Connect(function()
		createFunction.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Hover)
		createFunction.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	createFunction.MouseLeave:Connect(function()
		createFunction.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
		createFunction.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	selectButton.MouseEnter:Connect(function()
		selectButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton, Enum.StudioStyleGuideModifier.Hover)
		selectButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	selectButton.MouseLeave:Connect(function()
		selectButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton)
		selectButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)

	cancelButton.MouseEnter:Connect(function()
		cancelButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Hover)
		cancelButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	cancelButton.MouseLeave:Connect(function()
		cancelButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
		cancelButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	return mainContainer
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="19">
            <Properties>
              <string name="Name">exportOption</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(name:string, text: string)
	local exportOption = Instance.new("TextButton")
	exportOption.Name = name
	exportOption.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	exportOption.Text = text
	exportOption.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	exportOption.TextScaled = true
	exportOption.TextSize = 25
	exportOption.TextWrapped = true
	exportOption.AutoButtonColor = false
	exportOption.AnchorPoint = Vector2.new(0.5, 0)
	exportOption.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	exportOption.BorderSizePixel = 0
	exportOption.LayoutOrder = 1
	exportOption.Position = UDim2.fromScale(0.5, 0.13)
	exportOption.Size = UDim2.fromOffset(113, 33)

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 25
	uITextSizeConstraint.Parent = exportOption

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 7)
	uICorner.Parent = exportOption

	exportOption.MouseEnter:Connect(function()
		exportOption.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Hover)
		exportOption.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	exportOption.MouseLeave:Connect(function()
		exportOption.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
		exportOption.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	return exportOption
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="20">
            <Properties>
              <string name="Name">function</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(functionNameStringWithSpaces: string, functionNameStringWithoutSpaces: string)
	local functionButton = Instance.new("TextButton")
	functionButton.Name = functionNameStringWithoutSpaces
	functionButton.AnchorPoint = Vector2.new(0.5, 0)
	functionButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	functionButton.BorderSizePixel = 0
	functionButton.LayoutOrder = 1
	functionButton.Position = UDim2.fromScale(0.5, 0.13)
	functionButton.Size = UDim2.fromOffset(113, 33)
	functionButton.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	functionButton.Text = functionNameStringWithSpaces
	functionButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	functionButton.AutoButtonColor = false
	functionButton.TextScaled = true
	functionButton.TextSize = 25

	local uITextSizeConstraint_2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_2.MaxTextSize = 25
	uITextSizeConstraint_2.Parent = functionButton

	local uICorner_2 = Instance.new("UICorner")
	uICorner_2.CornerRadius = UDim.new(0, 7)
	uICorner_2.Parent = functionButton

	functionButton.MouseEnter:Connect(function()
		if functionButton:GetAttribute("Selected") == true then return end
		functionButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Hover)
		functionButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	functionButton.MouseLeave:Connect(function()
		if functionButton:GetAttribute("Selected") == true then return end
		functionButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
		functionButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	functionButton:GetAttributeChangedSignal("Selected"):Connect(function()
		if functionButton:GetAttribute("Selected") == true then
			functionButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton)
			functionButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
		else
			functionButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
			functionButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
		end
	end)

	return functionButton
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="21">
            <Properties>
              <string name="Name">pattern</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(saveNameString: string)
	local export = Instance.new("Frame")
	export.Name = saveNameString
	export.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	export.BorderSizePixel = 0
	export.Size = UDim2.new(1, 0, 0, 33)
	
	local uICorner = Instance.new("UICorner")
	uICorner.CornerRadius = UDim.new(0, 7)
	uICorner.Parent = export

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Padding = UDim.new(0, 3)
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = export

	local uIPadding = Instance.new("UIPadding")
	uIPadding.PaddingLeft = UDim.new(0, 7)
	uIPadding.PaddingRight = UDim.new(0, 7)
	uIPadding.Parent = export

	local exportName = Instance.new("TextLabel")
	exportName.Name = "ExportName"
	exportName.BackgroundTransparency = 1
	exportName.Size = UDim2.new(0, 310, 0.95, 0)
	exportName.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	exportName.Text = saveNameString
	exportName.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	exportName.TextScaled = true
	exportName.TextSize = 40
	exportName.TextXAlignment = Enum.TextXAlignment.Left
	exportName.Parent = export

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.MaxTextSize = 40
	uITextSizeConstraint.Parent = exportName

	local overwriteButton = Instance.new("TextButton")
	overwriteButton.Name = "OverwriteButton"
	overwriteButton.LayoutOrder = 2
	overwriteButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	overwriteButton.BorderSizePixel = 0
	overwriteButton.Size = UDim2.new(0, 67, 0.8, 0)
	overwriteButton.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	overwriteButton.Text = "Overwrite"
	overwriteButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	overwriteButton.AutoButtonColor = false
	overwriteButton.TextScaled = true
	overwriteButton.TextWrapped = true
	overwriteButton.Parent = export

	local uICorner_2 = Instance.new("UICorner")
	uICorner_2.CornerRadius = UDim.new(0, 5)
	uICorner_2.Parent = overwriteButton

	local uITextSizeConstraint_2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_2.MaxTextSize = 25
	uITextSizeConstraint_2.Parent = overwriteButton

	local uIPadding_2 = Instance.new("UIPadding")
	uIPadding_2.PaddingLeft = UDim.new(0, 5)
	uIPadding_2.PaddingRight = UDim.new(0, 5)
	uIPadding_2.Parent = overwriteButton

	local saveToButton = Instance.new("TextButton")
	saveToButton.Name = "AddToButton"
	saveToButton.LayoutOrder = 3
	saveToButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	saveToButton.BorderSizePixel = 0
	saveToButton.Size = UDim2.new(0, 67, 0.8, 0)
	saveToButton.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	saveToButton.Text = "Add To"
	saveToButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	saveToButton.AutoButtonColor = false
	saveToButton.TextScaled = true
	saveToButton.TextWrapped = true
	saveToButton.Parent = export

	local uICorner_3 = Instance.new("UICorner")
	uICorner_3.CornerRadius = UDim.new(0, 5)
	uICorner_3.Parent = saveToButton

	local uITextSizeConstraint_3 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_3.MaxTextSize = 25
	uITextSizeConstraint_3.Parent = saveToButton

	local uIPadding_3 = Instance.new("UIPadding")
	uIPadding_3.PaddingLeft = UDim.new(0, 5)
	uIPadding_3.PaddingRight = UDim.new(0, 5)
	uIPadding_3.Parent = saveToButton

	local deleteButton = Instance.new("TextButton")
	deleteButton.Name = "DeleteButton"
	deleteButton.LayoutOrder = 5
	deleteButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	deleteButton.BorderSizePixel = 0
	deleteButton.Size = UDim2.new(0, 67, 0.8, 0)
	deleteButton.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	deleteButton.Text = "Delete"
	deleteButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	deleteButton.AutoButtonColor = false
	deleteButton.TextScaled = true
	deleteButton.TextWrapped = true
	deleteButton.Parent = export

	local uICorner_5 = Instance.new("UICorner")
	uICorner_5.CornerRadius = UDim.new(0, 5)
	uICorner_5.Parent = deleteButton

	local uITextSizeConstraint_5 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_5.MaxTextSize = 25
	uITextSizeConstraint_5.Parent = deleteButton

	local uIPadding_5 = Instance.new("UIPadding")
	uIPadding_5.PaddingLeft = UDim.new(0, 5)
	uIPadding_5.PaddingRight = UDim.new(0, 5)
	uIPadding_5.Parent = deleteButton

	overwriteButton.MouseEnter:Connect(function()
		local baseColor = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		overwriteButton.BackgroundColor3 = Color3.new(baseColor.R + 0.05, baseColor.G + 0.05, baseColor.B + 0.05)
		overwriteButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	overwriteButton.MouseLeave:Connect(function()
		overwriteButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		overwriteButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	saveToButton.MouseEnter:Connect(function()
		local baseColor = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		saveToButton.BackgroundColor3 = Color3.new(baseColor.R + 0.05, baseColor.G + 0.05, baseColor.B + 0.05)
		saveToButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	saveToButton.MouseLeave:Connect(function()
		saveToButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		saveToButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	deleteButton.MouseEnter:Connect(function()
		local baseColor = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		deleteButton.BackgroundColor3 = Color3.new(baseColor.R + 0.05, baseColor.G + 0.05, baseColor.B + 0.05)
		deleteButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	deleteButton.MouseLeave:Connect(function()
		deleteButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		deleteButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	return export
end</string>
            </Properties>
          </Item>
        </Item>
        <Item class="Folder" referent="22">
          <Properties>
            <string name="Name">faders</string>
          </Properties>
          <Item class="ModuleScript" referent="23">
            <Properties>
              <string name="Name">buttons</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(buttons: Frame)
	local controls = Instance.new("Frame")
	controls.Name = "Controls"
	controls.AnchorPoint = Vector2.new(0.5, 0.5)
	controls.BackgroundTransparency = 1
	controls.BorderSizePixel = 0
	controls.LayoutOrder = 1e+04
	controls.Size = UDim2.new(1, 0, 0, 290)

	local uIListLayout1 = Instance.new("UIListLayout")
	uIListLayout1.Name = "UIListLayout"
	uIListLayout1.Padding = UDim.new(0, 10)
	uIListLayout1.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout1.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout1.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout1.Parent = controls

	local removeHolder = Instance.new("Frame")
	removeHolder.Name = "RemoveHolder"
	removeHolder.BackgroundTransparency = 1
	removeHolder.Size = UDim2.new(1, 0, 0, 30)

	local remove = Instance.new("ImageButton")
	remove.Name = "RemoveButton"
	remove.Image = "rbxassetid://12788801841"
	remove.ScaleType = Enum.ScaleType.Fit
	remove.AnchorPoint = Vector2.new(0.5, 0.5)
	remove.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	remove.ImageTransparency = 0.2
	remove.BackgroundTransparency = 1
	remove.LayoutOrder = 1
	remove.Position = UDim2.fromScale(0.5, 0.5)
	remove.Size = UDim2.fromOffset(23, 23)
	remove.Parent = removeHolder

	removeHolder.Parent = controls

	local addHolder = Instance.new("Frame")
	addHolder.Name = "AddHolder"
	addHolder.BackgroundTransparency = 1
	addHolder.Size = UDim2.new(1, 0, 0, 30)

	local add = Instance.new("ImageButton")
	add.Name = "Add"
	add.Image = "rbxassetid://12788800986"
	add.ScaleType = Enum.ScaleType.Fit
	add.AnchorPoint = Vector2.new(0.5, 0.5)
	add.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	add.BackgroundTransparency = 1
	add.BorderSizePixel = 0
	add.LayoutOrder = 3
	add.Position = UDim2.fromScale(0.5, 0.5)
	add.Size = UDim2.fromOffset(23, 23)
	add.Parent = addHolder

	addHolder.Parent = controls

	controls.Parent = buttons

	local topControls = Instance.new("Frame")
	topControls.Name = "TopControls"
	topControls.AnchorPoint = Vector2.new(0.5, 0.5)
	topControls.BackgroundTransparency = 1
	topControls.BorderSizePixel = 0
	topControls.LayoutOrder = -1
	topControls.Size = UDim2.new(1, 0, 0, 30)

	local uIListLayout2 = Instance.new("UIListLayout")
	uIListLayout2.Name = "UIListLayout"
	uIListLayout2.Padding = UDim.new(0, 10)
	uIListLayout2.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout2.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout2.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout2.Parent = topControls

	local removeHolder1 = Instance.new("Frame")
	removeHolder1.Name = "RemoveHolder"
	removeHolder1.BackgroundTransparency = 1
	removeHolder1.Size = UDim2.fromOffset(23, 30)

	local remove1 = Instance.new("ImageButton")
	remove1.Name = "RemoveButton"
	remove1.Image = "rbxassetid://12788801841"
	remove1.ScaleType = Enum.ScaleType.Fit
	remove1.AnchorPoint = Vector2.new(0.5, 0.5)
	remove1.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	remove1.ImageTransparency = 0.2
	remove1.BackgroundTransparency = 1
	remove1.LayoutOrder = 1
	remove1.Position = UDim2.fromScale(0.5, 0.5)
	remove1.Size = UDim2.fromOffset(23, 23)
	remove1.Parent = removeHolder1

	removeHolder1.Parent = topControls

	local addHolder1 = Instance.new("Frame")
	addHolder1.Name = "AddHolder"
	addHolder1.BackgroundTransparency = 1
	addHolder1.Size = UDim2.fromOffset(23, 30)

	local add1 = Instance.new("ImageButton")
	add1.Name = "Add"
	add1.Image = "rbxassetid://12788800986"
	add1.ScaleType = Enum.ScaleType.Fit
	add1.AnchorPoint = Vector2.new(0.5, 0.5)
	add1.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	add1.BackgroundTransparency = 1
	add1.BorderSizePixel = 0
	add1.LayoutOrder = 3
	add1.Position = UDim2.fromScale(0.5, 0.5)
	add1.Size = UDim2.fromOffset(23, 23)
	add1.Parent = addHolder1

	addHolder1.Parent = topControls

	topControls.Parent = buttons

	local topFill = Instance.new("Frame")
	topFill.Name = "TopFill"
	topFill.AnchorPoint = Vector2.new(0.5, 1)
	topFill.BackgroundTransparency = 1
	topFill.BorderSizePixel = 0
	topFill.Position = UDim2.fromScale(0.5, 0.251)
	topFill.Size = UDim2.new(1, 0, 0, 30)
	topFill.Parent = buttons
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="24">
            <Properties>
              <string name="Name">container</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local section = require(script.Parent.section)

return function(colors: { number:Color3 }, colorLabels: { number:string })
	local mainContainer = Instance.new("ScrollingFrame")
	mainContainer.Name = "MainContainer"
	mainContainer.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	mainContainer.CanvasSize = UDim2.new()
	mainContainer.ScrollBarThickness = 5
	mainContainer.ScrollingDirection = Enum.ScrollingDirection.XY
	mainContainer.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	mainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
	mainContainer.BackgroundTransparency = 1
	mainContainer.BorderSizePixel = 0
	mainContainer.Position = UDim2.fromScale(0.5, 0.529)
	mainContainer.Selectable = false
	mainContainer.Size = UDim2.fromScale(1, 0.942)

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.Parent = mainContainer

	local uIPadding = Instance.new("UIPadding")
	uIPadding.Name = "UIPadding"
	uIPadding.PaddingBottom = UDim.new(0.0361, 0)
	uIPadding.PaddingLeft = UDim.new(0.0182, 0)
	uIPadding.PaddingRight = UDim.new(0.018, 0)
	uIPadding.PaddingTop = UDim.new(0.036, 0)
	uIPadding.Parent = mainContainer

	local function changeSize()
		mainContainer.CanvasSize = UDim2.fromOffset(uIListLayout.AbsoluteContentSize.X, uIListLayout.AbsoluteContentSize.Y)
	end
	
	mainContainer:GetPropertyChangedSignal("AbsoluteSize"):Connect(changeSize)
	uIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(changeSize)

	section(1, colors, colorLabels).Parent = mainContainer

	return mainContainer
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="25">
            <Properties>
              <string name="Name">dropdown</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(colors: { number:Color3 }, colorLabels: { number:string })
	local color = Instance.new("ScrollingFrame")
	color.Name = "Color"
	color.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	color.CanvasSize = UDim2.new()
	color.ScrollBarThickness = 5
	color.ScrollingDirection = Enum.ScrollingDirection.Y
	color.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	color.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
	color.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Left
	color.AnchorPoint = Vector2.new(0.5, 0)
	color.BackgroundColor3 = Color3.fromRGB(64, 64, 64)
	color.BorderSizePixel = 0
	color.LayoutOrder = 1
	color.Position = UDim2.new(0.5, 0, 0, 170)
	color.Size = UDim2.new(1, 0, 0, 100)
	color.ZIndex = 2
	color.Visible = false

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 5)
	uICorner.Parent = color

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = color

	local function canvasSize()
		color.CanvasSize = UDim2.fromOffset(0, uIListLayout.AbsoluteContentSize.Y)
	end
	uIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(canvasSize)

	for i: number,v: Color3 in pairs(colors) do
		local textButton = Instance.new("TextButton")
		textButton.Name = colorLabels[i]
		textButton.FontFace = Font.new(
			"rbxasset://fonts/families/Arial.json",
			Enum.FontWeight.Bold,
			Enum.FontStyle.Normal
		)
		textButton.Text = colorLabels[i]
		textButton.TextColor3 = v
		textButton.TextScaled = true
		textButton.TextSize = 14
		textButton.TextWrapped = true
		textButton.Active = true
		textButton.AnchorPoint = Vector2.new(0.5, 0.5)
		textButton.BackgroundTransparency = 1
		textButton.Position = UDim2.fromScale(0.5, 0.5)
		textButton.Selectable = true
		textButton.Size = UDim2.new(1, 0, 0, 15)
		textButton.ZIndex = 3
		textButton.LayoutOrder = i

		local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
		uITextSizeConstraint.Name = "UITextSizeConstraint"
		uITextSizeConstraint.MaxTextSize = 25
		uITextSizeConstraint.Parent = textButton

		textButton.Parent = color
	end

	local easingStyle = Instance.new("ScrollingFrame")
	easingStyle.Name = "EasingStyle"
	easingStyle.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	easingStyle.CanvasSize = UDim2.new()
	easingStyle.ScrollBarThickness = 5
	easingStyle.ScrollingDirection = Enum.ScrollingDirection.Y
	easingStyle.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	easingStyle.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
	easingStyle.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Left
	easingStyle.AnchorPoint = Vector2.new(0.5, 0)
	easingStyle.BackgroundColor3 = Color3.fromRGB(64, 64, 64)
	easingStyle.BorderSizePixel = 0
	easingStyle.LayoutOrder = 1
	easingStyle.Position = UDim2.new(0.5, 0, 0, 170)
	easingStyle.Size = UDim2.new(1, 0, 0, 100)
	easingStyle.ZIndex = 2
	easingStyle.Visible = false

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 5)
	uICorner.Parent = easingStyle

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = easingStyle

	local function easingStyleCanvasSize()
		easingStyle.CanvasSize = UDim2.fromOffset(0, uIListLayout.AbsoluteContentSize.Y)
	end
	uIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(easingStyleCanvasSize)

	for i: number,v: EnumItem in pairs(Enum.EasingStyle:GetEnumItems()) do
		local textButton = Instance.new("TextButton")
		textButton.Name = v.Name
		textButton.FontFace = Font.new(
			"rbxasset://fonts/families/Arial.json",
			Enum.FontWeight.Bold,
			Enum.FontStyle.Normal
		)
		textButton.Text = v.Name
		textButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
		textButton.TextScaled = true
		textButton.TextSize = 14
		textButton.TextWrapped = true
		textButton.Active = true
		textButton.AnchorPoint = Vector2.new(0.5, 0.5)
		textButton.BackgroundTransparency = 1
		textButton.Position = UDim2.fromScale(0.5, 0.5)
		textButton.Selectable = true
		textButton.Size = UDim2.new(1, 0, 0, 15)
		textButton.ZIndex = 3
		textButton.LayoutOrder = i

		local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
		uITextSizeConstraint.Name = "UITextSizeConstraint"
		uITextSizeConstraint.MaxTextSize = 25
		uITextSizeConstraint.Parent = textButton

		textButton.Parent = easingStyle
	end

	local easingDirection = Instance.new("ScrollingFrame")
	easingDirection.Name = "EasingDirection"
	easingDirection.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	easingDirection.CanvasSize = UDim2.new()
	easingDirection.ScrollBarThickness = 5
	easingDirection.ScrollingDirection = Enum.ScrollingDirection.Y
	easingDirection.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	easingDirection.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
	easingDirection.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Left
	easingDirection.AnchorPoint = Vector2.new(0.5, 0)
	easingDirection.BackgroundColor3 = Color3.fromRGB(64, 64, 64)
	easingDirection.BorderSizePixel = 0
	easingDirection.LayoutOrder = 1
	easingDirection.Position = UDim2.new(0.5, 0, 0, 170)
	easingDirection.Size = UDim2.new(1, 0, 0, 100)
	easingDirection.ZIndex = 2
	easingDirection.Visible = false

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 5)
	uICorner.Parent = easingDirection

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = easingDirection

	local function easingDirectionCanvasSize()
		easingDirection.CanvasSize = UDim2.fromOffset(0, uIListLayout.AbsoluteContentSize.Y)
	end
	uIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(easingDirectionCanvasSize)

	for i: number,v: EnumItem in pairs(Enum.EasingDirection:GetEnumItems()) do
		local textButton = Instance.new("TextButton")
		textButton.Name = v.Name
		textButton.FontFace = Font.new(
			"rbxasset://fonts/families/Arial.json",
			Enum.FontWeight.Bold,
			Enum.FontStyle.Normal
		)
		textButton.Text = v.Name
		textButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
		textButton.TextScaled = true
		textButton.TextSize = 14
		textButton.TextWrapped = true
		textButton.Active = true
		textButton.AnchorPoint = Vector2.new(0.5, 0.5)
		textButton.BackgroundTransparency = 1
		textButton.Position = UDim2.fromScale(0.5, 0.5)
		textButton.Selectable = true
		textButton.Size = UDim2.new(1, 0, 0, 15)
		textButton.ZIndex = 3
		textButton.LayoutOrder = i

		local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
		uITextSizeConstraint.Name = "UITextSizeConstraint"
		uITextSizeConstraint.MaxTextSize = 25
		uITextSizeConstraint.Parent = textButton

		textButton.Parent = easingDirection
	end

	return color, easingStyle, easingDirection
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="26">
            <Properties>
              <string name="Name">optionsChildren</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local tweenFrame = require(script.Parent.tweenFrame)
local rowWithTextBox = require(script.Parent.Parent.reusedContent.rowWithTextBox)

return function(options: Frame)
	local topOptions = Instance.new("Frame")
	topOptions.Name = "TopOptions"
	topOptions.AnchorPoint = Vector2.new(0.5, 0.5)
	topOptions.BackgroundTransparency = 1
	topOptions.BorderSizePixel = 0
	topOptions.LayoutOrder = -1
	topOptions.Size = UDim2.new(1, 0, 0, 65)

	local name = rowWithTextBox("Name", "NameBox", 1)
	name.AnchorPoint = Vector2.new(0.5, 0)
	name.Position = UDim2.fromScale(0.5, 0)
	name.Parent = topOptions

	local devider = Instance.new("Frame")
	devider.Name = "Devider"
	devider.AnchorPoint = Vector2.new(0, 1)
	devider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	devider.BackgroundTransparency = 1
	devider.LayoutOrder = 1
	devider.Position = UDim2.fromScale(0, 1)
	devider.Size = UDim2.new(1, 0, 0, 30)

	local frame = Instance.new("Frame")
	frame.Name = "Frame"
	frame.AnchorPoint = Vector2.new(0.5, 0.5)
	frame.BackgroundColor3 = Color3.fromRGB(86, 86, 86)
	frame.BorderSizePixel = 0
	frame.Position = UDim2.fromScale(0.5, 0.5)
	frame.Size = UDim2.fromOffset(50, 10)
	frame.Parent = devider

	devider.Parent = topOptions
	
	topOptions.Parent = options

	tweenFrame(1).Parent = options
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="27">
            <Properties>
              <string name="Name">section</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local columnFrame = require(script.Parent.Parent.reusedContent.columnFrame)
local optionsChildren = require(script.Parent.optionsChildren)
local dropdown = require(script.Parent.dropdown)
local buttons = require(script.Parent.buttons)

return function(sectionNumer: number, colors: { number:Color3 }, colorLabels: { number:string })
	local section = Instance.new("ScrollingFrame")
	section.Name = "Section"..sectionNumer
	section.BackgroundTransparency = 1
	section.BorderSizePixel = 0
	section.LayoutOrder = sectionNumer
	section.Size = UDim2.fromOffset(240, 550) -- 126
	section.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	section.CanvasSize = UDim2.new()
	section.ScrollBarThickness = 5
	section.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	section.Selectable = false

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = section

	local dropdownColumn = columnFrame("Dropdown", 0)
	dropdownColumn.UIListLayout:Destroy()
	local colors, easingStyle, easingDirection = dropdown(colors, colorLabels)
	colors.Parent = dropdownColumn
	easingStyle.Parent = dropdownColumn
	easingDirection.Parent = dropdownColumn

	local optionsColumn = columnFrame("Options", 1)
	optionsChildren(optionsColumn)

	local buttonsColumn = columnFrame("Buttons", 2)
	buttons(buttonsColumn)

	dropdownColumn.Parent = section
	optionsColumn.Parent = section
	buttonsColumn.Parent = section

	local function updateCanvas()
		section.CanvasSize = UDim2.fromOffset(0, optionsColumn.UIListLayout.AbsoluteContentSize.Y)
	end
	optionsColumn.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvas)

	return section
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="28">
            <Properties>
              <string name="Name">tweenFrame</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local rowWithTextBox = require(script.Parent.Parent.reusedContent.rowWithTextBox)
local rowWithTextButton = require(script.Parent.Parent.reusedContent.rowWithTextButton)
local checkboxFrame = require(script.Parent.Parent.reusedContent.checkbox)

return function(tweenNumber: number)
	local tweenFrame = Instance.new("Frame")
	tweenFrame.Name = `Tween{tweenNumber}`
	tweenFrame.AnchorPoint = Vector2.new(0.5, 0.5)
	tweenFrame.BackgroundTransparency = 1
	tweenFrame.BorderSizePixel = 0
	tweenFrame.LayoutOrder = tweenNumber
	tweenFrame.Size = UDim2.new(1, 0, 0, 290)

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = tweenFrame

	local color = rowWithTextButton("Color", "Color", 1)
	color.Parent = tweenFrame

	local transparencyGoal = rowWithTextBox("Transparency Goal", "TransparencyGoal", 2)
	transparencyGoal.TextBox.ClearTextOnFocus = false
	transparencyGoal.Parent = tweenFrame

	local timeToRun = rowWithTextBox("Time", "Time", 3)
	timeToRun.TextBox.ClearTextOnFocus = false
	timeToRun.Parent = tweenFrame

	local easingStyle = rowWithTextButton("Easing Style", "EasingStyle", 4)
	easingStyle.Parent = tweenFrame

	local easingDirection = rowWithTextButton("Easing Direction", "EasingDirection", 5)
	easingDirection.Parent = tweenFrame

	local repeatCount = rowWithTextBox("Repeat Count", "RepeatCount", 6)
	repeatCount.TextBox.ClearTextOnFocus = false
	repeatCount.Parent = tweenFrame

	
	local reverses = Instance.new("Frame")
	reverses.Name = "Reverses"
	reverses.AnchorPoint = Vector2.new(0.5, 1)
	reverses.BackgroundTransparency = 1
	reverses.LayoutOrder = 7
	reverses.Position = UDim2.fromScale(0.5, 1)
	reverses.Size = UDim2.fromOffset(30, 45)

	local uIListLayout1 = Instance.new("UIListLayout")
	uIListLayout1.Name = "UIListLayout"
	uIListLayout1.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout1.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout1.Parent = reverses

	local textLabel = Instance.new("TextLabel")
	textLabel.Name = "TextLabel"
	textLabel.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	textLabel.Text = "Reverses"
	textLabel.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textLabel.TextScaled = true
	textLabel.TextSize = 14
	textLabel.TextWrapped = true
	textLabel.Active = true
	textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
	textLabel.BackgroundTransparency = 1
	textLabel.LayoutOrder = 0
	textLabel.Position = UDim2.fromScale(0.5, 0.5)
	textLabel.Size = UDim2.fromOffset(75, 15)

	local uITextSizeConstraint1 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint1.Name = "UITextSizeConstraint"
	uITextSizeConstraint1.MaxTextSize = 25
	uITextSizeConstraint1.Parent = textLabel

	textLabel.Parent = reverses
	
	local checkbox = checkboxFrame()
	checkbox.Size = UDim2.fromOffset(30, 30)
	checkbox.Parent = reverses

	reverses.Parent = tweenFrame

	local delayTime = rowWithTextBox("Delay Time", "DelayTime", 8)
	delayTime.TextBox.ClearTextOnFocus = false
	delayTime.Parent = tweenFrame

	local bracketContainer = Instance.new("Frame")
	bracketContainer.Name = "BracketContainer"
	bracketContainer.BackgroundTransparency = 1
	bracketContainer.LayoutOrder = -100
	bracketContainer.Size = UDim2.fromOffset(0, -5)

	local imageLabel = Instance.new("ImageLabel")
	imageLabel.Name = "ImageLabel"
	imageLabel.Image = "rbxassetid://12878056105"
	imageLabel.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	imageLabel.ScaleType = Enum.ScaleType.Slice
	imageLabel.SliceCenter = Rect.new(4, 4, 33, 31)
	imageLabel.AnchorPoint = Vector2.new(1, 0)
	imageLabel.BackgroundTransparency = 1
	imageLabel.Position = UDim2.fromOffset(-42, 5)
	imageLabel.Size = UDim2.fromOffset(15, 290)
	imageLabel.Parent = bracketContainer

	bracketContainer.Parent = tweenFrame

	return tweenFrame
end</string>
            </Properties>
          </Item>
        </Item>
        <Item class="Folder" referent="29">
          <Properties>
            <string name="Name">loadSave</string>
          </Properties>
          <Item class="ModuleScript" referent="30">
            <Properties>
              <string name="Name">container</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function()
	local mainContainer = Instance.new("ScrollingFrame")
	mainContainer.Name = "MainContainer"
	mainContainer.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	mainContainer.CanvasSize = UDim2.new()
	mainContainer.ScrollBarThickness = 5
	mainContainer.ScrollingDirection = Enum.ScrollingDirection.XY
	mainContainer.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	mainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
	mainContainer.BackgroundTransparency = 1
	mainContainer.BorderSizePixel = 0
	mainContainer.Position = UDim2.fromScale(0.5, 0.5)
	mainContainer.Selectable = false
	mainContainer.Size = UDim2.fromScale(1, 1)

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.Parent = mainContainer

	local mainLoadSave = Instance.new("Frame")
	mainLoadSave.Name = "MainLoadSave"
	mainLoadSave.AnchorPoint = Vector2.new(0.5, 0.5)
	mainLoadSave.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	mainLoadSave.BorderSizePixel = 0
	mainLoadSave.Position = UDim2.fromScale(0.5, 0.5)
	mainLoadSave.Size = UDim2.fromOffset(600, 617)
	mainLoadSave.Parent = mainContainer

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0, 10)
	UICorner.Parent = mainLoadSave

	local textLabel = Instance.new("TextLabel")
	textLabel.Name = "TextLabel"
	textLabel.AnchorPoint = Vector2.new(0.5, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.Position = UDim2.fromScale(0.5, 0.02)
	textLabel.Size = UDim2.new(1, 0, 0, 30)
	textLabel.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	textLabel.Text = "Load/Save"
	textLabel.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textLabel.TextScaled = true
	textLabel.TextSize = 45
	
	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.MaxTextSize = 45
	uITextSizeConstraint.Parent = textLabel
	
	textLabel.Parent = mainLoadSave

	local controlsHolder = Instance.new("Frame")
	controlsHolder.Name = "ControlsHolder"
	controlsHolder.AnchorPoint = Vector2.new(0.5, 0)
	controlsHolder.BackgroundTransparency = 1
	controlsHolder.Position = UDim2.fromScale(0.5, 0.1)
	controlsHolder.Size = UDim2.new(1, 0, 0, 33)

	local uIListLayout_1 = Instance.new("UIListLayout")
	uIListLayout_1.Padding = UDim.new(0, 7)
	uIListLayout_1.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout_1.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout_1.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout_1.Parent = controlsHolder

	local saveName = Instance.new("TextBox")
	saveName.Name = "SaveName"
	saveName.AnchorPoint = Vector2.new(0.5, 0)
	saveName.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	saveName.BorderSizePixel = 0
	saveName.LayoutOrder = 1
	saveName.Position = UDim2.fromScale(0.5, 0.13)
	saveName.Size = UDim2.fromOffset(233, 33)
	saveName.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	saveName.Text = ""
	saveName.PlaceholderText = "Save Name"
	saveName.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	saveName.TextScaled = true
	saveName.TextSize = 25

	local uITextSizeConstraint_2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_2.MaxTextSize = 25
	uITextSizeConstraint_2.Parent = saveName

	local uICorner_2 = Instance.new("UICorner")
	uICorner_2.CornerRadius = UDim.new(0, 7)
	uICorner_2.Parent = saveName

	saveName.Parent = controlsHolder

	local createSave = Instance.new("TextButton")
	createSave.Name = "CreateSave"
	createSave.AnchorPoint = Vector2.new(0.5, 0)
	createSave.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	createSave.BorderSizePixel = 0
	createSave.LayoutOrder = 1
	createSave.Position = UDim2.fromScale(0.5, 0.13)
	createSave.Size = UDim2.fromOffset(113, 33)
	createSave.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	createSave.Text = "Create Save"
	createSave.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	createSave.AutoButtonColor = false
	createSave.TextScaled = true
	createSave.TextSize = 25

	local uITextSizeConstraint_2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_2.MaxTextSize = 25
	uITextSizeConstraint_2.Parent = createSave

	local uICorner_2 = Instance.new("UICorner")
	uICorner_2.CornerRadius = UDim.new(0, 7)
	uICorner_2.Parent = createSave

	createSave.Parent = controlsHolder

	local importSave = Instance.new("TextButton")
	importSave.Name = "ImportSave"
	importSave.AnchorPoint = Vector2.new(0.5, 0)
	importSave.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	importSave.BorderSizePixel = 0
	importSave.LayoutOrder = 1
	importSave.Position = UDim2.fromScale(0.5, 0.13)
	importSave.Size = UDim2.fromOffset(113, 33)
	importSave.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	importSave.Text = "Import Save"
	importSave.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	importSave.AutoButtonColor = false
	importSave.TextScaled = true
	importSave.TextSize = 25

	local uITextSizeConstraint_2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_2.MaxTextSize = 25
	uITextSizeConstraint_2.Parent = importSave

	local uICorner_2 = Instance.new("UICorner")
	uICorner_2.CornerRadius = UDim.new(0, 7)
	uICorner_2.Parent = importSave

	importSave.Parent = controlsHolder

	controlsHolder.Parent = mainLoadSave

	local savesContainer = Instance.new("ScrollingFrame")
	savesContainer.Name = "SavesContainer"
	savesContainer.AnchorPoint = Vector2.new(0.5, 1)
	savesContainer.BackgroundTransparency = 1
	savesContainer.Position = UDim2.fromScale(0.5, 0.96)
	savesContainer.Size = UDim2.fromOffset(533, 467)
	savesContainer.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	savesContainer.CanvasSize = UDim2.new()
	savesContainer.ScrollBarThickness = 5
	savesContainer.ScrollingDirection = Enum.ScrollingDirection.Y
	savesContainer.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	savesContainer.VerticalScrollBarInset = Enum.ScrollBarInset.Always

	local uIListLayout_2 = Instance.new("UIListLayout")
	uIListLayout_2.Padding = UDim.new(0, 7)
	uIListLayout_2.FillDirection = Enum.FillDirection.Vertical
	uIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout_2.Parent = savesContainer

	savesContainer.Parent = mainLoadSave

	local mainLegacySaves = Instance.new("Frame")
	mainLegacySaves.Name = "MainLegacySaves"
	mainLegacySaves.AnchorPoint = Vector2.new(0.5, 0.5)
	mainLegacySaves.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	mainLegacySaves.BorderSizePixel = 0
	mainLegacySaves.Position = UDim2.fromScale(0.5, 0.5)
	mainLegacySaves.Size = UDim2.fromOffset(500, 617)
	mainLegacySaves.Parent = mainContainer

	local uICorner_3 = Instance.new("UICorner")
	uICorner_3.CornerRadius = UDim.new(0, 10)
	uICorner_3.Parent = mainLegacySaves

	local textLabel_2 = Instance.new("TextLabel")
	textLabel_2.Name = "TextLabel"
	textLabel_2.AnchorPoint = Vector2.new(0.5, 0)
	textLabel_2.BackgroundTransparency = 1
	textLabel_2.Position = UDim2.fromScale(0.5, 0.02)
	textLabel_2.Size = UDim2.new(1, 0, 0, 30)
	textLabel_2.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	textLabel_2.Text = "Legacy Saves"
	textLabel_2.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textLabel_2.TextScaled = true
	textLabel_2.TextSize = 45
	
	local uITextSizeConstraint_3 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_3.MaxTextSize = 45
	uITextSizeConstraint_3.Parent = textLabel_2
	
	textLabel_2.Parent = mainLegacySaves

	local hideLegacySaves = Instance.new("TextButton")
	hideLegacySaves.Name = "HideLegacySaves"
	hideLegacySaves.BackgroundTransparency = 1
	hideLegacySaves.Position = UDim2.fromScale(0.01, 0.005)
	hideLegacySaves.Size = UDim2.new(0.25, 0, 0, 15)
	hideLegacySaves.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	hideLegacySaves.Text = "Hide Legacy Saves"
	hideLegacySaves.TextXAlignment = Enum.TextXAlignment.Left
	hideLegacySaves.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	hideLegacySaves.TextScaled = true
	hideLegacySaves.TextSize = 12
	
	local uITextSizeConstraint_3 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_3.MaxTextSize = 12
	uITextSizeConstraint_3.Parent = hideLegacySaves
	
	hideLegacySaves.Parent = mainLegacySaves

	local showLegacySaves = Instance.new("TextButton")
	showLegacySaves.Name = "ShowLegacySaves"
	showLegacySaves.BackgroundTransparency = 1
	showLegacySaves.AnchorPoint = Vector2.new(1, 1)
	showLegacySaves.Position = UDim2.fromScale(.995, .999)
	showLegacySaves.Size = UDim2.new(0.25, 0, 0, 15)
	showLegacySaves.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	showLegacySaves.Text = "Show Legacy Saves"
	showLegacySaves.TextXAlignment = Enum.TextXAlignment.Right
	showLegacySaves.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	showLegacySaves.TextScaled = true
	showLegacySaves.TextSize = 12
	
	local uITextSizeConstraint_3 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_3.MaxTextSize = 12
	uITextSizeConstraint_3.Parent = showLegacySaves
	
	showLegacySaves.Parent = mainLoadSave

	local importLegacySaves = Instance.new("TextButton")
	importLegacySaves.Name = "ImportLegacySaves"
	importLegacySaves.BackgroundTransparency = 1
	importLegacySaves.AnchorPoint = Vector2.new(.5, 1)
	importLegacySaves.Position = UDim2.fromScale(0.5, 1)
	importLegacySaves.Size = UDim2.new(0.25, 0, 0, 15)
	importLegacySaves.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	importLegacySaves.Text = "Import Legacy Saves"
	importLegacySaves.TextXAlignment = Enum.TextXAlignment.Center
	importLegacySaves.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	importLegacySaves.TextScaled = true
	importLegacySaves.TextSize = 12
	
	local uITextSizeConstraint_3 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_3.MaxTextSize = 12
	uITextSizeConstraint_3.Parent = importLegacySaves
	
	importLegacySaves.Parent = mainLegacySaves

	local legacySavesContainer = Instance.new("ScrollingFrame")
	legacySavesContainer.Name = "SavesContainer"
	legacySavesContainer.AnchorPoint = Vector2.new(0.5, 1)
	legacySavesContainer.BackgroundTransparency = 1
	legacySavesContainer.Position = UDim2.fromScale(0.5, 0.96)
	legacySavesContainer.Size = UDim2.fromOffset(450, 467)
	legacySavesContainer.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	legacySavesContainer.CanvasSize = UDim2.new()
	legacySavesContainer.ScrollBarThickness = 5
	legacySavesContainer.ScrollingDirection = Enum.ScrollingDirection.Y
	legacySavesContainer.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	legacySavesContainer.VerticalScrollBarInset = Enum.ScrollBarInset.Always

	local uIListLayout_3 = Instance.new("UIListLayout")
	uIListLayout_3.Padding = UDim.new(0, 7)
	uIListLayout_3.FillDirection = Enum.FillDirection.Vertical
	uIListLayout_3.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout_3.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout_3.Parent = legacySavesContainer
	
	legacySavesContainer.Parent = mainLegacySaves

	local function updateSavesCanvas()
		savesContainer.CanvasSize = UDim2.fromOffset(0, uIListLayout_2.AbsoluteContentSize.Y)
	end
	savesContainer:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateSavesCanvas)
	uIListLayout_2:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateSavesCanvas)

	local function sortSavesCanvas()
		local children = {}
		for _, child in pairs(savesContainer:GetChildren()) do
			if child:IsA("Frame") then
				table.insert(children, child.Name)
			end
		end
		table.sort(children)

		for i=1, #children do
			savesContainer:FindFirstChild(children[i]).LayoutOrder = i
		end
	end
	savesContainer.ChildAdded:Connect(sortSavesCanvas)
	savesContainer.ChildRemoved:Connect(sortSavesCanvas)

	local function updateLegacySavesCanvas()
		savesContainer.CanvasSize = UDim2.fromOffset(0, uIListLayout_2.AbsoluteContentSize.Y)
	end
	legacySavesContainer:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateLegacySavesCanvas)
	uIListLayout_3:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateLegacySavesCanvas)

	local function sortLegacySavesCanvas()
		local children = {}
		for _, child in pairs(legacySavesContainer:GetChildren()) do
			if child:IsA("Frame") then
				table.insert(children, child.Name)
			end
		end
		table.sort(children)

		for i=1, #children do
			legacySavesContainer:FindFirstChild(children[i]).LayoutOrder = i
		end
	end
	legacySavesContainer.ChildAdded:Connect(sortLegacySavesCanvas)
	legacySavesContainer.ChildRemoved:Connect(sortLegacySavesCanvas)

	local function updateCanvas()
		mainContainer.CanvasSize = UDim2.fromOffset(uIListLayout.AbsoluteContentSize.X, uIListLayout.AbsoluteContentSize.Y)
	end
	
	mainContainer:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateCanvas)
	uIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvas)

	createSave.MouseEnter:Connect(function()
		createSave.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Hover)
		createSave.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	createSave.MouseLeave:Connect(function()
		createSave.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
		createSave.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	importSave.MouseEnter:Connect(function()
		importSave.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Hover)
		importSave.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	importSave.MouseLeave:Connect(function()
		importSave.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
		importSave.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	return mainContainer
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="31">
            <Properties>
              <string name="Name">save</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(saveNameString: string)
	local save = Instance.new("Frame")
	save.Name = saveNameString
	save.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	save.BorderSizePixel = 0
	save.Size = UDim2.new(1, 0, 0, 33)
	
	local uICorner = Instance.new("UICorner")
	uICorner.CornerRadius = UDim.new(0, 7)
	uICorner.Parent = save

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Padding = UDim.new(0, 3)
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = save

	local uIPadding = Instance.new("UIPadding")
	uIPadding.PaddingLeft = UDim.new(0, 7)
	uIPadding.PaddingRight = UDim.new(0, 7)
	uIPadding.Parent = save

	local saveName = Instance.new("TextBox")
	saveName.Name = "SaveName"
	saveName.BackgroundTransparency = 1
	saveName.Size = UDim2.new(0, 236, 0.95, 0)
	saveName.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	saveName.Text = saveNameString
	saveName.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	saveName.TextScaled = true
	saveName.TextSize = 40
	saveName.TextXAlignment = Enum.TextXAlignment.Left
	saveName.Parent = save

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.MaxTextSize = 40
	uITextSizeConstraint.Parent = saveName

	local saveButton = Instance.new("TextButton")
	saveButton.Name = "SaveButton"
	saveButton.LayoutOrder = 2
	saveButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	saveButton.BorderSizePixel = 0
	saveButton.Size = UDim2.new(0, 67, 0.8, 0)
	saveButton.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	saveButton.Text = "Save"
	saveButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	saveButton.AutoButtonColor = false
	saveButton.TextScaled = true
	saveButton.TextWrapped = true
	saveButton.Parent = save

	local uICorner_2 = Instance.new("UICorner")
	uICorner_2.CornerRadius = UDim.new(0, 5)
	uICorner_2.Parent = saveButton

	local uITextSizeConstraint_2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_2.MaxTextSize = 25
	uITextSizeConstraint_2.Parent = saveButton

	local uIPadding_2 = Instance.new("UIPadding")
	uIPadding_2.PaddingLeft = UDim.new(0, 5)
	uIPadding_2.PaddingRight = UDim.new(0, 5)
	uIPadding_2.Parent = saveButton

	local loadButton = Instance.new("TextButton")
	loadButton.Name = "LoadButton"
	loadButton.LayoutOrder = 3
	loadButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	loadButton.BorderSizePixel = 0
	loadButton.Size = UDim2.new(0, 67, 0.8, 0)
	loadButton.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	loadButton.Text = "Load"
	loadButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	loadButton.AutoButtonColor = false
	loadButton.TextScaled = true
	loadButton.TextWrapped = true
	loadButton.Parent = save

	local uICorner_3 = Instance.new("UICorner")
	uICorner_3.CornerRadius = UDim.new(0, 5)
	uICorner_3.Parent = loadButton

	local uITextSizeConstraint_3 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_3.MaxTextSize = 25
	uITextSizeConstraint_3.Parent = loadButton

	local uIPadding_3 = Instance.new("UIPadding")
	uIPadding_3.PaddingLeft = UDim.new(0, 5)
	uIPadding_3.PaddingRight = UDim.new(0, 5)
	uIPadding_3.Parent = loadButton

	local exportButton = Instance.new("TextButton")
	exportButton.Name = "ExportButton"
	exportButton.LayoutOrder = 4
	exportButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	exportButton.BorderSizePixel = 0
	exportButton.Size = UDim2.new(0, 67, 0.8, 0)
	exportButton.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	exportButton.Text = "Export"
	exportButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	exportButton.AutoButtonColor = false
	exportButton.TextScaled = true
	exportButton.TextWrapped = true
	exportButton.Parent = save

	local uICorner_4 = Instance.new("UICorner")
	uICorner_4.CornerRadius = UDim.new(0, 5)
	uICorner_4.Parent = exportButton

	local uITextSizeConstraint_4 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_4.MaxTextSize = 25
	uITextSizeConstraint_4.Parent = exportButton

	local uIPadding_4 = Instance.new("UIPadding")
	uIPadding_4.PaddingLeft = UDim.new(0, 5)
	uIPadding_4.PaddingRight = UDim.new(0, 5)
	uIPadding_4.Parent = exportButton

	local deleteButton = Instance.new("TextButton")
	deleteButton.Name = "DeleteButton"
	deleteButton.LayoutOrder = 5
	deleteButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	deleteButton.BorderSizePixel = 0
	deleteButton.Size = UDim2.new(0, 67, 0.8, 0)
	deleteButton.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	deleteButton.Text = "Delete"
	deleteButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	deleteButton.AutoButtonColor = false
	deleteButton.TextScaled = true
	deleteButton.TextWrapped = true
	deleteButton.Parent = save

	local uICorner_5 = Instance.new("UICorner")
	uICorner_5.CornerRadius = UDim.new(0, 5)
	uICorner_5.Parent = deleteButton

	local uITextSizeConstraint_5 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_5.MaxTextSize = 25
	uITextSizeConstraint_5.Parent = deleteButton

	local uIPadding_5 = Instance.new("UIPadding")
	uIPadding_5.PaddingLeft = UDim.new(0, 5)
	uIPadding_5.PaddingRight = UDim.new(0, 5)
	uIPadding_5.Parent = deleteButton

	saveButton.MouseEnter:Connect(function()
		local baseColor = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		saveButton.BackgroundColor3 = Color3.new(baseColor.R + 0.05, baseColor.G + 0.05, baseColor.B + 0.05)
		saveButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	saveButton.MouseLeave:Connect(function()
		saveButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		saveButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	loadButton.MouseEnter:Connect(function()
		local baseColor = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		loadButton.BackgroundColor3 = Color3.new(baseColor.R + 0.05, baseColor.G + 0.05, baseColor.B + 0.05)
		loadButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	loadButton.MouseLeave:Connect(function()
		loadButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		loadButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	exportButton.MouseEnter:Connect(function()
		local baseColor = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		exportButton.BackgroundColor3 = Color3.new(baseColor.R + 0.05, baseColor.G + 0.05, baseColor.B + 0.05)
		exportButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	exportButton.MouseLeave:Connect(function()
		exportButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		exportButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	deleteButton.MouseEnter:Connect(function()
		local baseColor = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		deleteButton.BackgroundColor3 = Color3.new(baseColor.R + 0.05, baseColor.G + 0.05, baseColor.B + 0.05)
		deleteButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	deleteButton.MouseLeave:Connect(function()
		deleteButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		deleteButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	return save
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="32">
            <Properties>
              <string name="Name">saveLegacy</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(saveNameString: string)
	local save = Instance.new("Frame")
	save.Name = saveNameString
	save.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	save.BorderSizePixel = 0
	save.Size = UDim2.new(1, 0, 0, 33)
	
	local uICorner = Instance.new("UICorner")
	uICorner.CornerRadius = UDim.new(0, 7)
	uICorner.Parent = save

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Padding = UDim.new(0, 3)
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = save

	local uIPadding = Instance.new("UIPadding")
	uIPadding.PaddingLeft = UDim.new(0, 7)
	uIPadding.PaddingRight = UDim.new(0, 7)
	uIPadding.Parent = save

	local saveName = Instance.new("TextLabel")
	saveName.Name = "SaveName"
	saveName.BackgroundTransparency = 1
	saveName.Size = UDim2.new(0, 363, 0.95, 0)
	saveName.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	saveName.Text = saveNameString
	saveName.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	saveName.TextScaled = true
	saveName.TextSize = 40
	saveName.TextXAlignment = Enum.TextXAlignment.Left
	saveName.Parent = save

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.MaxTextSize = 40
	uITextSizeConstraint.Parent = saveName

	local loadButton = Instance.new("TextButton")
	loadButton.Name = "LoadButton"
	loadButton.LayoutOrder = 3
	loadButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	loadButton.BorderSizePixel = 0
	loadButton.Size = UDim2.new(0, 67, 0.8, 0)
	loadButton.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	loadButton.Text = "Load"
	loadButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	loadButton.AutoButtonColor = false
	loadButton.TextScaled = true
	loadButton.TextWrapped = true
	loadButton.Parent = save

	local uICorner_3 = Instance.new("UICorner")
	uICorner_3.CornerRadius = UDim.new(0, 5)
	uICorner_3.Parent = loadButton

	local uITextSizeConstraint_3 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint_3.MaxTextSize = 25
	uITextSizeConstraint_3.Parent = loadButton

	local uIPadding_3 = Instance.new("UIPadding")
	uIPadding_3.PaddingLeft = UDim.new(0, 5)
	uIPadding_3.PaddingRight = UDim.new(0, 5)
	uIPadding_3.Parent = loadButton
	
	loadButton.MouseEnter:Connect(function()
		local baseColor = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		loadButton.BackgroundColor3 = Color3.new(baseColor.R + 0.05, baseColor.G + 0.05, baseColor.B + 0.05)
		loadButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	loadButton.MouseLeave:Connect(function()
		loadButton.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
		loadButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	return save
end</string>
            </Properties>
          </Item>
        </Item>
        <Item class="Folder" referent="33">
          <Properties>
            <string name="Name">popups</string>
          </Properties>
          <Item class="ModuleScript" referent="34">
            <Properties>
              <string name="Name">confirm</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local pluginRoot = script.Parent.Parent.Parent.Parent

return function(promptText: string, callback)
	local confirm = Instance.new("Frame")
	confirm.Name = "Confirm"
	confirm.AnchorPoint = Vector2.new(0.5, 0.5)
	confirm.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainBackground)
	confirm.Position = UDim2.fromScale(0.5, 0.5)
	confirm.Size = UDim2.fromScale(0.25, 0.25)
	confirm.ZIndex = 100001

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0.025, 0)
	uICorner.Parent = confirm

	local prompt = Instance.new("TextLabel")
	prompt.Name = "Prompt"
	prompt.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	prompt.RichText = true
	prompt.Text = promptText
	prompt.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	prompt.TextScaled = true
	prompt.TextSize = 30
	prompt.TextWrapped = true
	prompt.AnchorPoint = Vector2.new(0.5, 0)
	prompt.BackgroundTransparency = 1
	prompt.Position = UDim2.fromScale(0.5, 0)
	prompt.Size = UDim2.fromScale(1, 0.5)
	prompt.ZIndex = 100002

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 30
	uITextSizeConstraint.Parent = prompt

	prompt.Parent = confirm

	local buttons = Instance.new("Frame")
	buttons.Name = "Buttons"
	buttons.AnchorPoint = Vector2.new(0.5, 1)
	buttons.BackgroundTransparency = 1
	buttons.Position = UDim2.fromScale(0.5, 1)
	buttons.Size = UDim2.fromScale(1, 0.5)
	buttons.ZIndex = 100002

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0.1, 0)
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.Parent = buttons

	local confirm1 = Instance.new("TextButton")
	confirm1.Name = "Confirm"
	confirm1.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	confirm1.Text = "Confirm"
	confirm1.AutoButtonColor = false
	confirm1.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	confirm1.TextScaled = true
	confirm1.TextSize = 14
	confirm1.TextWrapped = true
	confirm1.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton)
	confirm1.Size = UDim2.fromScale(0.4, 0.37)
	confirm1.ZIndex = 100002

	local uICorner1 = Instance.new("UICorner")
	uICorner1.Name = "UICorner"
	uICorner1.CornerRadius = UDim.new(0.15, 0)
	uICorner1.Parent = confirm1

	local uITextSizeConstraint1 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint1.Name = "UITextSizeConstraint"
	uITextSizeConstraint1.MaxTextSize = 45
	uITextSizeConstraint1.Parent = confirm1

	confirm1.Parent = buttons

	local cancel = Instance.new("TextButton")
	cancel.Name = "Cancel"
	cancel.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	cancel.Text = "Cancel"
	cancel.AutoButtonColor = false
	cancel.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	cancel.TextScaled = true
	cancel.TextSize = 14
	cancel.TextWrapped = true
	cancel.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	cancel.Size = UDim2.fromScale(0.4, 0.37)
	cancel.ZIndex = 100002

	local uICorner2 = Instance.new("UICorner")
	uICorner2.Name = "UICorner"
	uICorner2.CornerRadius = UDim.new(0.15, 0)
	uICorner2.Parent = cancel

	local uITextSizeConstraint2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint2.Name = "UITextSizeConstraint"
	uITextSizeConstraint2.MaxTextSize = 45
	uITextSizeConstraint2.Parent = cancel

	cancel.Parent = buttons

	buttons.Parent = confirm

	local connections = {}

	connections[#connections+1] = pluginRoot:WaitForChild("Container").Value.InputBegan:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.Return then
			callback(true)
			confirm:Destroy()
			for i,v in pairs(connections) do
				v:Disconnect()
			end
		elseif input.KeyCode == Enum.KeyCode.Escape then
			callback(false)
			confirm:Destroy()
			for i,v in pairs(connections) do
				v:Disconnect()
			end
		end
	end)

	connections[#connections+1] = confirm1.MouseButton1Click:Connect(function()
		for i,v in pairs(connections) do
			v:Disconnect()
		end
		confirm:Destroy()
		callback(true)
	end)

	connections[#connections+1] = confirm1.MouseEnter:Connect(function()
		confirm1.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton, Enum.StudioStyleGuideModifier.Hover)
	end)
	connections[#connections+1] = confirm1.MouseLeave:Connect(function()
		confirm1.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton)
	end)

	connections[#connections+1] = cancel.MouseButton1Click:Connect(function()
		for i,v in pairs(connections) do
			v:Disconnect()
		end
		confirm:Destroy()
		callback(false)
	end)
	connections[#connections+1] = cancel.MouseEnter:Connect(function()
		cancel.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Hover)
		cancel.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
	end)
	connections[#connections+1] = cancel.MouseLeave:Connect(function()
		cancel.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
		cancel.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	return confirm
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="35">
            <Properties>
              <string name="Name">importLocalSave</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local pluginRoot = script.Parent.Parent.Parent.Parent

return function(promptText: string, directoryString: string, callback)
	local confirm = Instance.new("Frame")
	confirm.Name = "Confirm"
	confirm.AnchorPoint = Vector2.new(0.5, 0.5)
	confirm.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainBackground)
	confirm.Position = UDim2.fromScale(0.5, 0.5)
	confirm.Size = UDim2.fromScale(0.25, 0.25)
	confirm.ZIndex = 100001

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0.05, 0)
	uICorner.Parent = confirm

	local prompt = Instance.new("TextLabel")
	prompt.Name = "Prompt"
	prompt.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	prompt.RichText = true
	prompt.Text = promptText
	prompt.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	prompt.TextScaled = true
	prompt.TextSize = 30
	prompt.TextWrapped = true
	prompt.AnchorPoint = Vector2.new(0.5, 0)
	prompt.BackgroundTransparency = 1
	prompt.Position = UDim2.fromScale(0.5, 0)
	prompt.Size = UDim2.fromScale(1, 0.4)
	prompt.ZIndex = 100002

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 30
	uITextSizeConstraint.Parent = prompt

	prompt.Parent = confirm

	local directory = Instance.new("TextBox")
	directory.Name = "Directory"
	directory.FontFace = Font.new("rbxasset://fonts/families/Arial.json")
	directory.Text = directoryString
	directory.ClearTextOnFocus = false
	directory.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	directory.TextScaled = true
	directory.TextSize = 30
	directory.TextWrapped = true
	directory.AnchorPoint = Vector2.new(0.5, 0.5)
	directory.BackgroundTransparency = 1
	directory.Position = UDim2.fromScale(0.5, 0.5)
	directory.Size = UDim2.fromScale(1, 0.25)
	directory.ZIndex = 100002

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 30
	uITextSizeConstraint.Parent = directory

	directory.Parent = confirm

	local buttons = Instance.new("Frame")
	buttons.Name = "Buttons"
	buttons.AnchorPoint = Vector2.new(0.5, 1)
	buttons.BackgroundTransparency = 1
	buttons.Position = UDim2.fromScale(0.5, 1)
	buttons.Size = UDim2.fromScale(1, 0.4)
	buttons.ZIndex = 100002

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0.1, 0)
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.Parent = buttons

	local selectFile = Instance.new("TextButton")
	selectFile.Name = "SelectFile"
	selectFile.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	selectFile.Text = "Select File"
	selectFile.AutoButtonColor = false
	selectFile.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	selectFile.TextScaled = true
	selectFile.TextSize = 14
	selectFile.TextWrapped = true
	selectFile.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton)
	selectFile.Size = UDim2.fromScale(0.4, 0.37)
	selectFile.ZIndex = 100002

	local uICorner1 = Instance.new("UICorner")
	uICorner1.Name = "UICorner"
	uICorner1.CornerRadius = UDim.new(0.15, 0)
	uICorner1.Parent = selectFile

	local uITextSizeConstraint1 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint1.Name = "UITextSizeConstraint"
	uITextSizeConstraint1.MaxTextSize = 45
	uITextSizeConstraint1.Parent = selectFile

	selectFile.Parent = buttons

	local cancel = Instance.new("TextButton")
	cancel.Name = "Cancel"
	cancel.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	cancel.Text = "Cancel"
	cancel.AutoButtonColor = false
	cancel.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	cancel.TextScaled = true
	cancel.TextSize = 14
	cancel.TextWrapped = true
	cancel.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	cancel.Size = UDim2.fromScale(0.4, 0.37)
	cancel.ZIndex = 100002

	local uICorner2 = Instance.new("UICorner")
	uICorner2.Name = "UICorner"
	uICorner2.CornerRadius = UDim.new(0.15, 0)
	uICorner2.Parent = cancel

	local uITextSizeConstraint2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint2.Name = "UITextSizeConstraint"
	uITextSizeConstraint2.MaxTextSize = 45
	uITextSizeConstraint2.Parent = cancel

	cancel.Parent = buttons

	buttons.Parent = confirm

	local connections = {}

	connections[#connections+1] = pluginRoot:WaitForChild("Container").Value.InputBegan:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.Return then
			callback(true)
			confirm:Destroy()
			for i,v in pairs(connections) do
				v:Disconnect()
			end
		elseif input.KeyCode == Enum.KeyCode.Escape then
			callback(false)
			confirm:Destroy()
			for i,v in pairs(connections) do
				v:Disconnect()
			end
		end
	end)

	connections[#connections+1] = selectFile.MouseButton1Click:Connect(function()
		for i,v in pairs(connections) do
			v:Disconnect()
		end
		callback(true)
		confirm:Destroy()
	end)

	connections[#connections+1] = selectFile.MouseEnter:Connect(function()
		selectFile.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton, Enum.StudioStyleGuideModifier.Hover)
	end)
	connections[#connections+1] = selectFile.MouseLeave:Connect(function()
		selectFile.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton)
	end)

	connections[#connections+1] = cancel.MouseButton1Click:Connect(function()
		for i,v in pairs(connections) do
			v:Disconnect()
		end
		callback(false)
		confirm:Destroy()
	end)
	connections[#connections+1] = cancel.MouseEnter:Connect(function()
		cancel.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Hover)
	end)
	connections[#connections+1] = cancel.MouseLeave:Connect(function()
		cancel.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	end)

	connections[#connections+1] = directory:GetPropertyChangedSignal("Text"):Connect(function()
		directory.Text = directoryString
	end)

	return confirm
end</string>
            </Properties>
          </Item>
        </Item>
        <Item class="Folder" referent="36">
          <Properties>
            <string name="Name">reusedContent</string>
          </Properties>
          <Item class="ModuleScript" referent="37">
            <Properties>
              <string name="Name">checkbox</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function()
	local checkbox = Instance.new("Frame")
	checkbox.Name = "Checkbox"
	checkbox.AnchorPoint = Vector2.new(0.5, 0.5)
	checkbox.BackgroundTransparency = 1
	checkbox.Position = UDim2.fromScale(0.5, 0.5)
	checkbox.Size = UDim2.fromScale(1, 1)

	local border = Instance.new("ImageLabel")
	border.Name = "Border"
	border.Image = "rbxassetid://3008645364"
	border.ImageColor3 = Color3.fromRGB(37, 37, 37)
	border.ImageRectSize = Vector2.new(10, 10)
	border.ScaleType = Enum.ScaleType.Slice
	border.SliceCenter = Rect.new(4, 4, 5, 5)
	border.BackgroundTransparency = 1
	border.Size = UDim2.fromScale(1, 1)

	local border1 = Instance.new("ImageLabel")
	border1.Name = "Border"
	border1.Image = "rbxassetid://3008790403"
	border1.ImageColor3 = Color3.fromRGB(26, 26, 26)
	border1.ImageRectSize = Vector2.new(10, 10)
	border1.ScaleType = Enum.ScaleType.Slice
	border1.SliceCenter = Rect.new(4, 4, 5, 5)
	border1.BackgroundTransparency = 1
	border1.Size = UDim2.fromScale(1, 1)
	border1.Parent = border

	border.Parent = checkbox

	local checkmark = Instance.new("ImageLabel")
	checkmark.Name = "Checkmark"
	checkmark.Image = "rbxassetid://2773796198"
	checkmark.ImageColor3 = Color3.fromRGB(0, 162, 255)
	checkmark.BackgroundTransparency = 1
	checkmark.Position = UDim2.fromOffset(3, 3)
	checkmark.Visible = false
	checkmark.Size = UDim2.new(1, -6, 1, -6)
	checkmark.Parent = checkbox

	local button = Instance.new("TextButton")
	button.Name = "Button"
	button.Text = ""
	button.BackgroundTransparency = 1
	button.Size = UDim2.fromScale(1, 1)
	button.Parent = checkbox

	return checkbox
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="38">
            <Properties>
              <string name="Name">columnFrame</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(columnName: string, columnNumber: number)
	local w = Instance.new("Frame")
	w.Name = columnName
	w.BackgroundTransparency = 1
	w.LayoutOrder = columnNumber
	w.Size = UDim2.new(0, 75, 1, 0)

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = w

	return w
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="39">
            <Properties>
              <string name="Name">controls</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function()
	local controls = Instance.new("Frame")
	controls.Name = "Controls"
	controls.AnchorPoint = Vector2.new(0.5, 0)
	controls.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	controls.BorderSizePixel = 0
	controls.Position = UDim2.fromScale(0.5, 0)
	controls.Size = UDim2.fromScale(1, 0.0583)
	controls.ZIndex = 2

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0.00521, 0)
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.Parent = controls

	return controls
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="40">
            <Properties>
              <string name="Name">iconButton</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(Name: string, Position: number, Icon: string, IconActive: string)
	local frame = Instance.new("Frame")
	frame.Name = Name
	frame.LayoutOrder = Position
	frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	frame.BorderSizePixel = 0
	frame.Size = UDim2.fromScale(0.023, 0.75)
	frame.ZIndex = 3

	local uIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
	uIAspectRatioConstraint.Name = "UIAspectRatioConstraint"
	uIAspectRatioConstraint.AspectRatio = 1
	uIAspectRatioConstraint.AspectType = Enum.AspectType.FitWithinMaxSize
	uIAspectRatioConstraint.DominantAxis = Enum.DominantAxis.Height
	uIAspectRatioConstraint.Parent = frame

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0.15, 0)
	uICorner.Parent = frame

	local image = Instance.new("ImageButton")
	image.Name = "Image"
	image.Image = Icon
	image.ScaleType = Enum.ScaleType.Fit
	image.AnchorPoint = Vector2.new(0.5, 0.5)
	image.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	image.BackgroundTransparency = 1
	image.Position = UDim2.fromScale(0.5, 0.5)
	image.Size = UDim2.fromScale(0.75, 0.75)
	image.Parent = frame
	image.ZIndex = 4

	frame.MouseEnter:Connect(function()
		if frame:GetAttribute("Active") ~= true then
			frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Hover)
			image.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
		elseif frame:GetAttribute("Active") == true and IconActive == nil then
			frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton, Enum.StudioStyleGuideModifier.Hover)
			image.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
		end
	end)

	frame.MouseLeave:Connect(function()
		if frame:GetAttribute("Active") ~= true then
			frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
			image.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
		elseif frame:GetAttribute("Active") == true and IconActive == nil then
			frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Selected)
			image.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Selected)
		end
	end)

	frame:GetAttributeChangedSignal("Active"):Connect(function()
		frame.BackgroundColor3 = if frame:GetAttribute("Active") == true then settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Selected) else settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
		image.ImageColor3 = if frame:GetAttribute("Active") == true then settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Selected) else settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	end)

	frame:GetAttributeChangedSignal("Icon"):Connect(function()
		image.Image = if frame:GetAttribute("Icon") == true then IconActive else Icon
	end)

	return frame
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="41">
            <Properties>
              <string name="Name">rowWithTextBox</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(placeholderText: string, name: string, layoutOrder: number?)
	local w = Instance.new("Frame")
	w.Name = name
	w.AnchorPoint = Vector2.new(0.5, 0.5)
	w.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	w.BorderSizePixel = 0
	w.LayoutOrder = layoutOrder
	w.Size = UDim2.new(1, 0, 0, 30) -- 30

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 5) -- 5
	uICorner.Parent = w

	local textBox = Instance.new("TextBox")
	textBox.Name = "TextBox"
	textBox.AnchorPoint = Vector2.new(0.5, 0.5)
	textBox.BackgroundTransparency = 1
	textBox.Position = UDim2.fromScale(0.5, 0.5)
	textBox.Size = UDim2.fromScale(1, 1)
	textBox.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	textBox.TextScaled = true
	textBox.PlaceholderText = placeholderText
	textBox.Text = ""
	textBox.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textBox.TextSize = 25
	textBox.Parent = w

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 25
	uITextSizeConstraint.Parent = textBox

	return w
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="42">
            <Properties>
              <string name="Name">rowWithTextButton</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(text: string, name: string, layoutOrder: number?)
	local w = Instance.new("Frame")
	w.Name = name
	w.AnchorPoint = Vector2.new(0.5, 0.5)
	w.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	w.BorderSizePixel = 0
	w.LayoutOrder = layoutOrder
	w.Size = UDim2.new(1, 0, 0, 30) -- 30

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 5) -- 5
	uICorner.Parent = w

	local textButton = Instance.new("TextButton")
	textButton.Name = "TextButton"
	textButton.AnchorPoint = Vector2.new(0.5, 0.5)
	textButton.BackgroundTransparency = 1
	textButton.Position = UDim2.fromScale(0.5, 0.5)
	textButton.Size = UDim2.fromScale(1, 1)
	textButton.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	textButton.TextScaled = true
	textButton.Text = text
	textButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textButton.TextSize = 25
	textButton.Parent = w

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 25
	uITextSizeConstraint.Parent = textButton

	return w
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="43">
            <Properties>
              <string name="Name">rowWithTextLabel</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(text: string, name: string, layoutOrder: number?)
	local w = Instance.new("Frame")
	w.Name = name
	w.AnchorPoint = Vector2.new(0.5, 0.5)
	w.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	w.BorderSizePixel = 0
	w.LayoutOrder = layoutOrder
	w.Size = UDim2.new(1, 0, 0, 30) -- 30

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 5) -- 5
	uICorner.Parent = w

	local textLabel = Instance.new("TextLabel")
	textLabel.Name = "TextLabel"
	textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
	textLabel.BackgroundTransparency = 1
	textLabel.Position = UDim2.fromScale(0.5, 0.5)
	textLabel.Size = UDim2.fromScale(1, 1)
	textLabel.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	textLabel.TextScaled = true
	textLabel.Text = text
	textLabel.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textLabel.TextSize = 25
	textLabel.Parent = w

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 25
	uITextSizeConstraint.Parent = textLabel

	return w
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="44">
            <Properties>
              <string name="Name">textButton</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(Name: string, Position: number, Text: string, Color: Color3)
	local frame = Instance.new("Frame")
	frame.Name = Name
	frame.LayoutOrder = Position
	frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
	frame.BorderSizePixel = 0
	frame.Size = UDim2.fromScale(0.0652, 0.75)
	frame.ZIndex = 3

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0.15, 0)
	uICorner.Parent = frame

	local text = Instance.new("TextButton")
	text.Name = "Text"
	text.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	text.Text = Text
	text.TextColor3 = Color
	text.TextScaled = true
	text.TextSize = 14
	text.TextWrapped = true
	text.AnchorPoint = Vector2.new(0.5, 0.5)
	text.BackgroundTransparency = 1
	text.Position = UDim2.fromScale(0.5, 0.525)
	text.Size = UDim2.fromScale(1, 1)
	text.ZIndex = 4

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 30
	uITextSizeConstraint.Parent = text

	text.Parent = frame

	frame.MouseEnter:Connect(function()
		if frame:GetAttribute("Active") ~= true then
			frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Hover)
			text.TextColor3 = Color3.new(Color.R + 0.1, Color.G + 0.1, Color.B + 0.1)
		else
			frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton, Enum.StudioStyleGuideModifier.Hover)
			text.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
		end
	end)

	frame.MouseLeave:Connect(function()
		if frame:GetAttribute("Active") ~= true then
			frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
			text.TextColor3 = Color
		else
			frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Selected)
			text.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Selected)
		end
	end)

	return frame
end</string>
            </Properties>
          </Item>
        </Item>
        <Item class="Folder" referent="45">
          <Properties>
            <string name="Name">rotators</string>
          </Properties>
          <Item class="ModuleScript" referent="46">
            <Properties>
              <string name="Name">angleRows</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local rowWithTextBox = require(script.Parent.Parent.reusedContent.rowWithTextBox)
local rowWithTextButton = require(script.Parent.Parent.reusedContent.rowWithTextButton)

return function(angleNumber: number)
	local angle1 = Instance.new("Frame")
	angle1.Name = `Angle{angleNumber}`
	angle1.AnchorPoint = Vector2.new(0.5, 0.5)
	angle1.BackgroundTransparency = 1
	angle1.BorderSizePixel = 0
	angle1.LayoutOrder = angleNumber
	angle1.Size = UDim2.new(1, 0, 0, 100)

	-- local angle = Instance.new("Frame")
	-- angle.Name = "Angle"
	-- angle.AnchorPoint = Vector2.new(0.5, 0.5)
	-- angle.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	-- angle.BorderSizePixel = 0
	-- angle.LayoutOrder = 1
	-- angle.Position = UDim2.fromScale(0.5, 0.5)
	-- angle.Size = UDim2.new(1, 0, 0, 30)

	-- local uICorner = Instance.new("UICorner")
	-- uICorner.Name = "UICorner"
	-- uICorner.CornerRadius = UDim.new(0, 5)
	-- uICorner.Parent = angle

	-- local textBox = Instance.new("TextBox")
	-- textBox.Name = "TextBox"
	-- textBox.FontFace = Font.new(
	-- 	"rbxasset://fonts/families/Arial.json",
	-- 	Enum.FontWeight.Bold,
	-- 	Enum.FontStyle.Normal
	-- )
	-- textBox.PlaceholderColor3 = Color3.fromRGB(178, 178, 178)
	-- textBox.PlaceholderText = "Angle"
	-- textBox.Text = ""
	-- textBox.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	-- textBox.TextScaled = true
	-- textBox.TextSize = 14
	-- textBox.TextWrapped = true
	-- textBox.AnchorPoint = Vector2.new(0.5, 0.5)
	-- textBox.BackgroundTransparency = 1
	-- textBox.Position = UDim2.fromScale(0.5, 0.5)
	-- textBox.Size = UDim2.fromScale(1, 1)
	-- textBox.ClearTextOnFocus = false

	-- local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	-- uITextSizeConstraint.Name = "UITextSizeConstraint"
	-- uITextSizeConstraint.MaxTextSize = 25
	-- uITextSizeConstraint.Parent = textBox

	-- textBox.Parent = angle
	local angle = rowWithTextBox("Angle", "Angle", 1)
	angle.AnchorPoint = Vector2.new(0.5, 0.5)
	angle.Position = UDim2.fromScale(0.5, 0.5)
	angle.TextBox.ClearTextOnFocus = false
	angle.Parent = angle1

	local imageLabel = Instance.new("ImageLabel")
	imageLabel.Name = "ImageLabel"
	imageLabel.Image = "rbxassetid://12878056105"
	imageLabel.ScaleType = Enum.ScaleType.Slice
	imageLabel.SliceCenter = Rect.new(4, 4, 33, 31)
	imageLabel.AnchorPoint = Vector2.new(1, 0)
	imageLabel.BackgroundTransparency = 1
	imageLabel.Position = UDim2.fromScale(-0.05, 0)
	imageLabel.Size = UDim2.fromScale(0.2, 1)
	imageLabel.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	imageLabel.Parent = angle1

	-- local color = Instance.new("Frame")
	-- color.Name = "Color"
	-- color.AnchorPoint = Vector2.new(0.5, 0)
	-- color.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	-- color.BorderSizePixel = 0
	-- color.LayoutOrder = 1
	-- color.Position = UDim2.fromScale(0.5, 0)
	-- color.Size = UDim2.new(1, 0, 0, 30)

	-- local uICorner1 = Instance.new("UICorner")
	-- uICorner1.Name = "UICorner"
	-- uICorner1.CornerRadius = UDim.new(0, 5)
	-- uICorner1.Parent = color

	-- local textBox1 = Instance.new("TextButton")
	-- textBox1.Name = "TextButton"
	-- textBox1.FontFace = Font.new(
	-- 	"rbxasset://fonts/families/Arial.json",
	-- 	Enum.FontWeight.Bold,
	-- 	Enum.FontStyle.Normal
	-- )
	-- textBox1.Text = "Color"
	-- textBox1.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	-- textBox1.TextScaled = true
	-- textBox1.TextSize = 14
	-- textBox1.TextWrapped = true
	-- textBox1.Active = true
	-- textBox1.AnchorPoint = Vector2.new(0.5, 0.5)
	-- textBox1.BackgroundTransparency = 1
	-- textBox1.Position = UDim2.fromScale(0.5, 0.5)
	-- textBox1.Selectable = true
	-- textBox1.Size = UDim2.fromScale(1, 1)

	-- local uITextSizeConstraint1 = Instance.new("UITextSizeConstraint")
	-- uITextSizeConstraint1.Name = "UITextSizeConstraint"
	-- uITextSizeConstraint1.MaxTextSize = 25
	-- uITextSizeConstraint1.Parent = textBox1

	-- textBox1.Parent = color
	local color = rowWithTextButton("Color", "Color", 1)
	color.AnchorPoint = Vector2.new(0.5, 0)
	color.Position = UDim2.fromScale(0.5, 0)
	color.Parent = angle1

	-- local velocity = Instance.new("Frame")
	-- velocity.Name = "Velocity"
	-- velocity.AnchorPoint = Vector2.new(0.5, 1)
	-- velocity.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	-- velocity.BorderSizePixel = 0
	-- velocity.LayoutOrder = 1
	-- velocity.Position = UDim2.fromScale(0.5, 1)
	-- velocity.Size = UDim2.new(1, 0, 0, 30)

	-- local uICorner2 = Instance.new("UICorner")
	-- uICorner2.Name = "UICorner"
	-- uICorner2.CornerRadius = UDim.new(0, 5)
	-- uICorner2.Parent = velocity

	-- local textBox2 = Instance.new("TextBox")
	-- textBox2.Name = "TextBox"
	-- textBox2.FontFace = Font.new(
	-- 	"rbxasset://fonts/families/Arial.json",
	-- 	Enum.FontWeight.Bold,
	-- 	Enum.FontStyle.Normal
	-- )
	-- textBox2.PlaceholderColor3 = Color3.fromRGB(178, 178, 178)
	-- textBox2.PlaceholderText = "Velocity"
	-- textBox2.Text = ""
	-- textBox2.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	-- textBox2.TextScaled = true
	-- textBox2.TextSize = 14
	-- textBox2.TextWrapped = true
	-- textBox2.AnchorPoint = Vector2.new(0.5, 0.5)
	-- textBox2.BackgroundTransparency = 1
	-- textBox2.Position = UDim2.fromScale(0.5, 0.5)
	-- textBox2.Size = UDim2.fromScale(1, 1)
	-- textBox2.ClearTextOnFocus = false

	-- local uITextSizeConstraint2 = Instance.new("UITextSizeConstraint")
	-- uITextSizeConstraint2.Name = "UITextSizeConstraint"
	-- uITextSizeConstraint2.MaxTextSize = 25
	-- uITextSizeConstraint2.Parent = textBox2

	-- textBox2.Parent = velocity
	local velocity = rowWithTextBox("Velocity", "Velocity", 1)
	velocity.AnchorPoint = Vector2.new(0.5, 1)
	velocity.Position = UDim2.fromScale(0.5, 1)
	velocity.TextBox.ClearTextOnFocus = false
	velocity.Parent = angle1

	return angle1
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="47">
            <Properties>
              <string name="Name">buttons</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(buttons: Frame)
	local controls = Instance.new("Frame")
	controls.Name = "Controls"
	controls.AnchorPoint = Vector2.new(0.5, 0.5)
	controls.BackgroundTransparency = 1
	controls.BorderSizePixel = 0
	controls.LayoutOrder = 1e+04
	controls.Size = UDim2.new(1, 0, 0, 100)

	local uIListLayout1 = Instance.new("UIListLayout")
	uIListLayout1.Name = "UIListLayout"
	uIListLayout1.Padding = UDim.new(0, 5)
	uIListLayout1.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout1.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout1.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout1.Parent = controls

	local removeHolder = Instance.new("Frame")
	removeHolder.Name = "RemoveHolder"
	removeHolder.BackgroundTransparency = 1
	removeHolder.Size = UDim2.new(1, 0, 0, 30)

	local remove = Instance.new("ImageButton")
	remove.Name = "RemoveButton"
	remove.Image = "rbxassetid://12788801841"
	remove.ScaleType = Enum.ScaleType.Fit
	remove.AnchorPoint = Vector2.new(0.5, 0.5)
	remove.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	remove.ImageTransparency = 0.2
	remove.BackgroundTransparency = 1
	remove.LayoutOrder = 1
	remove.Position = UDim2.fromScale(0.5, 0.5)
	remove.Size = UDim2.fromOffset(23, 23)
	remove.Parent = removeHolder

	removeHolder.Parent = controls

	local addHolder = Instance.new("Frame")
	addHolder.Name = "AddHolder"
	addHolder.BackgroundTransparency = 1
	addHolder.Size = UDim2.new(1, 0, 0, 30)

	local add = Instance.new("ImageButton")
	add.Name = "Add"
	add.Image = "rbxassetid://12788800986"
	add.ScaleType = Enum.ScaleType.Fit
	add.AnchorPoint = Vector2.new(0.5, 0.5)
	add.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	add.BackgroundTransparency = 1
	add.BorderSizePixel = 0
	add.LayoutOrder = 3
	add.Position = UDim2.fromScale(0.5, 0.5)
	add.Size = UDim2.fromOffset(23, 23)
	add.Parent = addHolder

	addHolder.Parent = controls

	controls.Parent = buttons

	local topControls = Instance.new("Frame")
	topControls.Name = "TopControls"
	topControls.AnchorPoint = Vector2.new(0.5, 0.5)
	topControls.BackgroundTransparency = 1
	topControls.BorderSizePixel = 0
	topControls.LayoutOrder = -1
	topControls.Size = UDim2.new(1, 0, 0, 30)

	local uIListLayout2 = Instance.new("UIListLayout")
	uIListLayout2.Name = "UIListLayout"
	uIListLayout2.Padding = UDim.new(0, 10)
	uIListLayout2.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout2.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout2.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout2.Parent = topControls

	local removeHolder1 = Instance.new("Frame")
	removeHolder1.Name = "RemoveHolder"
	removeHolder1.BackgroundTransparency = 1
	removeHolder1.Size = UDim2.fromOffset(23, 30)

	local remove1 = Instance.new("ImageButton")
	remove1.Name = "RemoveButton"
	remove1.Image = "rbxassetid://12788801841"
	remove1.ScaleType = Enum.ScaleType.Fit
	remove1.AnchorPoint = Vector2.new(0.5, 0.5)
	remove1.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	remove1.ImageTransparency = 0.2
	remove1.BackgroundTransparency = 1
	remove1.LayoutOrder = 1
	remove1.Position = UDim2.fromScale(0.5, 0.5)
	remove1.Size = UDim2.fromOffset(23, 23)
	remove1.Parent = removeHolder1

	removeHolder1.Parent = topControls

	local addHolder1 = Instance.new("Frame")
	addHolder1.Name = "AddHolder"
	addHolder1.BackgroundTransparency = 1
	addHolder1.Size = UDim2.fromOffset(23, 30)

	local add1 = Instance.new("ImageButton")
	add1.Name = "Add"
	add1.Image = "rbxassetid://12788800986"
	add1.ScaleType = Enum.ScaleType.Fit
	add1.AnchorPoint = Vector2.new(0.5, 0.5)
	add1.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	add1.BackgroundTransparency = 1
	add1.BorderSizePixel = 0
	add1.LayoutOrder = 3
	add1.Position = UDim2.fromScale(0.5, 0.5)
	add1.Size = UDim2.fromOffset(23, 23)
	add1.Parent = addHolder1

	addHolder1.Parent = topControls

	topControls.Parent = buttons

	local topFill = Instance.new("Frame")
	topFill.Name = "TopFill"
	topFill.AnchorPoint = Vector2.new(0.5, 1)
	topFill.BackgroundTransparency = 1
	topFill.BorderSizePixel = 0
	topFill.Position = UDim2.fromScale(0.5, 0.251)
	topFill.Size = UDim2.new(1, 0, 0, 130)
	topFill.Parent = buttons
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="48">
            <Properties>
              <string name="Name">container</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local section = require(script.Parent.section)

return function(colors: { number:Color3 }, colorLabels: { number:string })
	local mainContainer = Instance.new("ScrollingFrame")
	mainContainer.Name = "MainContainer"
	mainContainer.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	mainContainer.CanvasSize = UDim2.new()
	mainContainer.ScrollBarThickness = 5
	mainContainer.ScrollingDirection = Enum.ScrollingDirection.XY
	mainContainer.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	mainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
	mainContainer.BackgroundTransparency = 1
	mainContainer.BorderSizePixel = 0
	mainContainer.Position = UDim2.fromScale(0.5, 0.529)
	mainContainer.Selectable = false
	mainContainer.Size = UDim2.fromScale(1, 0.942)

	local viewportFrame = Instance.new("ViewportFrame")
	viewportFrame.Name = "ViewportFrame"
	viewportFrame.Ambient = Color3.fromRGB(138, 138, 138)
	viewportFrame.AnchorPoint = Vector2.new(0.5, 0)
	viewportFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	viewportFrame.BackgroundTransparency = 1
	viewportFrame.Position = UDim2.fromScale(0.5, 0)
	viewportFrame.Size = UDim2.fromScale(1, 0.3)

	local camera = Instance.new("Camera")
	camera.Name = "Camera"
	camera.CFrame = CFrame.new(0, 0, -1, -1, 0, 1.50995803e-07, 0, 1, 0, -1.50995803e-07, 0, -1)
	camera.Focus = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
	camera.Parent = viewportFrame

	local worldModel = Instance.new("WorldModel")
	worldModel.Name = "WorldModel"

	local part = Instance.new("Part")
	part.Name = "Part"
	part.BottomSurface = Enum.SurfaceType.Smooth
	part.BrickColor = BrickColor.new("Institutional white")
	part.CanCollide = false
	part.Color = Color3.fromRGB(248, 248, 248)
	part.Material = Enum.Material.Neon
	part.Size = Vector3.new(0.75, 0.3, 0.1)
	part.TopSurface = Enum.SurfaceType.Smooth
	part.Parent = worldModel

	local motor = Instance.new("Part")
	motor.Name = "Motor"
	motor.Anchored = true
	motor.Transparency = 1
	motor.Size = Vector3.new(0.1, 0.1, 0.1)

	local motor6D = Instance.new("Motor6D")
	motor6D.Name = "Motor6D"
	motor6D.MaxVelocity = 0.05
	motor6D.Part0 = motor
	motor6D.Part1 = part
	motor6D.C0 = CFrame.new(0, 0, 0, 1, 0, 0, 0, -4.37113883e-08, -1, 0, 1, -4.37113883e-08)
	motor6D.C1 = CFrame.new(0, 0, 0, 1, 0, 0, 0, -4.37113883e-08, -1, 0, 1, -4.37113883e-08)
	motor6D.Parent = motor
	motor6D:SetAttribute("DesiredAngle", 0)

	motor.Parent = worldModel

	worldModel.Parent = viewportFrame

	viewportFrame.CurrentCamera = camera
	viewportFrame.Parent = mainContainer

	local controlsHolder = Instance.new("Frame")
	controlsHolder.Name = "ControlsHolder"
	controlsHolder.AnchorPoint = Vector2.new(0.5, 1)
	controlsHolder.BackgroundTransparency = 1
	controlsHolder.Position = UDim2.fromScale(0.5, 1)
	controlsHolder.Size = UDim2.fromScale(1, 0.7)
	controlsHolder.Parent = mainContainer

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.Parent = controlsHolder

	local uIPadding = Instance.new("UIPadding")
	uIPadding.Name = "UIPadding"
	uIPadding.PaddingBottom = UDim.new(0.0361, 0)
	uIPadding.PaddingLeft = UDim.new(0.0182, 0)
	uIPadding.PaddingRight = UDim.new(0.018, 0)
	uIPadding.PaddingTop = UDim.new(0.036, 0)
	uIPadding.Parent = controlsHolder

	local function changeSize()
		mainContainer.CanvasSize = UDim2.fromOffset(uIListLayout.AbsoluteContentSize.X, uIListLayout.AbsoluteContentSize.Y)
	end
	
	mainContainer:GetPropertyChangedSignal("AbsoluteSize"):Connect(changeSize)
	uIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(changeSize)

	section(1, colors, colorLabels).Parent = controlsHolder

	return mainContainer
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="49">
            <Properties>
              <string name="Name">dropdown</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(colors: { number:Color3 }, colorLabels: { number:string })
	local color = Instance.new("ScrollingFrame")
	color.Name = "Color"
	color.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	color.CanvasSize = UDim2.new()
	color.ScrollBarThickness = 5
	color.ScrollingDirection = Enum.ScrollingDirection.Y
	color.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	color.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
	color.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Left
	color.AnchorPoint = Vector2.new(0.5, 0)
	color.BackgroundColor3 = Color3.fromRGB(64, 64, 64)
	color.BorderSizePixel = 0
	color.LayoutOrder = 1
	color.Position = UDim2.new(0.5, 0, 0, 170)
	color.Size = UDim2.new(1, 0, 0, 100)
	color.ZIndex = 2
	color.Visible = false

	local uICorner = Instance.new("UICorner")
	uICorner.Name = "UICorner"
	uICorner.CornerRadius = UDim.new(0, 5)
	uICorner.Parent = color

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = color

	local function canvasSize()
		color.CanvasSize = UDim2.fromOffset(0, uIListLayout.AbsoluteContentSize.Y)
	end
	uIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(canvasSize)

	for i: number,v: Color3 in pairs(colors) do
		local textButton = Instance.new("TextButton")
		textButton.Name = colorLabels[i]
		textButton.FontFace = Font.new(
			"rbxasset://fonts/families/Arial.json",
			Enum.FontWeight.Bold,
			Enum.FontStyle.Normal
		)
		textButton.Text = colorLabels[i]
		textButton.TextColor3 = v
		textButton.TextScaled = true
		textButton.TextSize = 14
		textButton.TextWrapped = true
		textButton.Active = true
		textButton.AnchorPoint = Vector2.new(0.5, 0.5)
		textButton.BackgroundTransparency = 1
		textButton.Position = UDim2.fromScale(0.5, 0.5)
		textButton.Selectable = true
		textButton.Size = UDim2.new(1, 0, 0, 15)
		textButton.ZIndex = 3
		textButton.LayoutOrder = i

		local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
		uITextSizeConstraint.Name = "UITextSizeConstraint"
		uITextSizeConstraint.MaxTextSize = 25
		uITextSizeConstraint.Parent = textButton

		textButton.Parent = color
	end

	return color
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="50">
            <Properties>
              <string name="Name">optionsChildren</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local angleRows = require(script.Parent.angleRows)
local rowWithTextBox = require(script.Parent.Parent.reusedContent.rowWithTextBox)
local checkboxFrame = require(script.Parent.Parent.reusedContent.checkbox)

return function(options: Frame)
	local topOptions = Instance.new("Frame")
	topOptions.Name = "TopOptions"
	topOptions.AnchorPoint = Vector2.new(0.5, 0.5)
	topOptions.BackgroundTransparency = 1
	topOptions.BorderSizePixel = 0
	topOptions.LayoutOrder = -1
	topOptions.Size = UDim2.new(1, 0, 0, 100)

	-- local name = Instance.new("Frame")
	-- name.Name = "NameBox"
	-- name.AnchorPoint = Vector2.new(0.5, 0)
	-- name.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	-- name.BorderSizePixel = 0
	-- name.LayoutOrder = 1
	-- name.Position = UDim2.fromScale(0.5, 0)
	-- name.Size = UDim2.new(1, 0, 0, 30)

	-- local uICorner = Instance.new("UICorner")
	-- uICorner.Name = "UICorner"
	-- uICorner.CornerRadius = UDim.new(0, 5)
	-- uICorner.Parent = name

	-- local textBox = Instance.new("TextBox")
	-- textBox.Name = "TextBox"
	-- textBox.FontFace = Font.new(
	-- 	"rbxasset://fonts/families/Arial.json",
	-- 	Enum.FontWeight.Bold,
	-- 	Enum.FontStyle.Normal
	-- )
	-- textBox.PlaceholderColor3 = Color3.fromRGB(178, 178, 178)
	-- textBox.PlaceholderText = "Name"
	-- textBox.Text = ""
	-- textBox.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	-- textBox.TextScaled = true
	-- textBox.TextSize = 14
	-- textBox.TextWrapped = true
	-- textBox.AnchorPoint = Vector2.new(0.5, 0.5)
	-- textBox.BackgroundTransparency = 1
	-- textBox.Position = UDim2.fromScale(0.5, 0.5)
	-- textBox.Size = UDim2.fromScale(1, 1)

	-- local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	-- uITextSizeConstraint.Name = "UITextSizeConstraint"
	-- uITextSizeConstraint.MaxTextSize = 25
	-- uITextSizeConstraint.Parent = textBox

	-- textBox.Parent = name
	local name = rowWithTextBox("Name", "NameBox", 1)
	name.AnchorPoint = Vector2.new(0.5, 0)
	name.Position = UDim2.fromScale(0.5, 0)
	name.Parent = topOptions

	local enabled = Instance.new("Frame")
	enabled.Name = "Enabled"
	enabled.AnchorPoint = Vector2.new(0.5, 1)
	enabled.BackgroundTransparency = 1
	enabled.LayoutOrder = 1
	enabled.Position = UDim2.fromScale(0.5, 1)
	enabled.Size = UDim2.fromOffset(30, 30)

	local checkbox = checkboxFrame()
	checkbox.Parent = enabled

	enabled.Parent = topOptions

	local textBox1 = Instance.new("TextLabel")
	textBox1.Name = "TextBox"
	textBox1.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	textBox1.Text = "Preview Enabled"
	textBox1.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textBox1.TextScaled = true
	textBox1.TextSize = 14
	textBox1.TextWrapped = true
	textBox1.Active = true
	textBox1.AnchorPoint = Vector2.new(0.5, 0.5)
	textBox1.BackgroundTransparency = 1
	textBox1.Position = UDim2.fromScale(0.5, 0.5)
	textBox1.Selectable = true
	textBox1.Size = UDim2.new(1, 0, 0, 30)

	local uITextSizeConstraint1 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint1.Name = "UITextSizeConstraint"
	uITextSizeConstraint1.MaxTextSize = 25
	uITextSizeConstraint1.Parent = textBox1

	textBox1.Parent = topOptions

	topOptions.Parent = options

	local label = Instance.new("Frame")
	label.Name = "Label"
	label.AnchorPoint = Vector2.new(0.5, 1)
	label.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	label.BackgroundTransparency = 1
	label.BorderSizePixel = 0
	label.Position = UDim2.fromScale(0.5, 1)
	label.Size = UDim2.new(1, 0, 0, 60)

	local textBox2 = Instance.new("TextLabel")
	textBox2.Name = "TextBox"
	textBox2.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	textBox2.Text = "Desired Angles"
	textBox2.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	textBox2.TextScaled = true
	textBox2.TextSize = 14
	textBox2.TextWrapped = true
	textBox2.Active = true
	textBox2.AnchorPoint = Vector2.new(0.5, 0.5)
	textBox2.BackgroundTransparency = 1
	textBox2.Position = UDim2.fromScale(0.5, 0.5)
	textBox2.Selectable = true
	textBox2.Size = UDim2.fromScale(1, 1)

	local uITextSizeConstraint2 = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint2.Name = "UITextSizeConstraint"
	uITextSizeConstraint2.MaxTextSize = 25
	uITextSizeConstraint2.Parent = textBox2

	textBox2.Parent = label

	label.Parent = options

	angleRows(1).Parent = options
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="51">
            <Properties>
              <string name="Name">section</string>
              <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

local columnFrame = require(script.Parent.Parent.reusedContent.columnFrame)
local optionsChildren = require(script.Parent.optionsChildren)
local dropdown = require(script.Parent.dropdown)
local buttons = require(script.Parent.buttons)

return function(sectionNumer: number, colors: { number:Color3 }, colorLabels: { number:string })
	local section = Instance.new("ScrollingFrame")
	section.Name = "Section"..sectionNumer
	section.BackgroundTransparency = 1
	section.BorderSizePixel = 0
	section.LayoutOrder = sectionNumer
	section.Size = UDim2.fromOffset(240, 400) -- 126
	section.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	section.CanvasSize = UDim2.new()
	section.ScrollBarThickness = 5
	section.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	section.Selectable = false

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0, 5)
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.Parent = section

	local dropdownColumn = columnFrame("Dropdown", 0)
	dropdownColumn.UIListLayout:Destroy()
	dropdown(colors, colorLabels).Parent = dropdownColumn

	local optionsColumn = columnFrame("Options", 1)
	optionsChildren(optionsColumn)

	local buttonsColumn = columnFrame("Buttons", 2)
	buttons(buttonsColumn)

	dropdownColumn.Parent = section
	optionsColumn.Parent = section
	buttonsColumn.Parent = section

	local function updateCanvas()
		section.CanvasSize = UDim2.fromOffset(0, optionsColumn.UIListLayout.AbsoluteContentSize.Y)
	end
	optionsColumn.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvas)

	return section
end</string>
            </Properties>
          </Item>
        </Item>
        <Item class="ModuleScript" referent="52">
          <Properties>
            <string name="Name">topBar</string>
            <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function()
	local topBar = Instance.new("Frame")
	topBar.Name = "TopBar"
	topBar.AnchorPoint = Vector2.new(0.5, 0)
	topBar.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	topBar.BorderSizePixel = 0
	topBar.Position = UDim2.fromScale(0.5, 0)
	topBar.Size = UDim2.fromScale(1, 0.046)
	topBar.ZIndex = 3

	local title = Instance.new("TextLabel")
	title.Name = "Title"
	title.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	title.Text = "Emergency Vehicle Creator"
	title.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	title.TextScaled = true
	title.TextSize = 30
	title.AnchorPoint = Vector2.new(0, 0.5)
	title.BackgroundTransparency = 1
	title.Position = UDim2.fromScale(0, 0.5)
	title.Size = UDim2.fromScale(0.209, 1)
	title.ZIndex = 4

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 35
	uITextSizeConstraint.Parent = title

	title.Parent = topBar

	local centerContainer = Instance.new("Frame")
	centerContainer.Name = "CenterContainer"
	centerContainer.AnchorPoint = Vector2.new(0.5, 0.5)
	centerContainer.BackgroundTransparency = 1
	centerContainer.Position = UDim2.fromScale(0.5, 0.5)
	centerContainer.Size = UDim2.fromScale(1, 1)
	centerContainer.ZIndex = 4

	local uIListLayout = Instance.new("UIListLayout")
	uIListLayout.Name = "UIListLayout"
	uIListLayout.Padding = UDim.new(0.00521, 0)
	uIListLayout.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout.Parent = centerContainer

	centerContainer.Parent = topBar

	local rightContainer = Instance.new("Frame")
	rightContainer.Name = "RightContainer"
	rightContainer.AnchorPoint = Vector2.new(0.5, 0.5)
	rightContainer.BackgroundTransparency = 1
	rightContainer.Position = UDim2.fromScale(0.5, 0.5)
	rightContainer.Size = UDim2.fromScale(1, 1)
	rightContainer.ZIndex = 4

	local uIListLayout1 = Instance.new("UIListLayout")
	uIListLayout1.Name = "UIListLayout"
	uIListLayout1.Padding = UDim.new(0.00521, 0)
	uIListLayout1.FillDirection = Enum.FillDirection.Horizontal
	uIListLayout1.HorizontalAlignment = Enum.HorizontalAlignment.Right
	uIListLayout1.SortOrder = Enum.SortOrder.LayoutOrder
	uIListLayout1.VerticalAlignment = Enum.VerticalAlignment.Center
	uIListLayout1.Parent = rightContainer

	rightContainer.Parent = topBar

	return topBar
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="53">
          <Properties>
            <string name="Name">topBarButton</string>
            <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

return function(Name: string, Position: number, Text: string, Size: number, Underline: boolean)
	local active = false

	local TextButton = Instance.new("TextButton")
	TextButton.Name = Name
	TextButton.LayoutOrder = Position
	TextButton.FontFace = Font.new(
		"rbxasset://fonts/families/Arial.json",
		Enum.FontWeight.Bold,
		Enum.FontStyle.Normal
	)
	TextButton.Text = Text
	TextButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
	TextButton.TextScaled = true
	TextButton.TextSize = 14
	TextButton.TextWrapped = true
	TextButton.BackgroundTransparency = 1
	TextButton.Size = UDim2.fromScale(if Size then Size else 0.104, 0.6)
	TextButton.ZIndex = 4

	if Underline then
		local frame = Instance.new("Frame")
		frame.Name = "Underline"
		frame.AnchorPoint = Vector2.new(0.5, 1)
		frame.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton)
		frame.BorderSizePixel = 0
		frame.Position = UDim2.fromScale(0.5, 1.1)
		frame.Size = UDim2.fromScale(1, 0.1)
		frame.Visible = false
		frame.Parent = TextButton
		frame.ZIndex = 4
	end

	local uITextSizeConstraint = Instance.new("UITextSizeConstraint")
	uITextSizeConstraint.Name = "UITextSizeConstraint"
	uITextSizeConstraint.MaxTextSize = 30
	uITextSizeConstraint.Parent = TextButton

	local function setEnabled(value: boolean)
		TextButton.TextColor3 = if value then settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton) else settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
		if Underline then
			TextButton.Underline.Visible = value
		end
		active = value
	end

	TextButton.MouseEnter:Connect(function()
		TextButton.TextColor3 = if active then settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton, Enum.StudioStyleGuideModifier.Hover) else settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Hover)
		if Underline then
			TextButton.Underline.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton, Enum.StudioStyleGuideModifier.Hover)
		end
	end)

	TextButton.MouseLeave:Connect(function()
		TextButton.TextColor3 = if active then settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton) else settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
		if Underline then
			TextButton.Underline.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton)
		end
	end)

	return {TextButton = TextButton, setEnabled = setEnabled}
end</string>
          </Properties>
        </Item>
      </Item>
      <Item class="Folder" referent="54">
        <Properties>
          <string name="Name">ExportTemplates</string>
        </Properties>
        <Item class="ModuleScript" referent="55">
          <Properties>
            <string name="Name">BlankSettings</string>
            <string name="Source">--[[
	Redon Tech 2023-2024
	EVC V2
--]]

--------------------------------------------------------------------------------
-- Settings --
--------------------------------------------------------------------------------

return {
	-- The name of the lightbar in body
	LightbarName = nil,

	-- The location of the lightbar models
	-- For models inside Body add the name of the model
	-- For models inside Misc add the name of the model
	-- For example:
	--[[
		Misc = {
			"Lights",
		}
	--]]
	AdditionalLightbarLocations = nil,

	-- The name of the siren location the lightbar location
	SirenName = nil,

	-- All the selectable sirens and there respected keybinds
	Sirens = nil,

	-- All the keybinds for any other functionality the system has
	-- To setup this up, set the keycode equal to the stage you want it to increment
	-- So for example:
	-- [Enum.KeyCode.LeftBracket] = "Ally",
	Keybinds = nil,

	-- Secondary keybinds
	-- These keybinds are mapped to other keybinds
	-- This can be used for Xbox controller support
	-- So for example:
	-- [Enum.KeyCode.DPadDown] = Enum.KeyCode.J,
	SecondaryKeybinds = nil,

	-- Default function state
	-- To setup this up, set the function name equal to the state you want it to start at
	-- If this is not set it will default to 0
	-- So for example:
	-- ["CruiseLights"] = 1,
	DefaultFunctionState = nil,

	-- **A-Chassis Only**
	-- Overrides for the chassis plugin
	-- This allows you to control functions without the use of keybinds
	--  or external scripts
	--
	-- Sirens overrides can be done like this
	-- ["Yelp"] = {"YelpOverride", "Stages"},
	-- ["Priority"] = "PriorityOverride"
	--
	-- Chassis overrides can be done like this
	-- ParkBrake = {"PBrakeOverride", "Stages"},
	-- Brake = false,
	-- Reverse = "ReverseOverride",
	--
	-- The second value is used to disallow the override
	--  if the second value is not active
	Overrides = nil,

	-- The colors to be used in the "Light" function
	-- These colors are a Color3
	Colors = nil,

	-- Do not change below unless you know what you are doing
	Light = nil,






	-- DO NOT CHANGE
	-- THIS IS AUTOMATICALLY GENERATED
	PluginVersion = "2.1.1",
	-- THIS IS FOR THE CHASSIS PLUGIN AND WILL NOT ALWAYS MATCH THE STUDIO PLUGIN
}</string>
          </Properties>
        </Item>
        <Item class="Folder" referent="56">
          <Properties>
            <string name="Name">CustomCode</string>
          </Properties>
          <Item class="ModuleScript" referent="57">
            <Properties>
              <string name="Name">faders</string>
              <string name="Source">--[[
	Generated By: Emergency Vehicle Creator
	For: [username]

	Redon Tech 2023-2024
	EVC V2
--]]

local Lightbar = script.Parent

-- Colors, change this if you wish
local Colors = {
	[1] = Color3.fromRGB(47, 71, 255),
	[2] = Color3.fromRGB(185, 58, 60),
	[3] = Color3.fromRGB(253, 194, 66),
	[4] = Color3.fromRGB(255, 255, 255),
	[5] = Color3.fromRGB(75, 255, 75),
	[6] = Color3.fromRGB(188, 12, 211),
}

-- By default this light function will work with most light types, modify to make it if need be
local function light(LightName, Color)
	local Light = Lightbar[LightName]
	if Color == 0 then
		for i,v in pairs(Light:GetDescendants()) do
			if v:IsA("GuiObject") then
				v.Visible = false
			elseif v:IsA("Light") or v:IsA("SurfaceGui") then
				v.Enabled = false
			elseif v:IsA("ParticleEmitter") then
				v.Transparency = NumberSequence.new(1)
			end
		end
		Light.Transparency = 1
	else
		for i,v in pairs(Light:GetDescendants()) do
			if v:IsA("GuiObject") then
				v.Visible = true
				v.ImageColor3 = Colors[Color]
			elseif v:IsA("Light") then
				v.Enabled = true
				v.Color = Colors[Color]
			elseif v:IsA("SurfaceGui") then
				v.Enabled = true
			elseif v:IsA("ParticleEmitter") then
				v.Transparency = NumberSequence.new(0)
				v.Color = ColorSequence.new(Colors[Color])
			end
		end
		Light.Transparency = 0
		Light.Color = Colors[Color]
	end
end


-- Main Loop
--------------
-- To use the function above do
--      light("L1", 0)
-- The above will turn off said light
--      light("L1", 1)
-- The above will turn on said light and change its color to said color defined in the color table
--------------
--[faders]</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="58">
            <Properties>
              <string name="Name">lights</string>
              <string name="Source">--[[
	Generated By: Emergency Vehicle Creator
	For: [username]

	Redon Tech 2023-2024
	EVC V2
--]]

local Lightbar = script.Parent

-- Colors, change this if you wish
local Colors = {
	[1] = Color3.fromRGB(47, 71, 255),
	[2] = Color3.fromRGB(185, 58, 60),
	[3] = Color3.fromRGB(253, 194, 66),
	[4] = Color3.fromRGB(255, 255, 255),
	[5] = Color3.fromRGB(75, 255, 75),
	[6] = Color3.fromRGB(188, 12, 211),
}

-- By default this light function will work with most light types, modify to make it if need be
local function light(LightName, Color)
	local Light = Lightbar[LightName]
	if Color == 0 then
		for i,v in pairs(Light:GetDescendants()) do
			if v:IsA("GuiObject") then
				v.Visible = false
			elseif v:IsA("Light") or v:IsA("SurfaceGui") then
				v.Enabled = false
			elseif v:IsA("ParticleEmitter") then
				v.Transparency = NumberSequence.new(1)
			end
		end
		Light.Transparency = 1
	else
		for i,v in pairs(Light:GetDescendants()) do
			if v:IsA("GuiObject") then
				v.Visible = true
				v.ImageColor3 = Colors[Color]
			elseif v:IsA("Light") then
				v.Enabled = true
				v.Color = Colors[Color]
			elseif v:IsA("SurfaceGui") then
				v.Enabled = true
			elseif v:IsA("ParticleEmitter") then
				v.Transparency = NumberSequence.new(0)
				v.Color = ColorSequence.new(Colors[Color])
			end
		end
		Light.Transparency = 0
		Light.Color = Colors[Color]
	end
end


-- Main Loop
--------------
-- To use the function above do
--      light("L1", 0)
-- The above will turn off said light
--      light("L1", 1)
-- The above will turn on said light and change its color to said color defined in the color table
--------------
while game["Run Service"].Heartbeat:Wait() do
	--[lights]
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="59">
            <Properties>
              <string name="Name">rotators</string>
              <string name="Source">--[[
	Generated By: Emergency Vehicle Creator
	For: [username]

	Redon Tech 2023-2024
	EVC V2
--]]

local Car = script.Parent.Parent.Parent
local Lightbar = script.Parent

-- Colors, change this if you wish
local Colors = {
	[1] = Color3.fromRGB(47, 71, 255),
	[2] = Color3.fromRGB(185, 58, 60),
	[3] = Color3.fromRGB(253, 194, 66),
	[4] = Color3.fromRGB(255, 255, 255),
	[5] = Color3.fromRGB(75, 255, 75),
	[6] = Color3.fromRGB(188, 12, 211),
}

-- By default this light function will work with most light types, modify to make it if need be
local function light(LightName, Color)
	local Light = Lightbar[LightName]
	if Color == 0 then
		for i,v in pairs(Light:GetDescendants()) do
			if v:IsA("GuiObject") then
				v.Visible = false
			elseif v:IsA("Light") or v:IsA("SurfaceGui") then
				v.Enabled = false
			elseif v:IsA("ParticleEmitter") then
				v.Transparency = NumberSequence.new(1)
			end
		end
		Light.Transparency = 1
	else
		for i,v in pairs(Light:GetDescendants()) do
			if v:IsA("GuiObject") then
				v.Visible = true
				v.ImageColor3 = Colors[Color]
			elseif v:IsA("Light") then
				v.Enabled = true
				v.Color = Colors[Color]
			elseif v:IsA("SurfaceGui") then
				v.Enabled = true
			elseif v:IsA("ParticleEmitter") then
				v.Transparency = NumberSequence.new(0)
				v.Color = ColorSequence.new(Colors[Color])
			end
		end
		Light.Transparency = 0
		Light.Color = Colors[Color]
	end
end

local function registerRotator(lightName:string)
	local motorPart = Instance.new("Part")
	motorPart.Name = `motor{lightName}`
	motorPart.Size = Vector3.new(.1,.1,.1)
	motorPart.CFrame = Lightbar[lightName].CFrame
	motorPart.Transparency = 1
	local weld = Instance.new("Weld")
	weld.Part0 = Car.DriveSeat
	weld.Part1 = motorPart
	weld.C0 = Car.DriveSeat.CFrame:Inverse()*Car.DriveSeat.CFrame 
	weld.C1 = motorPart.CFrame:Inverse()*Car.DriveSeat.CFrame 
	weld.Parent = Car.DriveSeat

	local Center = if Lightbar[lightName]:FindFirstChild("inverse") ~= nil then CFrame.new(Lightbar[lightName].inverse.Position) else CFrame.new(Lightbar[lightName].Position)
	local XYZ = if Lightbar[lightName]:FindFirstChild("inverse") ~= nil then CFrame.Angles(Lightbar[lightName].inverse.CFrame:toEulerAnglesXYZ()) else CFrame.Angles(Lightbar[lightName].CFrame:toEulerAnglesXYZ())
	local motor = Instance.new("Motor6D")
	motor.Name = "Motor"
	motor.Part0 = motorPart
	motor.Part1 = Lightbar[lightName]
	motor.C0 = (motorPart.CFrame:Inverse() * Center) * XYZ
	motor.C1 = (Lightbar[lightName].CFrame:Inverse() * Center) * XYZ
	motor.Parent = motorPart

	for i,v in pairs(Car.DriveSeat:GetChildren()) do
		if v:IsA("Weld") and v.Part1 == Lightbar[lightName] then
			v:Destroy()
		end
	end

	motorPart.Parent = Lightbar
end


-- Main Loops
--------------
-- To use the function above do
--		registerRotator("L1")
--      light("L1", 0)
-- The above will create the rotators motor and turn off said light
--      light("L1", 1)
-- The above will turn on said light and change its color to said color defined in the color table
--      Lightbar.motorL1.Motor.MaxVelocity = 0.1
--      Lightbar.motorL1.Motor.DesiredAngle = math.rad(90)
-- The above will rotate the light to 90 degrees with a velocity of 0.1 per heartbeat
--------------
--[rotators]</string>
            </Properties>
          </Item>
        </Item>
        <Item class="ModuleScript" referent="60">
          <Properties>
            <string name="Name">EVCPlugin</string>
            <string name="Source">--[[
	Redon Tech 2023-2024
	EVC V2

	MIT License
	Copyright (c) 2022-2024 Redon Tech
--]]

--------------------------------------------------------------------------------
-- Types --
--------------------------------------------------------------------------------

type elsLight = {number}

type rotatorLight = {
	color: number,
	angle: number,
	velocity: number
}

type faderLight = {
	color: number,
	transparency: number,
	timeTaken: number,
	easingStyle: Enum.EasingStyle,
	easingDirection: Enum.EasingDirection,
	repeatCount: number,
	reverses: boolean,
	timeDelay: number,
}

type patternModule = {
	instance: ModuleScript,
	data: {},
	moduleSettings: {
		waitTime: number,
		weight: number,
		colors: {[number]:Color3},
		light: (BasePart, number, {[number]:Color3}) -> nil,
	},
	lights: {[string]:{elsLight}},
	rotators: {[string]:{[number]:{rotatorLight}}},
	faders: {[string]:{[number]:{faderLight}}},
	count: number,
	max_count: number,
}

type pattern = {
	modules: {patternModule}
}

type lightbarFunction = {
	patterns: {[number]:pattern},
	currentPattern: number,
	maxPattern: number,
}

type lightInstance = {
	running_module: patternModule?,
	possible_modules: {patternModule}
}

type runningCoroutine = {
	thread: thread,
	running_patterns: {patternModule}
}

type rotatorLightThread = {
	thread: thread?,
	currentRunner: number,
	run: boolean
}

type tweenLightThread = {
	thread: thread?,
	tween: Tween?,
	currentRunner: number,
	run: boolean
}

type sirenModifier = {
	modifierName: string,
	name: string,
	playNonModified: boolean,
	playOnModifierChange: boolean,
	timeDelay: number,
}

type siren = {
	_type: string,
	keybind: EnumItem,
	name: string,
	overrideOtherSounds: boolean,
	modifiers: {[string]:sirenModifier}
}

type sirenSetting = {
	_Type: string,
	Name: string,
	OverrideOtherSounds: boolean,
	Modifiers: {[string]:sirenModifier}?
}

type modifier = {
	_type: string,
	keybind: EnumItem,
	name: string,
	enabled: boolean
}

--------------------------------------------------------------------------------
-- Init --
--------------------------------------------------------------------------------

local error = function(...)
	error(`"[EVC]" {...} \n {debug.traceback()}`)
end
local warn = function(...)
	warn("[EVC]", ...)
end

if script.Parent == nil or script.Parent:IsA("RemoteEvent") == false then
	error("EVCPlugin must be a child of a RemoteEvent under EVCPlugin_Client inside Plugins on a A-Chassis Vehicle")
end
local event = script.Parent :: RemoteEvent

if event.Parent == nil or event.Parent:IsA("Model") == false then
	error("EVCPlugin must be a child of a RemoteEvent under EVCPlugin_Client inside Plugins on a A-Chassis Vehicle")
end
local car = event.Parent :: Model

local pluginSettings = require(event:WaitForChild("Settings"))
local body:Model = car:WaitForChild("Body")
local misc:Model = car:WaitForChild("Misc")
local lightbarInstance:Instance? = body:WaitForChild(pluginSettings.LightbarName)
if lightbarInstance == nil or lightbarInstance:IsA("Model") == false then
	error(`No lightbar found`)
end
local lightbar:Model = lightbarInstance :: Model

local soundPart:Instance? = lightbar:FindFirstChild(pluginSettings.SirenName) :: Instance?

local TweenService = game:GetService("TweenService")
local JointsService = game:GetService("JointsService")

local lightParts:{[string]:BasePart} = {}
local lights:{[string]:lightInstance} = {}
local lightbarFunctions:{[string]:lightbarFunction} = {}
local coroutines = {}
local rotatorThreads:{[string]:rotatorLightThread} = {}
local tweenThreads:{[string]:tweenLightThread} = {}
local sirensByKeybind:{[EnumItem]:siren|modifier} = {}
local sirensByName:{[string]:siren} = {}
local modifiers:{[string]:modifier} = {}
local dependentOverrides:{[string]:{string}} = {}

--------------------------------------------------------------------------------
-- Functions --
--------------------------------------------------------------------------------

local function findFirstDescendant(instance: Instance, name: string): Instance?
	for _, child in pairs(instance:GetDescendants()) do
		if child.Name == name then
			return child
		end
	end
	return nil
end

-- Checks

local moduleStoreFolder:Instance? = lightbar:FindFirstChild("ModuleStore")
if moduleStoreFolder == nil or moduleStoreFolder:IsA("Folder") == false then
	error(`No modulestore found`)
end
local moduleStore:Folder = moduleStoreFolder :: Folder
if soundPart == nil then
	warn(`No soundpart found will be unable to play any sirens`)
end

for _,part in pairs(lightbar:GetDescendants()) do
	if part:IsA("BasePart") and lightParts[part.Name] == nil then
		lightParts[part.Name] = part
	elseif part:IsA("BasePart") then
		warn(`Duplicate lightPart ({part.Name}) in {lightbar.Name} (Body)`)
	end
end

for _,v in pairs(pluginSettings.AdditionalLightbarLocations.Body) do
	local model = findFirstDescendant(body, v)
	if model ~= nil then
		for _,part in pairs(model:GetDescendants()) do
			if part:IsA("BasePart") and lightParts[part.Name] == nil then
				lightParts[part.Name] = part
			elseif part:IsA("BasePart") then
				warn(`Duplicate lightPart ({part.Name}) in {model.Name} (Body)`)
			end
		end
	end
end

for _,v in pairs(pluginSettings.AdditionalLightbarLocations.Misc) do
	local model = findFirstDescendant(misc, v)
	if model ~= nil then
		for _,part in pairs(model:GetDescendants()) do
			if part:IsA("BasePart") and lightParts[part.Name] == nil then
				lightParts[part.Name] = part
			elseif part:IsA("BasePart") then
				warn(`Duplicate lightPart ({part.Name}) in {model.Name} (Misc)`)
			end
		end
	end
end

-- Spinup Coroutine
local function spinupCoroutine(waitTime:number, patterns:{})
	if patterns == nil or waitTime == nil then return end
	if coroutines[waitTime] ~= nil then return end

	coroutines[waitTime] = {
		running_patterns = patterns,
		thread = coroutine.create(function()
			while task.wait(waitTime) do
				if rawlen(coroutines[waitTime].running_patterns) == 0 then
					break
				else
					task.defer(function()
						for _,pattern:patternModule in pairs(coroutines[waitTime].running_patterns) do
							if pattern.count >= pattern.max_count then
								pattern.count = 1
							else
								pattern.count += 1
							end

							for lightName,lightData in pairs(pattern.lights) do
								if lights[lightName].running_module == pattern and lightData[pattern.count] ~= nil and lightParts[lightName] then
									pattern.moduleSettings.light(lightParts[lightName], lightData[pattern.count], pattern.moduleSettings.colors)
								end
							end
						end
					end)
				end
			end

			coroutines[waitTime] = nil
			return "Killed"
		end)
	}

	coroutine.resume(coroutines[waitTime].thread)
end

-- Setup Functions
local function registerLight(lightName:string)
	if lights[lightName] == nil then
		lights[lightName] = {
			running_module = nil,
			possible_modules = {}
		}
	end
end

local function registerRotator(lightName:string)
	if lightbar:FindFirstChild(`motor{lightName}`) == nil and lightParts[lightName] then
		local motorPart = Instance.new("Part")
		motorPart.Name = `motor{lightName}`
		motorPart.Size = Vector3.new(.1,.1,.1)
		motorPart.CFrame = lightParts[lightName].CFrame
		motorPart.Transparency = 1
		local weld = Instance.new("Weld")
		weld.Part0 = car.DriveSeat
		weld.Part1 = motorPart
		weld.C0 = car.DriveSeat.CFrame:Inverse()*car.DriveSeat.CFrame 
		weld.C1 = motorPart.CFrame:Inverse()*car.DriveSeat.CFrame 
		weld.Parent = car.DriveSeat

		local inversePart: Instance? = lightParts[lightName]:FindFirstChild("inverse")
		local inverse:BasePart? = nil
		if inversePart ~= nil and inversePart:IsA("BasePart") then
			inverse = inversePart
		end
		
		local Center = if inverse ~= nil then CFrame.new(inverse.Position) else CFrame.new(lightParts[lightName].Position)
		local XYZ = if inverse ~= nil then CFrame.Angles(inverse.CFrame:ToEulerAnglesXYZ()) else CFrame.Angles(lightParts[lightName].CFrame:ToEulerAnglesXYZ())
		local motor = Instance.new("Motor6D")
		motor.Name = "Motor"
		motor.Part0 = motorPart
		motor.Part1 = lightParts[lightName]
		motor.C0 = (motorPart.CFrame:Inverse() * Center) * XYZ
		motor.C1 = (lightParts[lightName].CFrame:Inverse() * Center) * XYZ
		motor.Parent = motorPart

		for i,v in pairs(car.DriveSeat:GetChildren()) do
			if v:IsA("Weld") and v.Part1 == lightParts[lightName] then
				v:Destroy()
			end
		end

		for i,v in pairs(JointsService:GetDescendants()) do
			if v:IsA("Weld") and v.Part1 == lightParts[lightName] then
				v:Destroy()
			end
		end

		motorPart.Parent = lightbar
	end
end

local function setLightRunningModule(lightName:string, module:patternModule, skipPossibleModules:boolean?)
	local light:lightInstance = lights[lightName]

	if light.running_module == nil or light.running_module.moduleSettings.weight &lt; module.moduleSettings.weight then
		if light.running_module ~= nil then
			local runningModuleParent = light.running_module.instance.Parent
			local moduleParent = module.instance.Parent
			local runningModuleParentParent = runningModuleParent.Parent
			local moduleParentParent = moduleParent.Parent

			if runningModuleParentParent ~= moduleParentParent then
				table.insert(light.possible_modules, light.running_module)
			end
		end
		light.running_module = module
		if table.find(light.possible_modules, module) then
			table.remove(light.possible_modules, table.find(light.possible_modules, module))
		end
	elseif skipPossibleModules ~= true then
		table.insert(light.possible_modules, module)
	end
end

for _,func in pairs(moduleStore:GetChildren()) do
	if func:IsA("Folder") and lightbarFunctions[func.Name] == nil then
		local funcTable:lightbarFunction = {
			patterns = {},
			currentPattern = 0,
			maxPattern = 0
		}

		lightbar:GetAttributeChangedSignal(func.Name):Connect(function()
			local patternNumber:number = lightbar:GetAttribute(func.Name)
			if typeof(patternNumber) ~= "number" then return end

			if patternNumber > funcTable.maxPattern then
				lightbar:SetAttribute(func.Name, 0)
				return
			end

			if funcTable.patterns[funcTable.currentPattern] ~= nil then
				local currentPattern:pattern = funcTable.patterns[funcTable.currentPattern]

				for _,patternModule:patternModule in pairs(currentPattern.modules) do
					for lightName,lightData in pairs(patternModule.lights) do
						if lights[lightName].running_module == patternModule then
							lights[lightName].running_module = nil

							if rawlen(lights[lightName].possible_modules) > 0 then
								local highestWeight = {
									weight = 0,
									module = nil
								}
								for _,module in ipairs(lights[lightName].possible_modules) do
									if module.moduleSettings.weight > highestWeight.weight then
										highestWeight.weight = module.moduleSettings.weight
										highestWeight.module = module
									end
								end
								setLightRunningModule(lightName, highestWeight.module)
							end
						else
							table.remove(lights[lightName].possible_modules, table.find(lights[lightName].possible_modules, patternModule))
						end
					end

					for lightName,lightData in pairs(patternModule.rotators) do
						if lights[lightName].running_module == patternModule then
							lights[lightName].running_module = nil

							if rawlen(lights[lightName].possible_modules) > 0 then
								local highestWeight = {
									weight = 0,
									module = nil
								}
								for _,module in ipairs(lights[lightName].possible_modules) do
									if module.moduleSettings.weight > highestWeight.weight then
										highestWeight.weight = module.moduleSettings.weight
										highestWeight.module = module
									end
								end
								setLightRunningModule(lightName, highestWeight.module)
							end
						else
							table.remove(lights[lightName].possible_modules, table.find(lights[lightName].possible_modules, patternModule))
						end
					end

					for lightName,lightData in pairs(patternModule.faders) do
						if lights[lightName].running_module == patternModule then
							lights[lightName].running_module = nil

							if rawlen(lights[lightName].possible_modules) > 0 then
								local highestWeight = {
									weight = 0,
									module = nil
								}
								for _,module in ipairs(lights[lightName].possible_modules) do
									if module.moduleSettings.weight > highestWeight.weight then
										highestWeight.weight = module.moduleSettings.weight
										highestWeight.module = module
									end
								end
								setLightRunningModule(lightName, highestWeight.module)
							end
						else
							table.remove(lights[lightName].possible_modules, table.find(lights[lightName].possible_modules, patternModule))
						end
					end
				end
			end

			if funcTable.patterns[patternNumber] ~= nil then
				local pattern:pattern = funcTable.patterns[patternNumber]

				for _,patternModule:patternModule in pairs(pattern.modules) do
					for lightName,lightData in pairs(patternModule.lights) do
						setLightRunningModule(lightName, patternModule)
					end
					for lightName,lightData in pairs(patternModule.rotators) do
						setLightRunningModule(lightName, patternModule)
						local rotatorTable:rotatorLightThread = {
							currentRunner = 0,
							run = true
						}
						rotatorThreads[lightName] = rotatorTable
						rotatorThreads[lightName].thread = task.defer(function()
							local motor = lightbar[`motor{lightName}`]
							while task.wait(1/3) do
								if rotatorTable.run == false or lights[lightName].running_module ~= patternModule then
									break
								else
									if math.abs(motor.Motor.CurrentAngle - motor.Motor.DesiredAngle) &lt; 0.05 then
										if rotatorTable.currentRunner >= rawlen(lightData) then
											rotatorTable.currentRunner = 1
										else
											rotatorTable.currentRunner += 1
										end

										patternModule.moduleSettings.light(lightParts[lightName], lightData[rotatorTable.currentRunner].color, patternModule.moduleSettings.colors)
										motor.Motor.MaxVelocity = lightData[rotatorTable.currentRunner].velocity
										motor.Motor.DesiredAngle = math.rad(lightData[rotatorTable.currentRunner].angle)
									end
								end
							end

							patternModule.moduleSettings.light(lightParts[lightName], 0, patternModule.moduleSettings.colors)
							motor.Motor.MaxVelocity = 5555555555555
							motor.Motor.DesiredAngle = 0
							rotatorThreads[lightName] = nil
							return "Killed"
						end)
					end
					for lightName,lightData in pairs(patternModule.faders) do
						setLightRunningModule(lightName, patternModule)
						local faderTable:tweenLightThread = {
							currentRunner = 0,
							run = true
						}
						tweenThreads[lightName] = faderTable
						tweenThreads[lightName].thread = task.defer(function()
							while task.wait(1/3) do
								if faderTable.run == false or lights[lightName].running_module ~= patternModule then
									break
								else
									if faderTable.currentRunner >= rawlen(lightData) then
										faderTable.currentRunner = 1
									else
										faderTable.currentRunner += 1
									end

									local lightData:faderLight = lightData[faderTable.currentRunner]
									if lightData.color ~= 0 then
										lightParts[lightName].Color = patternModule.moduleSettings.colors[lightData.color]
									end
									-- patternModule.moduleSettings.light(lightbar[lightName], lightData.color, patternModule.moduleSettings.colors)
									local tweenInfo = TweenInfo.new(
										lightData.timeTaken,
										lightData.easingStyle,
										lightData.easingDirection,
										lightData.repeatCount,
										lightData.reverses
									)
									faderTable.tween = TweenService:Create(lightParts[lightName], tweenInfo, {Transparency = lightData.transparency})
									if faderTable.tween ~= nil then
										faderTable.tween:Play()
										faderTable.tween.Completed:Wait()
									end
								end
							end

							patternModule.moduleSettings.light(lightParts[lightName], 0, patternModule.moduleSettings.colors)
							tweenThreads[lightName] = nil
							return "Killed"
						end)
					end

					if coroutines[patternModule.moduleSettings.waitTime] then
						table.insert(coroutines[patternModule.moduleSettings.waitTime].running_patterns, patternModule)
					else
						spinupCoroutine(patternModule.moduleSettings.waitTime, {patternModule})
					end
				end

				if dependentOverrides[func.Name] ~= nil then
					for _,override in pairs(dependentOverrides[func.Name]) do
						if lightbar:GetAttribute(override) == 0 and lightbar:GetAttribute(`should{override}`) == true then
							lightbar:SetAttribute(override, 1)
						end
					end
				end
			else
				for _,pattern in pairs(funcTable.patterns) do
					for _,patternModule:patternModule in pairs(pattern.modules) do
						for lightName,lightData in pairs(patternModule.lights) do
							if lightParts[lightName] then
								patternModule.moduleSettings.light(lightParts[lightName], 0, patternModule.moduleSettings.colors)
							end
						end
						for lightName,lightData in pairs(patternModule.rotators) do
							if lightParts[lightName] then
								patternModule.moduleSettings.light(lightParts[lightName], 0, patternModule.moduleSettings.colors)
							end
						end
						for lightName,lightData in pairs(patternModule.faders) do
							if lightParts[lightName] then
								patternModule.moduleSettings.light(lightParts[lightName], 0, patternModule.moduleSettings.colors)
							end
						end
					end
				end

				if dependentOverrides[func.Name] ~= nil then
					for _,override in pairs(dependentOverrides[func.Name]) do
						lightbar:SetAttribute(override, 0)
					end
				end
			end

			if funcTable.patterns[funcTable.currentPattern] ~= nil then
				local currentPattern:pattern = funcTable.patterns[funcTable.currentPattern]

				for _,patternModule:patternModule in pairs(currentPattern.modules) do
					if table.find(coroutines[patternModule.moduleSettings.waitTime].running_patterns, patternModule) then
						table.remove(coroutines[patternModule.moduleSettings.waitTime].running_patterns, table.find(coroutines[patternModule.moduleSettings.waitTime].running_patterns, patternModule))
					end
				end
			end

			funcTable.currentPattern = patternNumber
		end)

		-- Setup Patterns
		for _,patternCont in pairs(func:GetChildren()) do
			local patternNumber = tonumber(patternCont.Name:match("%d+"))
			if patternCont:IsA("Folder") and patternNumber and funcTable.patterns[patternNumber] == nil then
				local pattern:pattern = {
					modules = {}
				}

				for _,patternModule in pairs(patternCont:GetChildren()) do
					if patternModule:IsA("ModuleScript") then
						local data = require(patternModule)
						if data and data["Settings"] ~= nil then
							local moduleSettings = {
								waitTime = data.Settings.WaitTime,
								weight = data.Settings.Weight,
								colors = pluginSettings.Colors,
								light = pluginSettings.Light,
							}
							if data.Settings["Colors"] ~= nil then
								moduleSettings.colors = data.Settings.Colors
							end
							if data.Settings["Light"] ~= nil then
								moduleSettings.light = data.Settings.Light
							end
							local patternModuleTable:patternModule = {
								instance = patternModule,
								data = data,
								moduleSettings = moduleSettings,
								lights = {},
								rotators = {},
								faders = {},
								count = 0,
								max_count = 0
							}


							if data["Lights"] ~= nil then
								for lightName,lightData in pairs(data.Lights) do
									registerLight(lightName)
									if patternModuleTable.lights[lightName] == nil and typeof(lightData) == "table" and lightParts[lightName] then
										patternModuleTable.lights[lightName] = lightData
										patternModuleTable.max_count = rawlen(lightData)
									else
										warn(`Duplicate light ({lightName}) in {func.Name}.{patternModule.Name}.Lights`)
									end
								end
							end

							if data["Rotators"] ~= nil then
								for lightName,lightData in pairs(data.Rotators) do
									registerLight(lightName)
									registerRotator(lightName)
									if patternModuleTable.rotators[lightName] == nil and typeof(lightData) == "table" and lightParts[lightName] then
										local lightDataTable = {}
										for i,v in pairs(lightData) do
											lightDataTable[i] = {
												color = v.Color,
												angle = v.Angle,
												velocity = v.Velocity
											}
										end
										patternModuleTable.rotators[lightName] = lightDataTable
									else
										warn(`Duplicate rotator ({lightName}) in {func.Name}.{patternModule.Name}.Rotators`)
									end
								end
							end

							if data["Faders"] ~= nil then
								for lightName,lightData in pairs(data.Faders) do
									registerLight(lightName)
									if patternModuleTable.faders[lightName] == nil and typeof(lightData) == "table" and lightParts[lightName] then
										local lightDataTable = {}
										for i,v in pairs(lightData) do
											lightDataTable[i] = {
												color = v.Color,
												transparency = v.Transparency,
												timeTaken = v.Time,
												easingStyle = v.EasingStyle,
												easingDirection = v.EasingDirection,
												repeatCount = v.RepeatCount,
												reverses = v.Reverses,
												timeDelay = v.TimeDelay,
											}
										end
										patternModuleTable.faders[lightName] = lightDataTable
									else
										warn(`Duplicate fader ({lightName}) in {func.Name}.{patternModule.Name}.Faders`)
									end
								end
							end

							table.insert(pattern.modules, patternModuleTable)
						end
					end
				end

				funcTable.maxPattern += 1
				funcTable.patterns[patternNumber] = pattern
			end
		end

		lightbar:SetAttribute(func.Name, 0)
	end
end

-- Dependent Overrides
for _,override in pairs(pluginSettings.Overrides.Chassis) do
	if typeof(override) == "table" then
		if override[1] ~= nil and override[2] ~= nil then
			if dependentOverrides[override[2]] == nil then
				dependentOverrides[override[2]] = {}
			end
			table.insert(dependentOverrides[override[2]], override[1])
		end
	end
end

for _,override in pairs(pluginSettings.Overrides.Sirens) do
	if typeof(override) == "table" then
		if override[1] ~= nil and override[2] ~= nil then
			if dependentOverrides[override[2]] == nil then
				dependentOverrides[override[2]] = {}
			end
			table.insert(dependentOverrides[override[2]], override[1])
		end
	end
end

-- Siren System
for keybind:EnumItem,siren:sirenSetting in pairs(pluginSettings.Sirens) do
	if siren._Type ~= nil and (siren._Type == "Siren" or siren._Type == "Hold") and siren.Name ~= nil and siren.OverrideOtherSounds ~= nil then
		local sirenData:siren = {
			_type = siren._Type:lower(),
			keybind = keybind,
			name = siren.Name,
			overrideOtherSounds = siren.OverrideOtherSounds,
			modifiers = {}
		}
		
		if siren.Modifiers ~= nil then
			for name,modifier in pairs(siren.Modifiers) do
				if name ~= nil and modifier ~= nil and modifier.Name ~= nil and modifier.PlayNonModified ~= nil and modifier.PlayOnModifierChange ~= nil and modifier.Delay ~= nil then
					local modifierData:sirenModifier = {
						modifierName = name,
						name = modifier.Name,
						playNonModified = modifier.PlayNonModified,
						playOnModifierChange = modifier.PlayOnModifierChange,
						timeDelay = modifier.Delay
					}
					
					sirenData.modifiers[name] = modifierData
				end
			end
		end
		
		sirensByKeybind[keybind] = sirenData
		sirensByName[sirenData.name] = sirenData
	elseif siren._Type ~= nil and siren._Type == "Modifier" and siren.Name ~= nil then
		local modifierData:modifier = {
			_type = "modifier",
			keybind = keybind,
			name = siren.Name,
			enabled = false
		}
		
		modifiers[modifierData.name] = modifierData
		sirensByKeybind[keybind] = modifiers[modifierData.name]
	end
end

local function playStopModified(name, modifiedName)
	if soundPart == nil then return end
	local soundPart:Instance = soundPart

	local sirenData:siren = sirensByName[name]
	local modifiedData:sirenModifier = sirenData.modifiers[modifiedName]
	local modifierData:modifier = modifiers[modifiedName]
	local soundInstance:Instance? = soundPart:FindFirstChild(name)
	if soundInstance == nil or soundInstance:IsA("Sound") == false then return end
	local sound:Sound = soundInstance :: Sound

	local modifiedSoundInstance:Instance? = soundPart:FindFirstChild(modifiedData.name)
	if modifiedSoundInstance == nil or modifiedSoundInstance:IsA("Sound") == false then return end
	local modifiedSound:Sound = modifiedSoundInstance :: Sound
	
	if modifierData.enabled and sound.Playing == true then
		if modifiedData.playNonModified then
			modifiedSound:Play()
			modifiedSound.TimePosition = sound.TimePosition + modifiedData.timeDelay
		else
			modifiedSound:Play()
			sound:Stop()
			modifiedSound.TimePosition = sound.TimePosition + modifiedData.timeDelay
		end
	else
		if modifiedData.playNonModified then
			modifiedSound:Stop()
		elseif modifiedSound.IsPlaying == true then
			modifiedSound:Stop()
			sound:Play()
			sound.TimePosition = modifiedSound.TimePosition - modifiedData.timeDelay
		end
	end
end

local function playSiren(name)
	if soundPart == nil then return end
	local soundPart:Instance = soundPart

	local sirenData:siren = sirensByName[name]
	local soundInstance:Instance? = soundPart:FindFirstChild(name)
	if soundInstance == nil or soundInstance:IsA("Sound") == false then return end
	local sound:Sound = soundInstance :: Sound
	
	if sirenData.overrideOtherSounds then
		if sirenData._type == "hold" then
			for _,v in pairs(soundPart:GetChildren()) do
				if v:IsA("Sound") and v ~= sound then
					if v:GetAttribute("OriginalVolume") == nil then
						v:SetAttribute("OriginalVolume", v.Volume)
					end
					v.Volume = 0
				end
			end
		else
			for _,v in pairs(soundPart:GetChildren()) do
				if v:IsA("Sound") and v ~= sound then
					v:Stop()
				end
			end
		end
	end
	
	if sound:GetAttribute("OriginalVolume") then
		sound.Volume = sound:GetAttribute("OriginalVolume")
	end
	sound:Play()

	if pluginSettings.Overrides.Sirens[sirenData.name] ~= nil then
		if typeof(pluginSettings.Overrides.Sirens[sirenData.name]) == "string" then
			lightbar:SetAttribute(pluginSettings.Overrides.Sirens[sirenData.name], 1)
		elseif typeof(pluginSettings.Overrides.Sirens[sirenData.name]) == "table" then
			lightbar:SetAttribute(`should{pluginSettings.Overrides.Sirens[sirenData.name][1]}`, true)
			lightbar:SetAttribute(
				pluginSettings.Overrides.Sirens[sirenData.name][1],
				if lightbar:GetAttribute(pluginSettings.Overrides.Sirens[sirenData.name][2]) > 0 then 1 else 0
			)
		end
	end

	for modifiedName,data:sirenModifier in pairs(sirenData.modifiers) do
		if soundPart:FindFirstChild(data.name) then
			playStopModified(name,modifiedName)
		end
	end
end

local function stopSiren(name)
	if soundPart == nil then return end
	local soundPart:Instance = soundPart

	local sirenData:siren = sirensByName[name]
	local soundInstance:Instance? = soundPart:FindFirstChild(name)
	if soundInstance == nil or soundInstance:IsA("Sound") == false then return end
	local sound:Sound = soundInstance :: Sound
	
	if sirenData.overrideOtherSounds then
		if sirenData._type == "hold" then
			for _,v in pairs(soundPart:GetChildren()) do
				if v:IsA("Sound") and v ~= sound and v:GetAttribute("OriginalVolume") then
					v.Volume = v:GetAttribute("OriginalVolume")
				end
			end
		end
	end
	
	sound:Stop()

	if pluginSettings.Overrides.Sirens[sirenData.name] ~= nil then
		if typeof(pluginSettings.Overrides.Sirens[sirenData.name]) == "string" then
			lightbar:SetAttribute(pluginSettings.Overrides.Sirens[sirenData.name], 0)
		elseif typeof(pluginSettings.Overrides.Sirens[sirenData.name]) == "table" then
			lightbar:SetAttribute(`should{pluginSettings.Overrides.Sirens[sirenData.name][1]}`, false)
			lightbar:SetAttribute(pluginSettings.Overrides.Sirens[sirenData.name][1], 0)
		end
	end

	for modifiedName,data:sirenModifier in pairs(sirenData.modifiers) do
		if soundPart:FindFirstChild(data.name) then
			playStopModified(name,modifiedName)
		end
	end
end

-- Default State
for functionName,state in pairs(pluginSettings.DefaultFunctionState) do
	lightbar:SetAttribute(functionName, state)
end

-- Input Handler
event.OnServerEvent:Connect(function(player, eventType:string, ...)
	if player.Character ~= car.DriveSeat.Occupant.Parent then return end

	if eventType == "Input" then
		local state:EnumItem, _inputType:EnumItem, keycode:EnumItem = ...
		if pluginSettings.SecondaryKeybinds[keycode] ~= nil and typeof(pluginSettings.SecondaryKeybinds[keycode]) == "EnumItem" then
			keycode = pluginSettings.SecondaryKeybinds[keycode]
		end

		if state == Enum.UserInputState.Begin then
			if pluginSettings.Keybinds[keycode] then
				if typeof(lightbar:GetAttribute(pluginSettings.Keybinds[keycode])) ~= "number" then return end
				lightbar:SetAttribute(pluginSettings.Keybinds[keycode],  lightbar:GetAttribute(pluginSettings.Keybinds[keycode])+1)
			elseif sirensByKeybind[keycode] then
				if soundPart == nil then return end
				local soundPart:Instance = soundPart

				local sirenData:siren|modifier = sirensByKeybind[keycode]
				if sirenData._type == "siren" or sirenData._type == "hold" then
					local soundInstance:Instance? = soundPart:FindFirstChild(sirenData.name)
					if soundInstance ~= nil and soundInstance:IsA("Sound") then
						local sound:Sound = soundInstance :: Sound
						if sound.Playing and sirenData._type ~= "hold" then
							stopSiren(sirenData.name)
						else
							playSiren(sirenData.name)
						end
					end
				elseif sirenData._type == "modifier" then
					local modifierData:modifier = sirenData :: modifier

					if modifierData.enabled then
						modifierData.enabled = false
						if pluginSettings.Overrides.Sirens[modifierData.name] ~= nil then
							lightbar:SetAttribute(pluginSettings.Overrides.Sirens[modifierData.name], 0)
						end

						for _,v:siren in pairs(sirensByName) do
							if v.modifiers[modifierData.name] then
								playStopModified(v.name, modifierData.name)
							end
						end
					else
						modifierData.enabled = true
						if pluginSettings.Overrides.Sirens[modifierData.name] ~= nil then
							lightbar:SetAttribute(pluginSettings.Overrides.Sirens[modifierData.name], 1)
						end

						for _,v:siren in pairs(sirensByName) do
							if v.modifiers[modifierData.name] then
								playStopModified(v.name, modifierData.name)
							end
						end
					end
				end
			end
		elseif state == Enum.UserInputState.End then
			if sirensByKeybind[keycode] then
				if soundPart == nil then return end
				local soundPart:Instance = soundPart

				local sirenData:siren|modifier = sirensByKeybind[keycode]
				if sirenData._type == "hold" then
					local soundInstance:Instance? = soundPart:FindFirstChild(sirenData.name)
					if soundInstance ~= nil and soundInstance:IsA("Sound") then
						local sound:Sound = soundInstance :: Sound
						if sound.Playing then
							stopSiren(sirenData.name)
						end
					end
				end
			end
		end
	elseif eventType == "UpdateFunction" then
		local functionName, value = ...
		lightbar:SetAttribute(functionName, value)
	elseif eventType == "DoOverride" then
		local overrideType, value = ...
		if overrideType == "PBrake" and pluginSettings.Overrides.Chassis.ParkBrake ~= false then
			if typeof(pluginSettings.Overrides.Chassis.ParkBrake) == "string" then
				lightbar:SetAttribute(pluginSettings.Overrides.Chassis.ParkBrake, if value == true then 1 else 0)
			elseif typeof(pluginSettings.Overrides.Chassis.ParkBrake) == "table" then
				if value == true then
					lightbar:SetAttribute(`should{pluginSettings.Overrides.Chassis.ParkBrake[1]}`, true)
					lightbar:SetAttribute(
						pluginSettings.Overrides.Chassis.ParkBrake[1],
						if lightbar:GetAttribute(pluginSettings.Overrides.Chassis.ParkBrake[2]) > 0 then 1 else 0
					)
				else
					lightbar:SetAttribute(`should{pluginSettings.Overrides.Chassis.ParkBrake[1]}`, false)
					lightbar:SetAttribute(pluginSettings.Overrides.Chassis.ParkBrake[1], 0)
				end
			end
		elseif overrideType == "Brake" and pluginSettings.Overrides.Chassis.Brake ~= false then
			if typeof(pluginSettings.Overrides.Chassis.Brake) == "string" then
				lightbar:SetAttribute(pluginSettings.Overrides.Chassis.Brake, if value > 0 then 1 else 0)
			elseif typeof(pluginSettings.Overrides.Chassis.Brake) == "table" then
				if value > 0 then
					lightbar:SetAttribute(`should{pluginSettings.Overrides.Chassis.Brake[1]}`, true)
					lightbar:SetAttribute(
						pluginSettings.Overrides.Chassis.Brake[1],
						if lightbar:GetAttribute(pluginSettings.Overrides.Chassis.Brake[2]) > 0 then 1 else 0
					)
				else
					lightbar:SetAttribute(`should{pluginSettings.Overrides.Chassis.Brake[1]}`, false)
					lightbar:SetAttribute(pluginSettings.Overrides.Chassis.Brake[1], 0)
				end
			end
		elseif overrideType == "Gear" and pluginSettings.Overrides.Chassis.Reverse ~= false then
			if typeof(pluginSettings.Overrides.Chassis.Reverse) == "string" then
				lightbar:SetAttribute(pluginSettings.Overrides.Chassis.Reverse, if value == -1 then 1 else 0)
			elseif typeof(pluginSettings.Overrides.Chassis.Reverse) == "table" then
				if value > -1 then
					lightbar:SetAttribute(`should{pluginSettings.Overrides.Chassis.Reverse[1]}`, true)
					lightbar:SetAttribute(
						pluginSettings.Overrides.Chassis.Reverse[1],
						if lightbar:GetAttribute(pluginSettings.Overrides.Chassis.Reverse[2]) > 0 then 1 else 0
					)
				else
					lightbar:SetAttribute(`should{pluginSettings.Overrides.Chassis.Reverse[1]}`, false)
					lightbar:SetAttribute(pluginSettings.Overrides.Chassis.Reverse[1], 0)
				end
			end
		end
	end
end)</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="61">
          <Properties>
            <string name="Name">EVCPlugin_AG</string>
            <string name="Source">--[[
	Redon Tech 2023-2024
	EVC V2

	MIT License
	Copyright (c) 2022-2024 Redon Tech
--]]

--------------------------------------------------------------------------------
-- Types --
--------------------------------------------------------------------------------

type elsLight = {number}

type rotatorLight = {
	color: number,
	angle: number,
	velocity: number
}

type faderLight = {
	color: number,
	transparency: number,
	timeTaken: number,
	easingStyle: EnumItem,
	easingDirection: EnumItem,
	repeatCount: number,
	reverses: boolean,
	timeDelay: number,
}

type patternModule = {
	instance: ModuleScript,
	data: {},
	moduleSettings: {
		waitTime: number,
		weight: number,
		colors: {}?,
		light: any?,
	},
	lights: {string:{elsLight}},
	rotators: {string:{number:{rotatorLight}}},
	faders: {string:{number:{faderLight}}},
	count: number,
	max_count: number,
}

type pattern = {
	modules: {patternModule}
}

type lightbarFunction = {
	patterns: {number:pattern},
	currentPattern: number,
	maxPattern: number,
}

type lightInstance = {
	running_module: patternModule?,
	possible_modules: {patternModule}
}

type runningCoroutine = {
	thread: thread,
	running_patterns: {patternModule}
}

type rotatorLightThread = {
	thread: thread,
	currentRunner: number,
	run: boolean
}

type tweenLightThread = {
	thread: thread,
	tween: Tween,
	currentRunner: number,
	run: boolean
}

--------------------------------------------------------------------------------
-- Init --
--------------------------------------------------------------------------------

local error = function(...)
	error(`"[EVC]" {...} \n {debug.traceback()}`)
end
local warn = function(...)
	warn("[EVC]", ...)
end

local car:Model = script.Parent.Parent.Parent.Parent
local pluginSettings = require(script.Parent.Settings)
local body:Model = car:WaitForChild("Body")
local lightbar:Model = body:WaitForChild("ELS")

local TweenService = game:GetService("TweenService")

local lights:{string:lightInstance} = {}
local lightbarFunctions:{name:lightbarFunction} = {}
local coroutines = {}
local rotatorThreads:{string:rotatorLightThread} = {}
local tweenThreads:{string:tweenLightThread} = {}

--------------------------------------------------------------------------------
-- Functions --
--------------------------------------------------------------------------------

-- Checks
if lightbar == nil then
	error(`No lightbar found`)
end
if lightbar:FindFirstChild("ModuleStore") == nil then
	error(`No modulestore found`)
end
-- Spinup Coroutine
local function spinupCoroutine(waitTime:number, patterns:{})
	if patterns == nil or waitTime == nil then return end
	if coroutines[waitTime] ~= nil then return end

	coroutines[waitTime] = {
		running_patterns = patterns,
		thread = coroutine.create(function()
			while task.wait(waitTime) do
				if rawlen(coroutines[waitTime].running_patterns) == 0 then
					break
				else
					task.defer(function()
						for _,pattern:patternModule in pairs(coroutines[waitTime].running_patterns) do
							if pattern.count >= pattern.max_count then
								pattern.count = 1
							else
								pattern.count += 1
							end

							for lightName,lightData in pairs(pattern.lights) do
								if lights[lightName].running_module == pattern and lightData[pattern.count] ~= nil and lightbar:FindFirstChild(lightName) then
									pattern.moduleSettings.light(lightbar[lightName], lightData[pattern.count], pattern.moduleSettings.colors)
								end
							end
						end
					end)
				end
			end

			coroutines[waitTime] = nil
			return "Killed"
		end)
	}

	coroutine.resume(coroutines[waitTime].thread)
end

-- Setup Functions
local function registerLight(lightName:string)
	if lights[lightName] == nil then
		lights[lightName] = {
			running_module = nil,
			possible_modules = {}
		}
	end
end

local function registerRotator(lightName:string)
	if lightbar:FindFirstChild(`motor{lightName}`) == nil then
		local motorPart = Instance.new("Part")
		motorPart.Name = `motor{lightName}`
		motorPart.Size = Vector3.new(.1,.1,.1)
		motorPart.CFrame = lightbar[lightName].CFrame
		motorPart.Transparency = 1
		local weld = Instance.new("Weld")
		weld.Part0 = car.DriveSeat
		weld.Part1 = motorPart
		weld.C0 = car.DriveSeat.CFrame:Inverse()*car.DriveSeat.CFrame 
		weld.C1 = motorPart.CFrame:Inverse()*car.DriveSeat.CFrame 
		weld.Parent = car.DriveSeat

		local Center = if lightbar[lightName]:FindFirstChild("inverse") ~= nil then CFrame.new(lightbar[lightName].inverse.Position) else CFrame.new(lightbar[lightName].Position)
		local XYZ = if lightbar[lightName]:FindFirstChild("inverse") ~= nil then CFrame.Angles(lightbar[lightName].inverse.CFrame:toEulerAnglesXYZ()) else CFrame.Angles(lightbar[lightName].CFrame:toEulerAnglesXYZ())
		local motor = Instance.new("Motor6D")
		motor.Name = "Motor"
		motor.Part0 = motorPart
		motor.Part1 = lightbar[lightName]
		motor.C0 = (motorPart.CFrame:Inverse() * Center) * XYZ
		motor.C1 = (lightbar[lightName].CFrame:Inverse() * Center) * XYZ
		motor.Parent = motorPart

		for i,v in pairs(car.DriveSeat:GetChildren()) do
			if v:IsA("Weld") and v.Part1 == lightbar[lightName] then
				v:Destroy()
			end
		end

		motorPart.Parent = lightbar
	end
end

local function setLightRunningModule(lightName:string, module:patternModule, skipPossibleModules:boolean)
	local light:lightInstance = lights[lightName]

	if light.running_module == nil or light.running_module.moduleSettings.weight &lt; module.moduleSettings.weight then
		if light.running_module ~= nil and light.running_module.instance.Parent.Parent ~= module.instance.Parent.Parent then
			table.insert(light.possible_modules, light.running_module)
		end
		light.running_module = module
		if table.find(light.possible_modules, module) then
			table.remove(light.possible_modules, table.find(light.possible_modules, module))
		end
	elseif skipPossibleModules ~= true then
		table.insert(light.possible_modules, module)
	end
end

for _,func:Folder in pairs(lightbar.ModuleStore:GetChildren()) do
	if func:IsA("Folder") and lightbarFunctions[func.Name] == nil then
		local funcTable:lightbarFunction = {
			patterns = {},
			currentPattern = 0,
			maxPattern = 0
		}

		lightbar:GetAttributeChangedSignal(func.Name):Connect(function()
			local patternNumber:number = lightbar:GetAttribute(func.Name)
			if typeof(patternNumber) ~= "number" then return end

			if patternNumber > funcTable.maxPattern then
				lightbar:SetAttribute(func.Name, 0)
				return
			end

			if funcTable.patterns[funcTable.currentPattern] ~= nil then
				local currentPattern:pattern = funcTable.patterns[funcTable.currentPattern]

				for _,patternModule:patternModule in pairs(currentPattern.modules) do
					for lightName,lightData in pairs(patternModule.lights) do
						if lights[lightName].running_module == patternModule then
							lights[lightName].running_module = nil

							if rawlen(lights[lightName].possible_modules) > 0 then
								for _,module in pairs(lights[lightName].possible_modules) do
									setLightRunningModule(lightName, module, true)
								end
							end
						else
							table.remove(lights[lightName].possible_modules, table.find(lights[lightName].possible_modules, patternModule))
						end
					end

					for lightName,lightData in pairs(patternModule.rotators) do
						if lights[lightName].running_module == patternModule then
							lights[lightName].running_module = nil

							if rawlen(lights[lightName].possible_modules) > 0 then
								for _,module in pairs(lights[lightName].possible_modules) do
									setLightRunningModule(lightName, module, true)
								end
							end
						else
							table.remove(lights[lightName].possible_modules, table.find(lights[lightName].possible_modules, patternModule))
						end
					end

					for lightName,lightData in pairs(patternModule.faders) do
						if lights[lightName].running_module == patternModule then
							lights[lightName].running_module = nil

							if rawlen(lights[lightName].possible_modules) > 0 then
								for _,module in pairs(lights[lightName].possible_modules) do
									setLightRunningModule(lightName, module, true)
								end
							end
						else
							table.remove(lights[lightName].possible_modules, table.find(lights[lightName].possible_modules, patternModule))
						end
					end
				end
			end

			if funcTable.patterns[patternNumber] ~= nil then
				local pattern:pattern = funcTable.patterns[patternNumber]

				for _,patternModule:patternModule in pairs(pattern.modules) do
					for lightName,lightData in pairs(patternModule.lights) do
						setLightRunningModule(lightName, patternModule)
					end
					for lightName,lightData in pairs(patternModule.rotators) do
						setLightRunningModule(lightName, patternModule)
						local rotatorTable:rotatorLightThread = {
							currentRunner = 0,
							run = true
						}
						rotatorThreads[lightName] = rotatorTable
						rotatorThreads[lightName].thread = task.defer(function()
							local motor = lightbar[`motor{lightName}`]
							while task.wait(1/3) do
								if rotatorTable.run == false or lights[lightName].running_module ~= patternModule then
									break
								else
									if math.abs(motor.Motor.CurrentAngle - motor.Motor.DesiredAngle) &lt; 0.05 then
										if rotatorTable.currentRunner >= rawlen(lightData) then
											rotatorTable.currentRunner = 1
										else
											rotatorTable.currentRunner += 1
										end

										patternModule.moduleSettings.light(lightbar[lightName], lightData[rotatorTable.currentRunner].color, patternModule.moduleSettings.colors)
										motor.Motor.MaxVelocity = lightData[rotatorTable.currentRunner].velocity
										motor.Motor.DesiredAngle = math.rad(lightData[rotatorTable.currentRunner].angle)
									end
								end
							end

							patternModule.moduleSettings.light(lightbar[lightName], 0, patternModule.moduleSettings.colors)
							motor.Motor.MaxVelocity = 5555555555555
							motor.Motor.DesiredAngle = 0
							rotatorThreads[lightName] = nil
							return "Killed"
						end)
					end
					for lightName,lightData in pairs(patternModule.faders) do
						setLightRunningModule(lightName, patternModule)
						local faderTable:tweenLightThread = {
							currentRunner = 0,
							run = true
						}
						tweenThreads[lightName] = faderTable
						tweenThreads[lightName].thread = task.defer(function()
							while task.wait(1/3) do
								if faderTable.run == false or lights[lightName].running_module ~= patternModule then
									break
								else
									if faderTable.currentRunner >= rawlen(lightData) then
										faderTable.currentRunner = 1
									else
										faderTable.currentRunner += 1
									end

									local lightData:faderLight = lightData[faderTable.currentRunner]
									if lightData.color ~= 0 then
										lightbar[lightName].Color = patternModule.moduleSettings.colors[lightData.color]
									end
									-- patternModule.moduleSettings.light(lightbar[lightName], lightData.color, patternModule.moduleSettings.colors)
									local tweenInfo = TweenInfo.new(
										lightData.timeTaken,
										lightData.easingStyle,
										lightData.easingDirection,
										lightData.repeatCount,
										lightData.reverses
									)
									faderTable.tween = TweenService:Create(lightbar[lightName], tweenInfo, {Transparency = lightData.transparency})
									faderTable.tween:Play()
									faderTable.tween.Completed:Wait()
								end
							end

							patternModule.moduleSettings.light(lightbar[lightName], 0, patternModule.moduleSettings.colors)
							tweenThreads[lightName] = nil
							return "Killed"
						end)
					end

					if coroutines[patternModule.moduleSettings.waitTime] then
						table.insert(coroutines[patternModule.moduleSettings.waitTime].running_patterns, patternModule)
					else
						spinupCoroutine(patternModule.moduleSettings.waitTime, {patternModule})
					end
				end
			else
				for _,pattern in pairs(funcTable.patterns) do
					for _,patternModule:patternModule in pairs(pattern.modules) do
						for lightName,lightData in pairs(patternModule.lights) do
							if lightbar:FindFirstChild(lightName) then
								patternModule.moduleSettings.light(lightbar[lightName], 0, patternModule.moduleSettings.colors)
							end
						end
						for lightName,lightData in pairs(patternModule.rotators) do
							if lightbar:FindFirstChild(lightName) then
								patternModule.moduleSettings.light(lightbar[lightName], 0, patternModule.moduleSettings.colors)
							end
						end
						for lightName,lightData in pairs(patternModule.faders) do
							if lightbar:FindFirstChild(lightName) then
								patternModule.moduleSettings.light(lightbar[lightName], 0, patternModule.moduleSettings.colors)
							end
						end
					end
				end
			end

			if funcTable.patterns[funcTable.currentPattern] ~= nil then
				local currentPattern:pattern = funcTable.patterns[funcTable.currentPattern]

				for _,patternModule:patternModule in pairs(currentPattern.modules) do
					if table.find(coroutines[patternModule.moduleSettings.waitTime].running_patterns, patternModule) then
						table.remove(coroutines[patternModule.moduleSettings.waitTime].running_patterns, table.find(coroutines[patternModule.moduleSettings.waitTime].running_patterns, patternModule))
					end
				end
			end

			funcTable.currentPattern = patternNumber
		end)

		-- Setup Patterns
		for _,patternCont:Folder in pairs(func:GetChildren()) do
			local patternNumber = tonumber(patternCont.Name:match("%d+"))
			if patternCont:IsA("Folder") and patternNumber and funcTable.patterns[patternNumber] == nil then
				local pattern:pattern = {
					modules = {}
				}

				for _,patternModule in pairs(patternCont:GetChildren()) do
					if patternModule:IsA("ModuleScript") then
						local data = require(patternModule)
						if data and data["Settings"] ~= nil then
							local moduleSettings = {
								waitTime = data.Settings.WaitTime,
								weight = data.Settings.Weight,
								colors = pluginSettings.Colors,
								light = pluginSettings.Light,
							}
							if data.Settings["Colors"] ~= nil then
								moduleSettings.colors = data.Settings.Colors
							end
							if data.Settings["Light"] ~= nil then
								moduleSettings.light = data.Settings.Light
							end
							local patternModuleTable:patternModule = {
								instance = patternModule,
								data = data,
								moduleSettings = moduleSettings,
								lights = {},
								rotators = {},
								faders = {},
								count = 0,
								max_count = 0
							}


							if data["Lights"] ~= nil then
								for lightName,lightData in pairs(data.Lights) do
									registerLight(lightName)
									if patternModuleTable.lights[lightName] == nil and typeof(lightData) == "table" and lightbar:FindFirstChild(lightName) then
										patternModuleTable.lights[lightName] = lightData
										patternModuleTable.max_count = rawlen(lightData)
									else
										warn(`Duplicate light ({lightName}) in {func.Name}.{patternModule.Name}.Lights`)
									end
								end
							end

							if data["Rotators"] ~= nil then
								for lightName,lightData in pairs(data.Rotators) do
									registerLight(lightName)
									registerRotator(lightName)
									if patternModuleTable.rotators[lightName] == nil and typeof(lightData) == "table" and lightbar:FindFirstChild(lightName) then
										local lightDataTable = {}
										for i,v in pairs(lightData) do
											lightDataTable[i] = {
												color = v.Color,
												angle = v.Angle,
												velocity = v.Velocity
											}
										end
										patternModuleTable.rotators[lightName] = lightDataTable
									else
										warn(`Duplicate rotator ({lightName}) in {func.Name}.{patternModule.Name}.Rotators`)
									end
								end
							end

							if data["Faders"] ~= nil then
								for lightName,lightData in pairs(data.Faders) do
									registerLight(lightName)
									if patternModuleTable.faders[lightName] == nil and typeof(lightData) == "table" and lightbar:FindFirstChild(lightName) then
										local lightDataTable = {}
										for i,v in pairs(lightData) do
											lightDataTable[i] = {
												color = v.Color,
												transparency = v.Transparency,
												timeTaken = v.Time,
												easingStyle = v.EasingStyle,
												easingDirection = v.EasingDirection,
												repeatCount = v.RepeatCount,
												reverses = v.Reverses,
												timeDelay = v.TimeDelay,
											}
										end
										patternModuleTable.faders[lightName] = lightDataTable
									else
										warn(`Duplicate fader ({lightName}) in {func.Name}.{patternModule.Name}.Faders`)
									end
								end
							end

							table.insert(pattern.modules, patternModuleTable)
						end
					end
				end

				funcTable.maxPattern += 1
				funcTable.patterns[patternNumber] = pattern
			end
		end

		lightbar:SetAttribute(func.Name, 0)
	end
end

local function patternChange()
	if script.Parent.ELSRunning.Value then
		lightbar:SetAttribute("Stages", script.Parent.PatternNumber.Value+1)
	else
		lightbar:SetAttribute("Stages", 0)
	end
end
script.Parent.PatternNumber:GetPropertyChangedSignal("Value"):Connect(patternChange)
script.Parent.ELSRunning:GetPropertyChangedSignal("Value"):Connect(patternChange)

local function taChange()
	if script.Parent.TARunning.Value then
		lightbar:SetAttribute("Traffic_Advisor", script.Parent.TAPatternNumber.Value+1)
	else
		lightbar:SetAttribute("Traffic_Advisor", 0)
	end
end
script.Parent.TAPatternNumber:GetPropertyChangedSignal("Value"):Connect(taChange)
script.Parent.TARunning:GetPropertyChangedSignal("Value"):Connect(taChange)

-- Default State
if pluginSettings.DefaultFunctionState["Stages"] ~= nil then
	script.Parent.PatternNumber.Value = pluginSettings.DefaultFunctionState["Stages"]
	script.Parent.ELSRunning.Value = if pluginSettings.DefaultFunctionState["Stages"] > 0 then true else false
end

if pluginSettings.DefaultFunctionState["Traffic_Advisor"] ~= nil then
	script.Parent.TAPatternNumber.Value = pluginSettings.DefaultFunctionState["Traffic_Advisor"]
	script.Parent.TARunning.Value = if pluginSettings.DefaultFunctionState["Traffic_Advisor"] > 0 then true else false
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="62">
          <Properties>
            <string name="Name">EVCPlugin_Client</string>
            <string name="Source">--[[
	Redon Tech 2023-2024
	EVC V2

	MIT License
	Copyright (c) 2022-2024 Redon Tech
--]]

--------------------------------------------------------------------------------
-- Init --
--------------------------------------------------------------------------------

if script.Parent == nil then
	error("EVCPlugin_Client must be a child of Plugins inside a A-Chassis vehicle")
end

local Car = script.Parent:WaitForChild("Car")
if Car ~= nil and Car.ClassName == "ObjectValue" then
	Car = Car.Value
else
	error("Please ensure EVCPlugin_Client is a child of Plugins inside a **A-Chassis vehicle**")
end

local Event = Car:WaitForChild("EVCRemote")
local UserInputService = game:GetService("UserInputService")
local Values = script.Parent:WaitForChild("Values")

--------------------------------------------------------------------------------
-- Handling --
--------------------------------------------------------------------------------

Values:WaitForChild("PBrake"):GetPropertyChangedSignal("Value"):Connect(function()
	Event:FireServer("DoOverride", "PBrake", Values.PBrake.Value)
end)

Values:WaitForChild("Brake"):GetPropertyChangedSignal("Value"):Connect(function()
	Event:FireServer("DoOverride", "Brake", Values.Brake.Value)
end)

Values:WaitForChild("Gear"):GetPropertyChangedSignal("Value"):Connect(function()
	Event:FireServer("DoOverride", "Gear", Values.Gear.Value)
end)

local function input(InputObj: InputObject, gameProcessedEvent: BoolValue)
	if not gameProcessedEvent and (InputObj.UserInputType == Enum.UserInputType.Keyboard or InputObj.UserInputType == Enum.UserInputType.Gamepad1) then
		Event:FireServer("Input", InputObj.UserInputState, InputObj.UserInputType, InputObj.KeyCode)
	end
end

UserInputService.InputBegan:Connect(input)
UserInputService.InputChanged:Connect(input)
UserInputService.InputEnded:Connect(input)</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="63">
          <Properties>
            <string name="Name">Settings</string>
            <string name="Source">--[[
	Redon Tech 2023-2024
	EVC V2
--]]

--------------------------------------------------------------------------------
-- Settings --
--------------------------------------------------------------------------------

return {
	-- The name of the lightbar in body
	LightbarName = "Lightbar",

	-- The location of the lightbar models
	-- For models inside Body add the name of the model
	-- For models inside Misc add the name of the model
	-- This will search all descendants (so make names unique)
	-- For example:
	--[[
		Misc = {
			"Lights",
		}
	--]]
	AdditionalLightbarLocations = {
		Body = {
		},
		Misc = {
		}
	},

	-- The name of the siren location the lightbar location
	SirenName = "middle",

	-- All the selectable sirens and there respected keybinds
	Sirens = {
		[Enum.KeyCode.H] = {
			_Type = "Hold",
			Name = "Horn",
			OverrideOtherSounds = true,
			Modifiers = nil
		},
		[Enum.KeyCode.R] = {
			_Type = "Siren",
			Name = "Wail",
			OverrideOtherSounds = true,
			Modifiers = {
				Rumbler = {
					Name = "RWail",
					PlayNonModified = false,
					PlayOnModifierChange = true,
					Delay = 0,
				},
			}
		},
		[Enum.KeyCode.T] = {
			_Type = "Siren",
			Name = "Yelp",
			OverrideOtherSounds = true,
			Modifiers = {
				Rumbler = {
					Name = "RYelp",
					PlayNonModified = true,
					PlayOnModifierChange = true,
					Delay = -0.2,
				},
			}
		},
		[Enum.KeyCode.Y] = {
			_Type = "Siren",
			Name = "Priority",
			OverrideOtherSounds = true,
			Modifiers = nil
		},

		[Enum.KeyCode.LeftBracket] = {
			_Type = "Modifier",
			Name = "Rumbler"
		},
	},

	-- All the keybinds for any other functionality the system has
	-- To setup this up, set the keycode equal to the stage you want it to increment
	-- So for example:
	-- [Enum.KeyCode.LeftBracket] = "Ally",
	Keybinds = {
		[Enum.KeyCode.J] = "Stages",
		[Enum.KeyCode.K] = "Traffic_Advisor"
	},

	-- Secondary keybinds
	-- These keybinds are mapped to other keybinds
	-- This can be used for Xbox controller support
	-- So for example:
	-- [Enum.KeyCode.DPadDown] = Enum.KeyCode.J,
	SecondaryKeybinds = {
		[Enum.KeyCode.DPadDown] = Enum.KeyCode.J,
	},

	-- Default function state
	-- To setup this up, set the function name equal to the state you want it to start at
	-- If this is not set it will default to 0
	-- So for example:
	-- ["CruiseLights"] = 1,
	DefaultFunctionState = {
	},

	-- **A-Chassis Only**
	-- Overrides for the chassis plugin
	-- This allows you to control functions without the use of keybinds
	--  or external scripts
	--
	-- Sirens overrides can be done like this
	-- ["Yelp"] = {"YelpOverride", "Stages"},
	-- ["Priority"] = "PriorityOverride"
	--
	-- Chassis overrides can be done like this
	-- ParkBrake = {"PBrakeOverride", "Stages"},
	-- Brake = false,
	-- Reverse = "ReverseOverride",
	--
	-- The second value is used to disallow the override
	--  if the second value is not active
	Overrides = {
		Sirens = {
		},
		Chassis = {
			ParkBrake = {"ParkBrakeOverride", "Stages"},
			Brake = "BrakeOverride",
			Reverse = false,
		}
	},

	-- The colors to be used in the "Light" function
	-- These colors are a Color3
	Colors = {
		[1] = Color3.fromRGB(47, 71, 255),
		[2] = Color3.fromRGB(185, 58, 60),
		[3] = Color3.fromRGB(253, 194, 66),
		[4] = Color3.fromRGB(255, 255, 255),
		[5] = Color3.fromRGB(75, 255, 75),
		[6] = Color3.fromRGB(188, 12, 211),
	},

	-- Do not change below unless you know what you are doing
	Light = function(Light, Color, Colors)
		if Color == 0 then
			for i,v in pairs(Light:GetDescendants()) do
				if v:IsA("GuiObject") then
					v.Visible = false
				elseif v:IsA("Light") or v:IsA("SurfaceGui") then
					v.Enabled = false
				end
			end
			Light.Transparency = 1
		else
			for i,v in pairs(Light:GetDescendants()) do
				if v:IsA("GuiObject") then
					v.Visible = true
					v.ImageColor3 = Colors[Color]
				elseif v:IsA("Light") then
					v.Enabled = true
					v.Color = Colors[Color]
				elseif v:IsA("SurfaceGui") then
					v.Enabled = true
				end
			end
			Light.Transparency = 0
			Light.Color = Colors[Color]
		end
	end,






	-- DO NOT CHANGE
	-- THIS IS AUTOMATICALLY GENERATED
	PluginVersion = "2.1.1",
	-- THIS IS FOR THE CHASSIS PLUGIN AND WILL NOT ALWAYS MATCH THE STUDIO PLUGIN
}</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="64">
          <Properties>
            <string name="Name">Template</string>
            <string name="Source">--[[
	Generated By: Emergency Vehicle Creator
	For: Emergency Vehicle Creator Plugin V2

	Redon Tech 2023-2024
	EVC V2
--]]

--------------------------------------------------------------------------------
-- Init --
--------------------------------------------------------------------------------

local Settings, Lights, Rotators, Faders

--------------------------------------------------------------------------------
-- Data --
--------------------------------------------------------------------------------

Settings = {
	-- The time between each light flash
	WaitTime = 0.1,
	
	-- Determins which lights can override each other
	-- For example lightbars should be 1 and traffic advisors 2
	-- This allows the traffic advisor to override the back of the lightbar
	-- If multiple are the same then the light will default to the first loaded
	Weight = 1,

	-- If for whatever reason you need to override the colors change the nil to a new table
	-- You can find a template for the table in the settings under the plugin
	Colors = nil,

	-- If for whatever reason you need to override the light function change nil to the new function
	-- You can find a template for the function in the settings under the plugin
	Light = nil,
}

--[[
	Example of how lights should look
	["LightName"] = {
		1,0,2,0,3,0,4,0,5,0,6, -- Refrenced to the color table above, **0 = Off**
	},
]]
Lights = {}

--[[
	Example of how rotators should look
	["LightName"] = {
		[1] = {
			Color = 1,
			Angle = 45,
			Velocity = 0.1
		},
		[2] = {
			Color = 2,
			Angle = -45,
			Velocity = 0.1
		},
	},
]]
Rotators = {}

--[[
	Example of how faders should look
	["LightName"] = {
		[1] = {
			Color = 1,
			Transparency = 1,
			Time = 0.5,
			EasingStyle = Enum.EasingStyle.Linear,
			EasingDirection = Enum.EasingDirection.InOut,
			RepeatCount = 0,
			Reverses = true,
			TimeDelay = 0,
		},
	},
]]
Faders = {}

--------------------------------------------------------------------------------
-- Return Value --
--------------------------------------------------------------------------------

return {
	Settings = Settings,
	Lights = Lights,
	Rotators = Rotators,
	Faders = Faders,
}</string>
          </Properties>
        </Item>
      </Item>
      <Item class="Script" referent="65">
        <Properties>
          <string name="Name">Main</string>
          <token name="RunContext">0</token>
          <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]
if not game:GetService("RunService"):IsEdit() then return end
--------------------------------------------------------------------------------
-- Init --
--------------------------------------------------------------------------------

local Is_RBXM = plugin.Name:find(".rbxm") ~= nil
local HttpService = game:GetService("HttpService")
local pluginRoot = script.Parent.Parent
local pluginValue = Instance.new("ObjectValue")
pluginValue.Name = "Plugin"
pluginValue.Value = plugin
pluginValue.Parent = pluginRoot

local function getName(name: string)
	if Is_RBXM then
		name ..= " (RBXM)"
	end
	return name
end

local Plugin_Version = "2.1.3"
local Plugin_Name = getName("Emergency Vehicle Creator V2")
local Plugin_Description = "Easily create amazing ELS for emergency vehicles!"
local Plugin_Icon = "http://www.roblox.com/asset/?id=9953243250"
local Widget_Name = getName("EVC V2")
local Button_Name = getName("EVC Menu V2")
local Packages = pluginRoot:WaitForChild("packages")
local Components = script.Parent:WaitForChild("Components")
local Modules = script.Parent:WaitForChild("Modules")
local Utils = script.Parent:WaitForChild("Utils")


if _G.RTPlugins and typeof(_G.RTPlugins) == "table" then
	if _G.RTPlugins.Buttons[Plugin_Name] then
		Button = _G.RTPlugins.Buttons[Plugin_Name]
	else
		_G.RTPlugins.Buttons[Plugin_Name] = _G.RTPlugins.ToolBar:CreateButton(Button_Name, Plugin_Description, Plugin_Icon)
		Button = _G.RTPlugins.Buttons[Plugin_Name]
	end
else
	_G.RTPlugins = {
		ToolBar = plugin:CreateToolbar("Redon Tech Plugins"),
		Buttons = {}
	}

	_G.RTPlugins.Buttons[Plugin_Name] = _G.RTPlugins.ToolBar:CreateButton(Button_Name, Plugin_Description, Plugin_Icon)
	Button = _G.RTPlugins.Buttons[Plugin_Name]
end

--------------------------------------------------------------------------------
-- UI Setup --
--------------------------------------------------------------------------------

local Config = DockWidgetPluginGuiInfo.new(Enum.InitialDockState.Float, false, false, 1280, 720)
local GUI = plugin:CreateDockWidgetPluginGui(Widget_Name, Config)
GUI.Title = Plugin_Name
GUI.Name = Widget_Name
Button:SetActive(GUI.Enabled)


GUI:GetPropertyChangedSignal("Enabled"):Connect(function()
	Button:SetActive(GUI.Enabled)
end)

local Container = require(Components.container)()
Container.Parent = GUI
Container:WaitForChild("TopBar"):WaitForChild("Title").Text = Plugin_Name
Container:WaitForChild("Content")
local ContainerObjectValue = Instance.new("ObjectValue")
ContainerObjectValue.Name = "Container"
ContainerObjectValue.Value = Container
ContainerObjectValue.Parent = pluginRoot

local versionWarning = Container.VersionWarning

--------------------------------------------------------------------------------
-- Plugin Functions --
--------------------------------------------------------------------------------

-- Containers
local containers = {}
containers["elsCreator"] = require(Modules.elsCreator)
containers["elsCreator"].topBarButton.TextButton.Parent = Container.TopBar.CenterContainer
containers["rotators"] = require(Modules.rotators)
containers["rotators"].topBarButton.TextButton.Parent = Container.TopBar.CenterContainer
containers["faders"] = require(Modules.faders)
containers["faders"].topBarButton.TextButton.Parent = Container.TopBar.CenterContainer

containers["export"] = require(Modules.export)
containers["export"].topBarButton.TextButton.Parent = Container.TopBar.RightContainer
containers["export"].modules = containers
containers["loadSave"] = require(Modules.loadSave)
containers["loadSave"].topBarButton.TextButton.Parent = Container.TopBar.RightContainer
containers["loadSave"].modules = containers

local function hideContainers()
	for i,v in pairs(containers) do
		v.StopDisplay()
		v.topBarButton.setEnabled(false)
	end
end

local function enableContainer(container: table)
	hideContainers()
	container.Display(Container.Content)
	container.topBarButton.setEnabled(true)
end

-- Container Buttons
for i,v in pairs(containers) do
	v.topBarButton.TextButton.MouseButton1Click:Connect(function()
		enableContainer(v)
	end)
end

-- Handle Input
Container.InputBegan:Connect(function(input: InputObject)
	for i,v in pairs(containers) do
		if v["InputBegan"] then
			v.InputBegan(input)
		end
	end
end)

Container.InputChanged:Connect(function(input: InputObject)
	for i,v in pairs(containers) do
		if v["InputChanged"] then
			v.InputChanged(input)
		end
	end
end)

Container.InputEnded:Connect(function(input: InputObject)
	for i,v in pairs(containers) do
		if v["InputEnded"] then
			v.InputEnded(input)
		end
	end
end)

-- Version Check
local latestVersion = HttpService:RequestAsync({
	Url = "https://api.github.com/repos/Redon-Tech/Emergency-Vehicle-Creator/releases/latest",
	Method = "GET"
})

if latestVersion.Success then
	local latestVersionJSON = HttpService:JSONDecode(latestVersion.Body)
	if latestVersionJSON.tag_name ~= Plugin_Version and plugin:GetSetting("VersionWarning") ~= latestVersionJSON.tag_name then
		versionWarning.Text = `Plugin version out of date. Latest {latestVersionJSON.tag_name}, Current {Plugin_Version}. Click to dismiss warning.`
		versionWarning.Visible = true
		
		versionWarning.MouseButton1Click:Connect(function()
			versionWarning.Visible = false
			plugin:SetSetting("VersionWarning", latestVersionJSON.tag_name)
		end)
	end
else
	warn("[EVC]: Failed to check for latest version.")
end

-- Handle Theme Changes
-- local originalTheme = settings().Studio.Theme

-- settings().Studio.ThemeChanged:Connect(function()
-- 	if settings().Studio.Theme ~= originalTheme then
-- 		local newTheme = settings().Studio.Theme
-- 		for i,v in pairs(GUI:GetDescendants()) do
			
-- 		end
-- 	end
-- end)

--------------------------------------------------------------------------------
-- Plugin Starup --
--------------------------------------------------------------------------------

enableContainer(containers["elsCreator"])
Button.Click:Connect(function()
	GUI.Enabled = not GUI.Enabled
end)</string>
        </Properties>
      </Item>
      <Item class="Folder" referent="66">
        <Properties>
          <string name="Name">Modules</string>
        </Properties>
        <Item class="ModuleScript" referent="67">
          <Properties>
            <string name="Name">elsCreator</string>
            <string name="Source">--[[
	Redon Tech 2023-2024
	EVC V2
--]]

--------------------------------------------------------------------------------
-- Init --
--------------------------------------------------------------------------------

local RunService = game:GetService("RunService")
local pluginRoot = script.Parent.Parent.Parent
local elsCreator = {enabled = false, canExport = true, container = nil}

local colors = {
	[0] = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar),
	[1] = Color3.fromRGB(17, 99, 207),
	[2] = Color3.fromRGB(255, 61, 61),
	[3] = Color3.fromRGB(255, 230, 43),
	[4] = Color3.fromRGB(255, 255, 255),
	[5] = Color3.fromRGB(94, 225, 110),
	[6] = Color3.fromRGB(246, 114, 255),
}
local colorLabels = {
	[1] = "Blue",
	[2] = "Red",
	[3] = "Amber",
	[4] = "White",
	[5] = "Green",
	[6] = "Purple",
}
local color = 1
local mouseDown, mouse2Down, startingColumn = false, false, nil
local pause, locked = true, false
local coroutines = {}

--------------------------------------------------------------------------------
-- UI Setup --
--------------------------------------------------------------------------------

local Components = script.Parent.Parent:WaitForChild("Components")
elsCreator["topBarButton"] = require(Components:WaitForChild("topBarButton"))("elsCreator", 1, "ELS Creator", 0.104, true)
local elsCreatorComponents = Components:WaitForChild("elsCreator")
local reusedContent = Components:WaitForChild("reusedContent")
local confirmPrompt = require(Components:WaitForChild("popups"):WaitForChild("confirm"))

local controls = require(reusedContent:WaitForChild("controls"))()
local elsContainer = require(elsCreatorComponents:WaitForChild("container"))()

local pauseButton = require(reusedContent:WaitForChild("iconButton"))("Pause", 7, "rbxassetid://12758044104", "rbxassetid://12758044683")
local lockButton = require(reusedContent:WaitForChild("iconButton"))("Lock", 8, "rbxassetid://12758042236")
local resetButton = require(reusedContent:WaitForChild("iconButton"))("Reset", 9, "rbxassetid://12758045258")
pauseButton.Parent = controls
pauseButton:SetAttribute("Icon", pause)
lockButton.Parent = controls
lockButton:SetAttribute("Active", locked)
resetButton.Parent = controls

--------------------------------------------------------------------------------
-- Module Functions --
--------------------------------------------------------------------------------

local function setPause(value: boolean)
	pause = value
	pauseButton:SetAttribute("Icon", pause)

	for _,section in pairs(elsContainer:GetChildren()) do
		if section:IsA("Frame") then
			for _,header in pairs(section.ColumnHeaders:GetChildren()) do
				if header:IsA("Frame") and header.Name ~= "Buttons" then
					header.Top.TextBox.Visible = pause
					header.Top.BackgroundColor3 = colors[0]
					header.Top.Light.Visible = false
					header.Top.Light1.Visible = false
					header.Top.Light2.Visible = false
				end
			end
		end
	end
end

-- Color Setup
local function setColor(value: number)
	color = value
	for i,v in pairs(controls:GetChildren()) do
		if v:IsA("Frame") and v:FindFirstChild("Text") then
			if v.Name == tostring(value) then
				v.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Selected)
				v.Text.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Selected)
				v:SetAttribute("Active", true) -- Not remove the background color when the button is hovered
			else
				v.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button)
				v.Text.TextColor3 = if v.Name == "4" then settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText) else colors[tonumber(v.Name)]
				v:SetAttribute("Active", false)
			end
		end
	end
end

for i,v in pairs(colors) do
	if i ~= 0 then
		local color = require(reusedContent:WaitForChild("textButton"))(i, i, colorLabels[i], if i == 4 then settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText) else v)
		color.Parent = controls

		color.Text.MouseButton1Click:Connect(function()
			setColor(i)
		end)
	end
end
setColor(1)

-- Reset Counters Handler
local function resetCounters()
	setPause(true)
	pauseButton:SetAttribute("Icon", pause)

	for i,v in pairs(elsContainer:GetChildren()) do
		if v:IsA("Frame") then
			v:SetAttribute("Count", 1)
			v.IndicatorHolder.Indicator.Position = UDim2.new(0.5, 1, 0, -3)
		end
	end
end

-- Register Row
local function registerRow(row: Frame)
	local enter = nil
	row:SetAttribute("Color", 0)

	row:GetAttributeChangedSignal("Color"):Connect(function()
		row.BackgroundColor3 = colors[row:GetAttribute("Color")]
	end)

	row.MouseEnter:Connect(function()
		if mouseDown and ((startingColumn == nil or startingColumn == tonumber(row.Parent.Name)) or locked == false) then
			row:SetAttribute("Color", color)
			if startingColumn == nil then
				startingColumn = tonumber(row.Parent.Name)
			end
		elseif mouse2Down and ((startingColumn == nil or startingColumn == tonumber(row.Parent.Name)) or locked == false) then
			row:SetAttribute("Color", 0)
			if startingColumn == nil then
				startingColumn = tonumber(row.Parent.Name)
			end
		else
			enter = elsContainer.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					row:SetAttribute("Color", color)
					if startingColumn == nil then
						startingColumn = tonumber(row.Parent.Name)
					end
				elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
					row:SetAttribute("Color", 0)
					if startingColumn == nil then
						startingColumn = tonumber(row.Parent.Name)
					end
				end
			end)
		end
	end)

	row.MouseLeave:Connect(function()
		if enter then
			enter:Disconnect()
			enter = nil
		end
	end)
end

-- Register Column
local function registerColumn(column: number, section: Frame)
	local frame = section.Columns:WaitForChild(column)
	local frameHeader = section.ColumnHeaders:WaitForChild(column)
	local rows = #frame:GetChildren() - 1

	frameHeader.Top.TextBox.Visible = pause
	frameHeader.Top.TextBox.PlaceholderText = if section.LayoutOrder ~= 1 then `{section.LayoutOrder-1}Light{column}` else `Light{column}`

	if rows ~= section:GetAttribute("Rows") then
		if rows > section:GetAttribute("Rows") then
			for i,v in pairs(frame:GetChildren()) do
				if v:IsA("Frame") and v.LayoutOrder > elsContainer.Section1:GetAttribute("Rows") then
					v:Destroy()
				end
			end
		elseif rows &lt; section:GetAttribute("Rows") then
			for i = 1, section:GetAttribute("Rows")-rows do
				local row = require(elsCreatorComponents:WaitForChild("columnRow"))(i)
				row.Parent = frame
				registerRow(row)
			end
		end
	end

	local connection = section:GetAttributeChangedSignal("Count"):Connect(function()
		local color = frame:FindFirstChild(section:GetAttribute("Count")):GetAttribute("Color")
		frameHeader.Top.BackgroundColor3 = if color == 0 then colors[0] else Color3.new(1,1,1)
		local enabled = if color == 0 then false else true
		frameHeader.Top.Light.ImageColor3 = colors[color]
		frameHeader.Top.Light.Visible = enabled
		frameHeader.Top.Light1.ImageColor3 = colors[color]
		frameHeader.Top.Light1.Visible = enabled
		frameHeader.Top.Light2.ImageColor3 = colors[color]
		frameHeader.Top.Light2.Visible = enabled
	end)

	local connection2 = frameHeader.Top.TextBox.FocusLost:Connect(function(enterPressed)
		if enterPressed then
			if column == 1 and frameHeader.Top.TextBox.Text ~= nil and frameHeader.Top.TextBox.Text ~= "" and frameHeader.Top.TextBox.Text:match("%d+$") then
				local Pattern = frameHeader.Top.TextBox.Text:gsub("%d+$", "")

				for _,header in pairs(section.ColumnHeaders:GetChildren()) do
					if header:IsA("Frame") and header.Name ~= "Buttons" and (header.Top.TextBox.Text == nil or header.Top.TextBox.Text == "") then
						header.Top.TextBox.Text = `{Pattern}{header.LayoutOrder}`
					end
				end
			end

			if section.ColumnHeaders:FindFirstChild(column+1) then
				if section.ColumnHeaders:FindFirstChild(column+1).Top.TextBox.Text == nil or section.ColumnHeaders:FindFirstChild(column+1).Top.TextBox.Text == "" then
					section.ColumnHeaders:FindFirstChild(column+1).Top.TextBox:CaptureFocus()
					RunService.Heartbeat:Wait()
					section.ColumnHeaders:FindFirstChild(column+1).Top.TextBox.Text = ""
				end
			end
		end
	end)

	for i,v in pairs(frame:GetChildren()) do
		if v:IsA("Frame") then
			registerRow(v)
		end
	end

	frame.Destroying:Connect(function()
		connection:Disconnect()
		connection2:Disconnect()
	end)
end

-- Register Section
local function update(coro: table, section: number)
	local sectionFrame = elsContainer:WaitForChild(`Section{section}`)

	while task.wait(tonumber(sectionFrame.SectionControls.WaitTime.Text)) do
		if coro["run"] and pause == false and sectionFrame:GetAttribute("ConnectedTo") == nil then
			local lastCount = sectionFrame:GetAttribute("Count")
			if lastCount >= sectionFrame:GetAttribute("Rows") then
				sectionFrame:SetAttribute("Count", 1)
			else
				sectionFrame:SetAttribute("Count", lastCount+1)
			end

			sectionFrame.IndicatorHolder.Indicator.Position = UDim2.new(0.5, 1, 0, ((sectionFrame:GetAttribute("Count")-1)*20)-3)
		elseif coro["run"] == false then
			coroutines[section] = nil
			for i,v in pairs(elsContainer:GetChildren()) do
				if v:IsA("Frame") and v:GetAttribute("ConnectedTo") == section then
					v:SetAttribute("ConnectedTo", nil)
				end
			end
			break
		end
	end
end

local function registerSection(section: number)
	local sectionFrame = elsContainer:WaitForChild(`Section{section}`)
	local connections = {}
	local connectedTo = nil
	
	sectionFrame:SetAttribute("Rows", 20)
	
	-- Handle Lighting Functions
	connections[#connections+1] = sectionFrame:GetAttributeChangedSignal("ConnectedTo"):Connect(function()
		if connectedTo then connectedTo:Disconnect() connectedTo = nil end

		if sectionFrame:GetAttribute("ConnectedTo") then
			connectedTo = elsContainer:WaitForChild(`Section{sectionFrame:GetAttribute("ConnectedTo")}`):GetAttributeChangedSignal("Count"):Connect(function()
				local lastCount = sectionFrame:GetAttribute("Count")
				if lastCount >= sectionFrame:GetAttribute("Rows") then
					sectionFrame:SetAttribute("Count", 1)
				else
					sectionFrame:SetAttribute("Count", lastCount+1)
				end

				sectionFrame.IndicatorHolder.Indicator.Position = UDim2.new(0.5, 1, 0, ((sectionFrame:GetAttribute("Count")-1)*20)-3)
			end)
		else
			for i,v in pairs(coroutines) do
				if v.waitTime == tonumber(sectionFrame.SectionControls.WaitTime.Text) and i ~= section then
					sectionFrame:SetAttribute("ConnectedTo", i)
					return
				end
			end
			sectionFrame:SetAttribute("ConnectedTo", nil)
		end
	end)

	connections[#connections+1] = sectionFrame.SectionControls.WaitTime.Focused:Connect(function()
		setPause(true)
		resetCounters()
	end)

	connections[#connections+1] = sectionFrame.SectionControls.WaitTime.FocusLost:Connect(function()
		local waitTime = tonumber(sectionFrame.SectionControls.WaitTime.Text)
		if waitTime >= 0.001 and waitTime &lt;= 10 then
			setPause(false)
			resetCounters()
		elseif waitTime &lt; 0.001 then
			sectionFrame.SectionControls.WaitTime.Text = "0.001"
			setPause(false)
			resetCounters()
		elseif waitTime > 10 then
			sectionFrame.SectionControls.WaitTime.Text = "10"
			setPause(false)
			resetCounters()
		end

		coroutines[section].waitTime = tonumber(sectionFrame.SectionControls.WaitTime.Text)

		for i,v in pairs(elsContainer:GetChildren()) do
			if v:IsA("Frame") and v:GetAttribute("ConnectedTo") == section then
				if v.SectionControls.WaitTime.Text ~= sectionFrame.SectionControls.WaitTime.Text then
					v:SetAttribute("ConnectedTo", nil)
				end
			end
		end

		for i,v in pairs(coroutines) do
			if v.waitTime == tonumber(sectionFrame.SectionControls.WaitTime.Text) and i ~= section then
				sectionFrame:SetAttribute("ConnectedTo", i)
				return
			end
		end
		sectionFrame:SetAttribute("ConnectedTo", nil)
	end)

	sectionFrame:SetAttribute("Count", 1)
	coroutines[section] = {
		run = true,
		waitTime = tonumber(sectionFrame.SectionControls.WaitTime.Text),
		coro = coroutine.create(update)
	}

	for i,v in pairs(coroutines) do
		if v.waitTime == tonumber(sectionFrame.SectionControls.WaitTime.Text) and i ~= section then
			sectionFrame:SetAttribute("ConnectedTo", i)
		end
	end
	coroutine.resume(coroutines[section].coro, coroutines[section], section)

	-- Handle Controls

	for i,v in pairs(sectionFrame.Columns:GetChildren()) do
		if v.Name ~= "Buttons" and v:IsA("Frame") then
			registerColumn(tonumber(v.Name), sectionFrame)
		end
	end
	
	if section == 1 then
		sectionFrame.SectionControls.RemoveButton.ImageTransparency = 1
	end
	
	local function addVisible()
		if section ~= #elsContainer:GetChildren() - 2 then
			sectionFrame.SectionControls.Add.Visible = false
			sectionFrame.SectionControls.RemoveButton.Visible = false
		else
			sectionFrame.SectionControls.Add.Visible = true
			sectionFrame.SectionControls.RemoveButton.Visible = true
		end
	end
	addVisible()
	connections[#connections+1] = elsContainer.ChildAdded:Connect(addVisible)
	connections[#connections+1] = elsContainer.ChildRemoved:Connect(addVisible)
	
	local function removeRowVisible()
		if sectionFrame:GetAttribute("Rows") == 1 then
			sectionFrame.Columns.Buttons.Controls.RemoveHolder.Visible = false
		else
			sectionFrame.Columns.Buttons.Controls.RemoveHolder.Visible = true
		end

		if sectionFrame:GetAttribute("Count") > sectionFrame:GetAttribute("Rows") then
			sectionFrame:SetAttribute("Count", sectionFrame:GetAttribute("Rows"))
			sectionFrame.IndicatorHolder.Indicator.Position = UDim2.new(0.5, 1, 0, ((sectionFrame:GetAttribute("Count")-1)*20)-3)
		end
	end
	removeRowVisible()
	connections[#connections+1] = sectionFrame:GetAttributeChangedSignal("Rows"):Connect(removeRowVisible)

	local function removeColumnVisible()
		if #sectionFrame.Columns:GetChildren() == 3 then
			sectionFrame.ColumnHeaders.Buttons.Controls.RemoveHolder.Visible = false
		else
			sectionFrame.ColumnHeaders.Buttons.Controls.RemoveHolder.Visible = true
		end
	end
	removeColumnVisible()
	connections[#connections+1] = sectionFrame.Columns.ChildAdded:Connect(removeColumnVisible)
	connections[#connections+1] = sectionFrame.Columns.ChildRemoved:Connect(removeColumnVisible)
	
	-- Add/Remove Row
	connections[#connections+1] = sectionFrame.Columns.Buttons.Controls.AddHolder.Add.MouseButton1Click:Connect(function()
		for i,v in pairs(sectionFrame.Columns:GetChildren()) do
			if v:IsA("Frame") and v.Name ~= "Buttons" then
				local row = require(elsCreatorComponents:WaitForChild("columnRow"))(sectionFrame:GetAttribute("Rows")+1)
				row.Parent = v
				registerRow(row)
			elseif v:IsA("Frame") and v.Name == "Buttons" then
				local row = require(elsCreatorComponents:WaitForChild("columnRow"))(sectionFrame:GetAttribute("Rows"))
				row.BackgroundTransparency = 1
				row.UICorner:Destroy()
				row.Parent = v
			end
		end
		sectionFrame:SetAttribute("Rows", sectionFrame:GetAttribute("Rows")+1)
	end)

	connections[#connections+1] = sectionFrame.Columns.Buttons.Controls.RemoveHolder.RemoveButton.MouseButton1Click:Connect(function()
		if elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency ~= 1 then return end
		elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
		confirmPrompt("Are you sure you want to remove this row? &lt;b>Any unsaved progress will be lost!&lt;/b>", function(confirm)
			if confirm then
				if sectionFrame:GetAttribute("Rows") == 1 then return end
				for i,v in pairs(sectionFrame.Columns:GetChildren()) do
					if v:IsA("Frame") and v.Name ~= "Buttons" then
						v:WaitForChild(sectionFrame:GetAttribute("Rows")):Destroy()
						elseif v:IsA("Frame") and v.Name == "Buttons" then
							v:WaitForChild(sectionFrame:GetAttribute("Rows")-1):Destroy()
						end
					end
				end
				sectionFrame:SetAttribute("Rows", sectionFrame:GetAttribute("Rows")-1)
			elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
		end).Parent = elsCreator.container.Parent.PopUps
	end)

	-- Add/Remove Columns
	connections[#connections+1] = sectionFrame.ColumnHeaders.Buttons.Controls.AddHolder.Add.MouseButton1Click:Connect(function()
		local column = require(elsCreatorComponents:WaitForChild("column"))(#sectionFrame.Columns:GetChildren()-1, sectionFrame:GetAttribute("Rows"))
		column.Parent = sectionFrame.Columns
		local columnHeader = require(elsCreatorComponents:WaitForChild("columnHeader"))(tonumber(column.Name))
		columnHeader.Parent = sectionFrame.ColumnHeaders
		sectionFrame.Size += UDim2.new(0, 37, 0, 0)
		registerColumn(tonumber(column.Name), sectionFrame)
	end)

	connections[#connections+1] = sectionFrame.ColumnHeaders.Buttons.Controls.RemoveHolder.RemoveButton.MouseButton1Click:Connect(function()
		if elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency ~= 1 then return end
		elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
		confirmPrompt("Are you sure you want to remove this column? &lt;b>Any unsaved progress will be lost!&lt;/b>", function(confirm)
			elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
			if confirm then
				if #sectionFrame.Columns:GetChildren() == 3 then return end
				sectionFrame.Columns:WaitForChild(#sectionFrame.Columns:GetChildren()-2):Destroy()
				sectionFrame.ColumnHeaders:WaitForChild(#sectionFrame.ColumnHeaders:GetChildren()-2):Destroy()
				sectionFrame.Size -= UDim2.new(0, 37, 0, 0)
			end
		end).Parent = elsCreator.container.Parent.PopUps
	end)

	-- Add/Remove Section
	connections[#connections+1] = sectionFrame.SectionControls.Add.MouseButton1Click:Connect(function()
		resetCounters()
		require(elsCreatorComponents:WaitForChild("section"))(section+1).Parent = elsContainer
		registerSection(section+1)
	end)

	connections[#connections+1] = sectionFrame.SectionControls.RemoveButton.MouseButton1Click:Connect(function()
		if section == 1 then return end
		if elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency ~= 1 then return end
		resetCounters()
		elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
		confirmPrompt("Are you sure you want to remove this section? &lt;b>Any unsaved progress will be lost!&lt;/b>", function(confirm)
			elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
			if confirm then
				sectionFrame:Destroy()
			end
		end).Parent = elsCreator.container.Parent.PopUps
	end)

	connections[#connections+1] = sectionFrame.Destroying:Connect(function()
		coroutines[section].run = false
		if connectedTo then connectedTo:Disconnect() connectedTo = nil end
		for i,v in pairs(connections) do
			v:Disconnect()
		end
	end)
end

registerSection(1)

-- Reset Handler

local function reset()
	resetCounters()
	for i,v in pairs(elsContainer:GetChildren()) do
		if v:IsA("Frame") and v.Name ~= "Section1" then
			v:Destroy()
		end
	end

	for i,v in pairs(elsContainer.Section1.Columns:GetChildren()) do
		if v:IsA("Frame") and (v.Name ~= "1" and v.Name ~= "Buttons") then
			v:Destroy()
		end
	end
	for i,v in pairs(elsContainer.Section1.ColumnHeaders:GetChildren()) do
		if v:IsA("Frame") and (v.Name ~= "1" and v.Name ~= "Buttons") then
			v:Destroy()
		end
	end

	elsContainer.Section1.Size = UDim2.fromOffset(235, 550)

	elsContainer.Section1.SectionControls.WaitTime.Text = "0.1"
	elsContainer.Section1:SetAttribute("Rows", 20)
	do
		local frame = elsContainer.Section1.Columns["1"]
		local rows = #frame:GetChildren() - 1

		if rows ~= elsContainer.Section1:GetAttribute("Rows") then
			-- if rows > elsContainer.Section1:GetAttribute("Rows") then
			-- 	for i,v in pairs(frame:GetChildren()) do
			-- 		if v:IsA("Frame") and v.LayoutOrder > elsContainer.Section1:GetAttribute("Rows") then
			-- 			v:Destroy()
			-- 		end
			-- 	end
			-- elseif rows &lt; elsContainer.Section1:GetAttribute("Rows") then
			-- 	for i = 1, elsContainer.Section1:GetAttribute("Rows")-rows do
			-- 		local row = require(elsCreatorComponents:WaitForChild("columnRow"))(i)
			-- 		row.Parent = frame
			-- 		registerRow(row)
			-- 	end
			-- end
			for i,v in pairs(frame:GetChildren()) do
				if v:IsA("Frame") then
					v:Destroy()
				end
			end
			
			for i = 1, elsContainer.Section1:GetAttribute("Rows") do
				local row = require(elsCreatorComponents:WaitForChild("columnRow"))(i)
				row.Parent = frame
				registerRow(row)
			end
		end

		for i,v in pairs(frame:GetChildren()) do
			if v:IsA("Frame") and v.Name ~= "Buttons" then
				v:SetAttribute("Color", 0)
			end
		end
	end
	do
		local frame = elsContainer.Section1.Columns["Buttons"]
		local rows = #frame:GetChildren() - 2

		if rows ~= elsContainer.Section1:GetAttribute("Rows") then
			-- if rows > elsContainer.Section1:GetAttribute("Rows") then
			-- 	for i,v in pairs(frame:GetChildren()) do
			-- 		if v:IsA("Frame") and v.LayoutOrder + 1 > elsContainer.Section1:GetAttribute("Rows") and v.Name ~= "Controls" then
			-- 			v:Destroy()
			-- 		end
			-- 	end
			-- elseif rows &lt; elsContainer.Section1:GetAttribute("Rows") then
			-- 	for i = 1, elsContainer.Section1:GetAttribute("Rows")-rows do
			-- 		local row = require(elsCreatorComponents:WaitForChild("columnRow"))(i)
			-- 		row.Parent = frame
			-- 		row.BackgroundTransparency = 1
			-- 		row.UICorner:Destroy()
			-- 		registerRow(row)
			-- 	end
			-- end
			for i,v in pairs(frame:GetChildren()) do
				if v:IsA("Frame") and v.Name ~= "Controls" then
					v:Destroy()
				end
			end
			
			for i = 1, elsContainer.Section1:GetAttribute("Rows")-1 do
				local row = require(elsCreatorComponents:WaitForChild("columnRow"))(i)
				row.Parent = frame
				row.BackgroundTransparency = 1
				row.UICorner:Destroy()
			end
		end
	end
end

local function confirmReset()
	if elsCreator.container == nil then return end
	if elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency ~= 1 then return end
	elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
	confirmPrompt("Are you sure you want to reset? \n&lt;b>Any unsaved progress will be lost!&lt;/b>", function(confirm)
		if confirm then
			reset()
		end
		elsCreator.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
	end).Parent = elsCreator.container.Parent.PopUps
end

resetButton.Image.MouseButton1Click:Connect(function()
	confirmReset()
end)

elsCreator.loadFromTable = function(data: {number:{string:any}})
	reset()

	task.wait(0.25)

	-- for section,sectionData in pairs(data) do
	for section=1,#data do
		local sectionData = data[section]
		if typeof(sectionData["WaitTime"]) == "number" and typeof(sectionData["Columns"]) == "table" and typeof(sectionData["Columns"][1]) == "table" then
			local sectionFrame = elsContainer.Section1
			if section ~= 1 then
				sectionFrame = require(elsCreatorComponents:WaitForChild("section"))(section)
				sectionFrame.Parent = elsContainer
				registerSection(section)
			end

			sectionFrame.SectionControls.WaitTime.Text = sectionData.WaitTime

			-- for column,columnData in pairs(sectionData.Columns) do
			local numberOfRows = 0
			for column=1,#sectionData.Columns do
				local columnData = sectionData.Columns[column]
				if typeof(columnData) == "table" and typeof(columnData["Name"]) == "string" and typeof(columnData["Rows"]) == "table" then
					local columnFrame = sectionFrame.Columns:FindFirstChild(tostring(column))
					local columnHeader = sectionFrame.ColumnHeaders:FindFirstChild(tostring(column))
					numberOfRows = rawlen(columnData["Rows"])
					if columnFrame == nil then
						columnFrame = require(elsCreatorComponents:WaitForChild("column"))(column, numberOfRows)
						columnFrame.Parent = sectionFrame.Columns
						columnHeader = require(elsCreatorComponents:WaitForChild("columnHeader"))(column)
						columnHeader.Parent = sectionFrame.ColumnHeaders
						columnHeader.Top.TextBox.Text = columnData["Name"]
						sectionFrame.Size += UDim2.new(0, 37, 0, 0)
						registerColumn(column, sectionFrame)
					else
						columnHeader.Top.TextBox.Text = columnData["Name"]
					end

					-- for row,rowData in pairs(columnData["Rows"]) do
					sectionFrame:SetAttribute("Rows", numberOfRows)
					for row=1,numberOfRows do
						task.spawn(function()
							local rowData = columnData["Rows"][row]
							if typeof(rowData) == "number" then
								local rowFrame = columnFrame:FindFirstChild(tostring(row))
								if rowFrame == nil then
									rowFrame = require(elsCreatorComponents:WaitForChild("columnRow"))(row)
									rowFrame.Parent = columnFrame
									registerRow(rowFrame)
								end
								RunService.Heartbeat:Wait()
								rowFrame:SetAttribute("Color", rowData)
							end
						end)
					end

					for _,row in pairs(columnFrame:GetChildren()) do
						if row:IsA("Frame") and row.LayoutOrder > numberOfRows then
							row:Destroy()
						end
					end
				end
			end

			if #sectionFrame.Columns.Buttons:GetChildren()-1 > numberOfRows then
				for _,row in pairs(sectionFrame.Columns.Buttons:GetChildren()) do
					if row:IsA("Frame") and row.Name ~= "Controls" and row.LayoutOrder+1 > numberOfRows then
						row:Destroy()
					end
				end
			elseif #sectionFrame.Columns.Buttons:GetChildren()-1 &lt; numberOfRows then
				for i = 1, numberOfRows-#sectionFrame.Columns.Buttons:GetChildren()+1 do
					local row = require(elsCreatorComponents:WaitForChild("columnRow"))(#sectionFrame.Columns.Buttons:GetChildren()-1)
					row.Parent = sectionFrame.Columns.Buttons
					row.BackgroundTransparency = 1
					row.UICorner:Destroy()
					registerRow(row)
				end
			end
		end
	end
end

elsCreator.toTable = function()
	local data = {}

	for _,section in pairs(elsContainer:GetChildren()) do
		if section:IsA("Frame") and section:FindFirstChild("SectionControls") then
			local sectionData = {
				WaitTime = tonumber(section.SectionControls.WaitTime.Text),
				Columns = {}
			}

			for _,column in pairs(section.Columns:GetChildren()) do
				if column:IsA("Frame") and column.Name ~= "Buttons" then
					local columnData = {
						Name = section.ColumnHeaders[column.LayoutOrder].Top.TextBox.Text,
						Rows = {}
					}

					for _,row in pairs(column:GetChildren()) do
						if row:IsA("Frame") and row.Name ~= "Buttons" then
							-- table.insert(columnData["Rows"], v3:GetAttribute("Color"))
							columnData["Rows"][row.LayoutOrder] = row:GetAttribute("Color")
						end
					end

					-- table.insert(sectionData["Columns"], columnData)
					sectionData["Columns"][column.LayoutOrder] = columnData
				end
			end

			-- table.insert(data, sectionData)
			data[section.LayoutOrder] = sectionData
		end
	end

	return data
end

-- Input Handler
local colorChanges = {
	[Enum.KeyCode.One] = 1,
	[Enum.KeyCode.Two] = 2,
	[Enum.KeyCode.Three] = 3,
	[Enum.KeyCode.Four] = 4,
	[Enum.KeyCode.Five] = 5,
	[Enum.KeyCode.Six] = 6,
	-- NumPad
	[Enum.KeyCode.KeypadOne] = 1,
	[Enum.KeyCode.KeypadTwo] = 2,
	[Enum.KeyCode.KeypadThree] = 3,
	[Enum.KeyCode.KeypadFour] = 4,
	[Enum.KeyCode.KeypadFive] = 5,
	[Enum.KeyCode.KeypadSix] = 6,
	-- Letters
	[Enum.KeyCode.Q] = 1,
	[Enum.KeyCode.W] = 2,
	[Enum.KeyCode.E] = 3,
	[Enum.KeyCode.R] = 4,
	[Enum.KeyCode.T] = 5,
	[Enum.KeyCode.Y] = 6,
}
elsCreator.InputBegan = function(input: InputObject)
	if elsCreator.enabled == false then return end

	if colorChanges[input.KeyCode] then
		setColor(colorChanges[input.KeyCode])
	elseif input.KeyCode == Enum.KeyCode.R then
		confirmReset()
	elseif input.KeyCode == Enum.KeyCode.P then
		setPause(not pause)
		pauseButton:SetAttribute("Icon", pause)
	end

	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		mouseDown = true
		mouse2Down = false
	elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
		mouseDown = false
		mouse2Down = true
	end
end

pauseButton.Image.MouseButton1Click:Connect(function()
	setPause(not pause)
	pauseButton:SetAttribute("Icon", pause)
end)

lockButton.Image.MouseButton1Click:Connect(function()
	locked = not locked
	lockButton:SetAttribute("Active", locked)
end)

elsCreator.InputEnded = function(input: InputObject)
	if elsCreator.enabled == false then return end

	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		mouseDown = false
		mouse2Down = false
		startingColumn = nil
	elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
		mouseDown = false
		mouse2Down = false
		startingColumn = nil
	end
end

elsCreator.Display = function(container: Frame)
	controls.Parent = container
	elsContainer.Parent = container
	elsCreator.container = container
	elsCreator.enabled = true
end

elsCreator.StopDisplay = function()
	setPause(true)

	controls.Parent = nil
	elsContainer.Parent = nil
	elsCreator.container = nil
	elsCreator.enabled = false
end

pluginRoot.Destroying:Connect(function()
	elsCreator.enabled = false
end)

return elsCreator</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="68">
          <Properties>
            <string name="Name">export</string>
            <string name="Source">--[[
	Redon Tech 2023-2024
	EVC V2
--]]

--------------------------------------------------------------------------------
-- Init --
--------------------------------------------------------------------------------

local StudioService = game:GetService("StudioService")
local Selection = game:GetService("Selection")
local pluginRoot = script.Parent.Parent.Parent

local export = {enabled = false, canExport = false, container = nil}

local chassisExportConnections = {}
local chassisVersion = require(pluginRoot.src.ExportTemplates.Settings).PluginVersion
local settingsConverter = require(pluginRoot.src.Utils.settingsConverter)

--------------------------------------------------------------------------------
-- UI Setup --
--------------------------------------------------------------------------------

local Components = script.Parent.Parent:WaitForChild("Components")
export["topBarButton"] = require(Components:WaitForChild("topBarButton"))("export", 2, "Export", 0.104, false)

local exportComponents = Components:WaitForChild("export")
local reusedContent = Components:WaitForChild("reusedContent")
local confirmPrompt = require(Components:WaitForChild("popups"):WaitForChild("confirm"))

local exportContainer = require(exportComponents:WaitForChild("container"))()

--------------------------------------------------------------------------------
-- Module Functions --
--------------------------------------------------------------------------------
-- export.container.Parent.PopUps.BackgroundTransparency = 0.5
-- confirmPrompt("Are you sure you want to load this save, this will overwrite any unsaved data?\n&lt;b>This can not be undone&lt;/b>", function(confirm)
-- 	export.container.Parent.PopUps.BackgroundTransparency = 1
-- 	if confirm then
-- 	end
-- end).Parent = export.container.Parent.PopUps

local function resetChassisExport()
	for _, connection in pairs(chassisExportConnections) do
		connection:Disconnect()
	end

	for _,v in pairs(exportContainer.ChassisPluginExports.FunctionsHolder:GetChildren()) do
		if v:IsA("TextButton") then
			v:Destroy()
		end
	end

	exportContainer.Selection.Visible = false
	exportContainer.ChassisPluginExports.Visible = false
	exportContainer.SelectExportOption.Visible = true
end

local function chassisExport(model: Model, isAG: true)
	local installedAsAG = false
	local function normalInstall()
		local EVCPlugin_Client = Instance.new("LocalScript")
		EVCPlugin_Client.Name = "EVCPlugin_Client"
		EVCPlugin_Client.Source = pluginRoot.src.ExportTemplates.EVCPlugin_Client.Source
		EVCPlugin_Client.Parent = model["A-Chassis Tune"].Plugins
		local EVCRemote = Instance.new("RemoteEvent")
		EVCRemote.Name = "EVCRemote"
		EVCRemote.Parent = EVCPlugin_Client
		local EVCPlugin = Instance.new("Script")
		EVCPlugin.Name = "EVCPlugin"
		EVCPlugin.Source = pluginRoot.src.ExportTemplates.EVCPlugin.Source
		EVCPlugin.Parent = EVCRemote
		EVCPlugin.Enabled = false
		local Settings = pluginRoot.src.ExportTemplates.Settings:Clone()
		Settings.Parent = EVCRemote

		if model:FindFirstChild("Body") then
			if model.Body:FindFirstChild("Lightbar") == nil then
				local Lightbar = Instance.new("Model")
				Lightbar.Name = "Lightbar"
				Lightbar.Parent = model.Body
			end
			if model.Body.Lightbar:FindFirstChild("ModuleStore") == nil then
				local ModuleStore = Instance.new("Folder")
				ModuleStore.Name = "ModuleStore"
				ModuleStore.Parent = model.Body.Lightbar
				local Stages = Instance.new("Folder")
				Stages.Name = "Stages"
				Stages.Parent = ModuleStore
				local Traffic_Advisor = Instance.new("Folder")
				Traffic_Advisor.Name = "Traffic_Advisor"
				Traffic_Advisor.Parent = ModuleStore
			end
		end
	end
	local function agInstall()
		if model.Body.ELS:FindFirstChild("PTRNS") then
			model.Body.ELS.PTRNS:Destroy()
		end

		local PTRNS = Instance.new("Folder")
		PTRNS.Name = "PTRNS"
		PTRNS.Parent = model.Body.ELS
		local ELSRunning = Instance.new("BoolValue")
		ELSRunning.Name = "ELSRunning"
		ELSRunning.Value = false
		ELSRunning.Parent = PTRNS
		local PatternNumber = Instance.new("IntValue")
		PatternNumber.Name = "PatternNumber"
		PatternNumber.Value = 0
		PatternNumber.Parent = PTRNS
		local TARunning = Instance.new("BoolValue")
		TARunning.Name = "TARunning"
		TARunning.Value = false
		TARunning.Parent = PTRNS
		local TAPatternNumber = Instance.new("IntValue")
		TAPatternNumber.Name = "TAPatternNumber"
		TAPatternNumber.Value = 0
		TAPatternNumber.Parent = PTRNS

		local EVCPlugin = Instance.new("Script")
		EVCPlugin.Name = "EVCPlugin_AG"
		EVCPlugin.Source = pluginRoot.src.ExportTemplates.EVCPlugin_AG.Source
		EVCPlugin.Parent = PTRNS
		local Settings = pluginRoot.src.ExportTemplates.Settings:Clone()
		Settings.Parent = PTRNS

		if model.Body.ELS:FindFirstChild("ModuleStore") == nil then
			local ModuleStore = Instance.new("Folder")
			ModuleStore.Name = "ModuleStore"
			ModuleStore.Parent = model.Body.ELS
			local Stages = Instance.new("Folder")
			Stages.Name = "Stages"
			Stages.Parent = ModuleStore
			for i=1,5 do
				local Pattern = Instance.new("Folder")
				Pattern.Name = "Pattern"..i
				Pattern.Parent = Stages
			end
			local Traffic_Advisor = Instance.new("Folder")
			Traffic_Advisor.Name = "Traffic_Advisor"
			Traffic_Advisor.Parent = ModuleStore
			for i=1,5 do
				local Pattern = Instance.new("Folder")
				Pattern.Name = "Pattern"..i
				Pattern.Parent = Traffic_Advisor
			end
		end
	end
	local function installPlugin()
		if isAG then
			export.container.Parent.PopUps.BackgroundTransparency = 0.5
			confirmPrompt("Would you like to use the AG-Chassis plugin instead of the regular plugin?", function(confirm)
				export.container.Parent.PopUps.BackgroundTransparency = 1
				if confirm then
					installedAsAG = true
					agInstall()
				else
					installedAsAG = false
					normalInstall()
				end
			end).Parent = export.container.Parent.PopUps
			repeat
				task.wait(.1)
			until export.container.Parent.PopUps.BackgroundTransparency == 1
		else
			export.container.Parent.PopUps.BackgroundTransparency = 1
			normalInstall()
		end
	end

	if model["A-Chassis Tune"].Plugins:FindFirstChild("EVCPlugin_Client") then
		local currentSettings = require(model["A-Chassis Tune"].Plugins.EVCPlugin_Client.EVCRemote:WaitForChild("Settings"))
		local ver = currentSettings.PluginVersion
		local numberstring = string.gsub(ver, "%.", "")

		if tonumber(numberstring) &lt; 200 then
			export.container.Parent.PopUps.BackgroundTransparency = 0.5
			confirmPrompt("The currently installed plugin on this chassis is still on version 1.\nWould you like to replace it with version 2?\n&lt;b>Settings will be overwritten&lt;/b>", function(confirm)
				if confirm then
					model["A-Chassis Tune"].Plugins.EVCPlugin_Client:Destroy()
					installPlugin()
				else
					export.container.Parent.PopUps.BackgroundTransparency = 1
				end
			end).Parent = export.container.Parent.PopUps
			repeat
				task.wait(.1)
			until export.container.Parent.PopUps.BackgroundTransparency == 1
		end
	elseif model.Body:FindFirstChild("ELS") and model.Body.ELS:FindFirstChild("PTRNS") and model.Body.ELS.PTRNS:FindFirstChild("Settings") then
		local currentSettings = require(model.Body.ELS.PTRNS:WaitForChild("Settings"))
		-- print(currentSettings.PluginVersion)
		local ver = currentSettings.PluginVersion
		local numberstring = string.gsub(ver, "%.", "")

		-- print(tonumber(numberstring))
		if tonumber(numberstring) &lt; 200 then
			export.container.Parent.PopUps.BackgroundTransparency = 0.5
			confirmPrompt("The currently installed plugin on this chassis is still on version 1.\nWould you like to replace it with version 2?\n&lt;b>Settings will be overwritten&lt;/b>", function(confirm)
				if confirm then
					model.Body.ELS.PTRNS:Destroy()
					installPlugin()
				else
					export.container.Parent.PopUps.BackgroundTransparency = 1
				end
			end).Parent = export.container.Parent.PopUps
			repeat
				task.wait(.1)
			until export.container.Parent.PopUps.BackgroundTransparency == 1
		else
			installedAsAG = true
		end
	else
		export.container.Parent.PopUps.BackgroundTransparency = 0.5
		confirmPrompt("There is no installed plugin on this vehicle.\nWould you like to automatically install it?", function(confirm)
			if confirm then
				installPlugin()
			else
				export.container.Parent.PopUps.BackgroundTransparency = 1
			end
		end).Parent = export.container.Parent.PopUps
		repeat
			task.wait(.1)
		until export.container.Parent.PopUps.BackgroundTransparency == 1
	end

	local pluginSettings = nil
	local lightbar = nil
	if installedAsAG then
		pluginSettings = require(model.Body.ELS.PTRNS:WaitForChild("Settings"))
		lightbar = model.Body.ELS
	else
		pluginSettings = require(model["A-Chassis Tune"].Plugins.EVCPlugin_Client.EVCRemote:WaitForChild("Settings"))
		lightbar = model.Body[pluginSettings.LightbarName]
	end

	if pluginSettings.PluginVersion ~= chassisVersion then
		export.container.Parent.PopUps.BackgroundTransparency = 0.5
		confirmPrompt("The currently installed plugin on this chassis is out of date.\nWould you like to update it?", function(confirm)
			if confirm then
				if installedAsAG then
					local originalSettings = model.Body.ELS.PTRNS.Settings
					local newSettings = settingsConverter.convert(originalSettings)
					model.Body.ELS.PTRNS:Destroy()
					agInstall()
					model.Body.ELS.PTRNS.Settings:Destroy()
					newSettings.Parent = model.Body.ELS.PTRNS
					newSettings.Name = "Settings"
					export.container.Parent.PopUps.BackgroundTransparency = 1
				else
					local originalSettings = model["A-Chassis Tune"].Plugins.EVCPlugin_Client.EVCRemote.Settings
					local newSettings = settingsConverter.convert(originalSettings)
					model["A-Chassis Tune"].Plugins.EVCPlugin_Client:Destroy()
					normalInstall()
					model["A-Chassis Tune"].Plugins.EVCPlugin_Client.EVCRemote.Settings:Destroy()
					newSettings.Parent = model["A-Chassis Tune"].Plugins.EVCPlugin_Client.EVCRemote
					newSettings.Name = "Settings"
					export.container.Parent.PopUps.BackgroundTransparency = 1
				end
			else
				export.container.Parent.PopUps.BackgroundTransparency = 1
			end
		end).Parent = export.container.Parent.PopUps
		repeat
			task.wait(.1)
		until export.container.Parent.PopUps.BackgroundTransparency == 1
	end

	local function exportToPattern(folder: Folder, weight: number)
		local data = {}

		for module,moduleData in pairs(export.modules) do
			if typeof(moduleData["toTable"]) == "function" then
				data[module] = moduleData["toTable"]()
			end
		end

		local sectionsDevidedByWaitTimes = {}
		local firstWaitTime = nil

		if data["elsCreator"] then
			for sectionNumber,sectionData in pairs(data.elsCreator) do
				if sectionsDevidedByWaitTimes[sectionNumber] == nil then
					sectionsDevidedByWaitTimes[sectionNumber] = {waitTime = sectionData.WaitTime, elsCreator = {}, rotators = {}, faders = {}}
				end

				-- table.insert(sectionsDevidedByWaitTimes[sectionData.WaitTime].elsCreator, sectionData)
				sectionsDevidedByWaitTimes[sectionNumber].elsCreator[sectionNumber] = sectionData
				if firstWaitTime == nil then
					firstWaitTime = sectionNumber
				end
			end
		else
			sectionsDevidedByWaitTimes[1] = {elsCreator = {}, rotators = {}, faders = {}}
			if firstWaitTime == nil then
				firstWaitTime = 1
			end
		end

		if data["rotators"] then
			for sectionNumber,sectionData in pairs(data.rotators) do
				sectionsDevidedByWaitTimes[firstWaitTime].rotators[sectionNumber] = sectionData
			end
		end

		if data["faders"] then
			for sectionNumber,sectionData in pairs(data.faders) do
				-- table.insert(section.faders, sectionData)
				sectionsDevidedByWaitTimes[firstWaitTime].faders[sectionNumber] = sectionData
			end
		end
		-- print(data, sectionsDevidedByWaitTimes)
		for i,v in pairs(sectionsDevidedByWaitTimes) do
			local module = pluginRoot.src.ExportTemplates.Template:Clone()
			module.Name = `EVCExport|{DateTime:now():FormatLocalTime("lll", "en-US")}`

			local lightsString = ""
			local rotatorsString = ""
			local fadersString = ""

			for i,sections in pairs(v.elsCreator) do
				for columnNumber=1,rawlen(sections.Columns) do
					local columnData = sections.Columns[columnNumber]
					local name = columnData.Name
					if name == "" then name = `{i}Light{columnNumber}` end
					lightsString ..= `\n\t["{name}"] = `.."{\n\t\t"
					for rowNumber=1,#columnData.Rows do
						local rowData = columnData.Rows[rowNumber]
						lightsString ..= `{rowData},`
					end
					lightsString ..= "\n\t},"
				end
			end

			for i,sections in pairs(v.rotators) do
				if sections.Angles[1].Color ~= nil and sections.Angles[1].Angle ~= nil and sections.Angles[1].Velocity ~= nil and sections.Name ~= nil then
					local name = sections.Name
					if name == "" then name = `Rotator{i}` end
					rotatorsString ..= `\n\t["{name}"] = `.."{"
					for angleNumber=1,rawlen(sections.Angles) do
						local angleData = sections.Angles[angleNumber]
						if angleData.Color ~= nil or angleData.Angle ~= nil or angleData.Velocity ~= nil then
							rotatorsString ..= "\n\t\t["..angleNumber.."] = {\n\t\t\t"
							rotatorsString ..= `Color = {angleData.Color},\n\t\t\tAngle = {angleData.Angle},\n\t\t\tVelocity = {angleData.Velocity}`
							rotatorsString ..= "\n\t\t},"
						end
					end
					rotatorsString ..= "\n\t},"
				end
			end

			for _,sections in pairs(v.faders) do
				if sections.Name ~= nil and sections.Tweens[1].Color ~= nil and sections.Tweens[1].TransparencyGoal ~= nil and sections.Tweens[1].Time ~= nil and sections.Tweens[1].EasingStyle ~= nil and sections.Tweens[1].EasingDirection ~= nil and sections.Tweens[1].RepeatCount ~= nil and sections.Tweens[1].Reverses ~= nil and sections.Tweens[1].DelayTime ~= nil then
					local name = sections.Name
					if name == "" then name = `Fader{i}` end
					fadersString ..= `\n\t["{name}"] = `.."{"
					for tweenNumber=1,rawlen(sections.Tweens) do
						local tweenData = sections.Tweens[tweenNumber]
						if tweenData.Color ~= nil or tweenData.TransparencyGoal ~= nil or tweenData.Time ~= nil or tweenData.EasingStyle ~= nil or tweenData.EasingDirection ~= nil or tweenData.RepeatCount ~= nil or tweenData.Reverses ~= nil or tweenData.DelayTime ~= nil then
							fadersString ..= "\n\t\t["..tweenNumber.."] = {\n\t\t\t"
							fadersString ..= `Color = {tweenData.Color},\n\t\t\tTransparency = {tweenData.TransparencyGoal},\n\t\t\tTime = {tweenData.Time},\n\t\t\tEasingStyle = Enum.EasingStyle.{tweenData.EasingStyle},\n\t\t\tEasingDirection = Enum.EasingDirection.{tweenData.EasingDirection},\n\t\t\tRepeatCount = {tweenData.RepeatCount},\n\t\t\tReverses = {tweenData.Reverses},\n\t\t\tTimeDelay = {tweenData.DelayTime}`
							fadersString ..= "\n\t\t},"
						end
					end
					fadersString ..= "\n\t},"
				end
			end

			local source = module.Source
			-- print(i, weight, lightsString, rotatorsString, fadersString)
			source = source:gsub("WaitTime = 0.1", `WaitTime = {v.waitTime}`)
			source = source:gsub("Weight = 1", `Weight = {weight}`)
			source = source:gsub("Lights = {}", "Lights = {"..lightsString.."\n}")
			source = source:gsub("Rotators = {}", "Rotators = {"..rotatorsString.."\n}")
			source = source:gsub("Faders = {}", "Faders = {"..fadersString.."\n}")
			module.Source = source
			module.Parent = folder
		end

		resetChassisExport()
	end

	local patternConnections = {}
	local selectedPattern = nil

	local function selectPattern(v)
		selectedPattern = v
		for _, connection in pairs(patternConnections) do
			connection:Disconnect()
		end
		for _,frame in pairs(exportContainer.ChassisPluginExports.ExportsContainer:GetChildren()) do
			if frame:IsA("Frame") then
				frame:Destroy()
			end
		end
		
		for _,button in pairs(exportContainer.ChassisPluginExports.FunctionsHolder:GetChildren()) do
			if button.Name == v.Name then
				button:SetAttribute("Selected", true)
			else
				button:SetAttribute("Selected", false)
			end
		end

		for _,pattern in pairs(v:GetChildren()) do
			if pattern:IsA("Folder") then
				local name = `Pattern {pattern.Name:match("%d+")}`
				local patternFrame = require(exportComponents:WaitForChild("pattern"))(name)
				patternFrame.Parent = exportContainer.ChassisPluginExports.ExportsContainer

				patternConnections[#patternConnections+1] = patternFrame.OverwriteButton.MouseButton1Click:Connect(function()
					export.container.Parent.PopUps.BackgroundTransparency = 0.5
					confirmPrompt("Are you sure you want to overwrite this pattern?\n&lt;b>This can not be undone&lt;/b>", function(confirm)
						export.container.Parent.PopUps.BackgroundTransparency = 1
						if confirm then
							for _,module in pairs(pattern:GetChildren()) do
								if module:IsA("ModuleScript") then
									module:Destroy()
								end
							end
							exportToPattern(pattern, exportContainer.ChassisPluginExports.FunctionsHolder[selectedPattern.Name].LayoutOrder)
						end
					end).Parent = export.container.Parent.PopUps
				end)

				patternConnections[#patternConnections+1] = patternFrame.AddToButton.MouseButton1Click:Connect(function()
					exportToPattern(pattern, exportContainer.ChassisPluginExports.FunctionsHolder[selectedPattern.Name].LayoutOrder)
				end)

				patternConnections[#patternConnections+1] = patternFrame.DeleteButton.MouseButton1Click:Connect(function()
					export.container.Parent.PopUps.BackgroundTransparency = 0.5
					confirmPrompt("Are you sure you want to delete this pattern?\n&lt;b>This can not be undone&lt;/b>", function(confirm)
						export.container.Parent.PopUps.BackgroundTransparency = 1
						if confirm then
							pattern:Destroy()
							patternFrame:Destroy()
						end
					end).Parent = export.container.Parent.PopUps
				end)
			end
		end
	end

	for _,v in pairs(lightbar.ModuleStore:GetChildren()) do
		if v:IsA("Folder") then
			local buttonFunction = require(exportComponents:WaitForChild("function"))(v.Name:gsub("_", " "), v.Name)
			buttonFunction.Parent = exportContainer.ChassisPluginExports.FunctionsHolder
			buttonFunction.LayoutOrder = #exportContainer.ChassisPluginExports.FunctionsHolder:GetChildren()
			
			if selectedPattern == nil then
				selectPattern(v)
			end

			buttonFunction.MouseButton1Click:Connect(function()
				selectPattern(v)
			end)
		end
	end

	chassisExportConnections[#chassisExportConnections+1] = exportContainer.ChassisPluginExports.CreatePatternHolder.CreatePattern.MouseButton1Click:Connect(function()
		if exportContainer.ChassisPluginExports.CreatePatternHolder.PatternName.Text == nil or exportContainer.ChassisPluginExports.CreatePatternHolder.PatternName.Text == "" then return end
		local patternNumber = tonumber(exportContainer.ChassisPluginExports.CreatePatternHolder.PatternName.Text:match("%d+"))
		if patternNumber == nil then
			patternNumber = #selectedPattern:GetChildren()+1
		end

		for _,v in pairs(selectedPattern:GetChildren()) do
			if v:IsA("Folder") then
				local number = tonumber(v.Name:match("%d+"))
				if number ~= nil and number == patternNumber then
					patternNumber = #selectedPattern:GetChildren()+1
				end
			end
		end

		local pattern = Instance.new("Folder")
		pattern.Name = `Pattern{patternNumber}`
		pattern.Parent = selectedPattern

		selectPattern(selectedPattern)
	end)

	chassisExportConnections[#chassisExportConnections+1] = exportContainer.ChassisPluginExports.CreatePatternHolder.CreateFunction.MouseButton1Click:Connect(function()
		if exportContainer.ChassisPluginExports.CreatePatternHolder.PatternName.Text == nil or exportContainer.ChassisPluginExports.CreatePatternHolder.PatternName.Text == "" then return end
		if lightbar.ModuleStore:FindFirstChild(exportContainer.ChassisPluginExports.CreatePatternHolder.PatternName.Text:gsub(" ", "_")) then return end
		local folder = Instance.new("Folder")
		folder.Name = exportContainer.ChassisPluginExports.CreatePatternHolder.PatternName.Text:gsub(" ", "_")
		folder.Parent = lightbar.ModuleStore
		
		local buttonFunction = require(exportComponents:WaitForChild("function"))(folder.Name:gsub("_", " "), folder.Name)
		buttonFunction.Parent = exportContainer.ChassisPluginExports.FunctionsHolder
		buttonFunction.LayoutOrder = #exportContainer.ChassisPluginExports.FunctionsHolder:GetChildren()
		
		if selectedPattern == nil then
			selectPattern(folder)
		end

		buttonFunction.MouseButton1Click:Connect(function()
			selectPattern(folder)
		end)
	end)
	
	chassisExportConnections[#chassisExportConnections+1] = exportContainer.ChassisPluginExports.Destroying:Connect(function()
		for _, connection in pairs(patternConnections) do
			connection:Disconnect()
		end
		for _, connection in pairs(chassisExportConnections) do
			connection:Disconnect()
		end
	end)

	exportContainer.Selection.Visible = false
	exportContainer.ChassisPluginExports.Visible = true
end


exportContainer.SelectExportOption.Options.ChassisPlugin.MouseButton1Click:Connect(function()
	resetChassisExport()
	
	exportContainer.SelectExportOption.Visible = false
	exportContainer.Selection.Visible = true
	
	chassisExportConnections[#chassisExportConnections+1] = Selection.SelectionChanged:Connect(function()
		if #Selection:Get() > 0 then
			exportContainer.Selection.Selection.Text = `&lt;b>Currently Selecting:&lt;/b> {Selection:Get()[1].Name}`
		else
			exportContainer.Selection.Selection.Text = "&lt;b>Currently Selecting:&lt;/b> Nothing"
		end
	end)
	if #Selection:Get() > 0 then
		exportContainer.Selection.Selection.Text = `&lt;b>Currently Selecting:&lt;/b> {Selection:Get()[1].Name}`
	else
		exportContainer.Selection.Selection.Text = "&lt;b>Currently Selecting:&lt;/b> Nothing"
	end
	
	chassisExportConnections[#chassisExportConnections+1] = exportContainer.Selection.Options.SelectButton.MouseButton1Click:Connect(function()
		if #Selection:Get() > 0 then
			local selection = Selection:Get()[1]
			if selection:FindFirstChild("A-Chassis Tune") and selection["A-Chassis Tune"]:FindFirstChild("AG-Chassis [Loader]") and selection.Body:FindFirstChild("ELS") then
				for _, connection in pairs(chassisExportConnections) do
					connection:Disconnect()
				end
				
				chassisExport(selection, true)
				elseif selection:FindFirstChild("A-Chassis Tune") and selection["A-Chassis Tune"]:FindFirstChild("Plugins") then
					for _, connection in pairs(chassisExportConnections) do
						connection:Disconnect()
					end
					
					chassisExport(selection, false)
			end
		end
	end)
	
	chassisExportConnections[#chassisExportConnections+1] = exportContainer.Selection.Options.CancelButton.MouseButton1Click:Connect(function()
		resetChassisExport()
	end)
	
	chassisExportConnections[#chassisExportConnections+1] = exportContainer.Selection.Destroying:Connect(function()
		for _, connection in pairs(chassisExportConnections) do
			connection:Disconnect()
		end
	end)
end)

exportContainer.SelectExportOption.Options.CustomCode.MouseButton1Click:Connect(function()
	local success, message = pcall(function()
		local data = {}

		for module,moduleData in pairs(export.modules) do
			if typeof(moduleData["toTable"]) == "function" then
				data[module] = moduleData["toTable"]()
			end
		end
		-- print(data)
		local model = Instance.new("Model")
		model.Parent = workspace
		model.Name = "EVC Custom Code Export"
		local offset = Vector3.new(0, 10, 0)

		if data.elsCreator ~= nil then
			for sectionNumber,sectionData in pairs(data.elsCreator) do
				local newScript = Instance.new("Script")
				newScript.Name = `EmergencyLights{sectionNumber}`
				newScript.Parent = model
				newScript.Source = pluginRoot.src.ExportTemplates.CustomCode.lights.Source
				local scriptSource = newScript.Source
				scriptSource = scriptSource:gsub("%[username%]", StudioService:GetUserId())
				scriptSource = scriptSource:gsub("local Lightbar = script.Parent", `local waitTime = {sectionData.WaitTime}\nlocal Lightbar = script.Parent`)

				local lights = {}
				local maxRows = {}
				for columnNumber,columnData in pairs(sectionData.Columns) do
					if columnData.Name == "" then
						columnData.Name = if sectionNumber > 1 then `{sectionNumber}Light{columnNumber}` else `Light{columnNumber}`
						sectionData.Columns[columnNumber].Name = columnData.Name
					end
					if table.find(lights, columnData.Name) == nil then
						table.insert(lights, columnData.Name)
					end
					maxRows = rawlen(columnData.Rows)
				end

				local lightLoopString = ""
				for row=1,maxRows do
					lightLoopString ..= `\n\t-- {row}`
					for column=1,rawlen(sectionData.Columns) do
						lightLoopString ..= `\n\tlight("{sectionData.Columns[column].Name}", {sectionData.Columns[column].Rows[row]})`
					end
					lightLoopString ..= `\n\ttask.wait(waitTime)`
				end

				scriptSource = scriptSource:gsub("--%[lights%]", lightLoopString)

				for _,lightname in pairs(lights) do
					local part = Instance.new("Part")
					part.Parent = model
					part.Name = lightname
					part.TopSurface = Enum.SurfaceType.Smooth
					part.BottomSurface = Enum.SurfaceType.Smooth
					part.Material = Enum.Material.Neon
					part.BrickColor = BrickColor.new("Institutional white")
					part.Anchored = true
					part.CanCollide = false
					part.Size = Vector3.new(0.75, 0.3, 0.1)
					offset += Vector3.new(0.85, 0, 0)
					part.Position = offset
				end

				newScript.Source = scriptSource
			end
		end
	end)
	if not success then
		warn(message, "\n", debug.traceback())
	end
end)

export.Display = function(container: Frame)
	exportContainer.Parent = container
	export.container = container
	export.enabled = true
end

export.StopDisplay = function()
	resetChassisExport()

	exportContainer.Parent = nil
	export.container = nil
	export.enabled = false
end

pluginRoot.Destroying:Connect(function()
	export.enabled = false
end)

return export</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="69">
          <Properties>
            <string name="Name">faders</string>
            <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

--------------------------------------------------------------------------------
-- Init --
--------------------------------------------------------------------------------

local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local pluginRoot = script.Parent.Parent.Parent
local faders = {enabled = false, canExport = true, container = nil}

local colors = {
	[0] = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar),
	[1] = Color3.fromRGB(47, 71, 255),
	[2] = Color3.fromRGB(185, 58, 60),
	[3] = Color3.fromRGB(253, 194, 66),
	[4] = Color3.fromRGB(255, 255, 255),
	[5] = Color3.fromRGB(75, 255, 75),
	[6] = Color3.fromRGB(188, 12, 211),
}
local colorDropdown = {
	[0] = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText),
	[1] = Color3.fromRGB(47, 71, 255),
	[2] = Color3.fromRGB(185, 58, 60),
	[3] = Color3.fromRGB(253, 194, 66),
	[4] = Color3.fromRGB(255, 255, 255),
	[5] = Color3.fromRGB(75, 255, 75),
	[6] = Color3.fromRGB(188, 12, 211),
}
local colorLabels = {
	[0] = "None",
	[1] = "Blue",
	[2] = "Red",
	[3] = "Amber",
	[4] = "White",
	[5] = "Green",
	[6] = "Purple",
}
local pause, pauseLocked = true, false
local tweenPreviews, tweenPreviewCompletedConnections, coroutines = {}, {}, {}

--------------------------------------------------------------------------------
-- UI Setup --
--------------------------------------------------------------------------------

local Components = script.Parent.Parent:WaitForChild("Components")
faders["topBarButton"] = require(Components:WaitForChild("topBarButton"))("faders", 1, "Faders", 0.104, true)
local faderComponents = Components:WaitForChild("faders")
local reusedContent = Components:WaitForChild("reusedContent")
local confirmPrompt = require(Components:WaitForChild("popups"):WaitForChild("confirm"))

local controls = require(reusedContent:WaitForChild("controls"))()
local faderContainer = require(faderComponents:WaitForChild("container"))(colorDropdown, colorLabels)

local pauseButton = require(reusedContent:WaitForChild("iconButton"))("Pause", 7, "rbxassetid://12758044104", "rbxassetid://12758044683")
local resetButton = require(reusedContent:WaitForChild("iconButton"))("Reset", 9, "rbxassetid://12758045258")
pauseButton.Parent = controls
pauseButton:SetAttribute("Icon", pause)
resetButton.Parent = controls

--------------------------------------------------------------------------------
-- Module Functions --
--------------------------------------------------------------------------------

local function setPause(value: boolean)
	pause = value
	pauseButton:SetAttribute("Icon", pause)

	for i,v in pairs(faderContainer:GetChildren()) do
		if v:IsA("ScrollingFrame") then
			v.Options.TopOptions.NameBox.TextBox.Visible = pause
		end
	end

	if pause then
		for i,v in pairs(tweenPreviews) do
			v:Pause()
		end
	else
		for i,v in pairs(tweenPreviews) do
			v:Play()
		end
	end
end

-- Register Tween
local function registerTween(sectionFrame: Frame, tween: number)
	local tweenFrame = sectionFrame.Options:FindFirstChild(`Tween{tween}`)
	local connections = {}
	local didSetPause = false

	local function pauseFocus()
		didSetPause = if pause == false then true else false
		setPause(true)
		pauseLocked = true
	end

	local function pauseFocusLost()
		pauseLocked = false
		if didSetPause then
			setPause(false)
			didSetPause = false
		end
	end

	connections[#connections+1] = tweenFrame.DelayTime.TextBox.Focused:Connect(pauseFocus)
	connections[#connections+1] = tweenFrame.RepeatCount.TextBox.Focused:Connect(pauseFocus)
	connections[#connections+1] = tweenFrame.Time.TextBox.Focused:Connect(pauseFocus)
	connections[#connections+1] = tweenFrame.TransparencyGoal.TextBox.Focused:Connect(pauseFocus)
	connections[#connections+1] = tweenFrame.DelayTime.TextBox.FocusLost:Connect(pauseFocusLost)
	connections[#connections+1] = tweenFrame.RepeatCount.TextBox.FocusLost:Connect(pauseFocusLost)
	connections[#connections+1] = tweenFrame.Time.TextBox.FocusLost:Connect(pauseFocusLost)
	connections[#connections+1] = tweenFrame.TransparencyGoal.TextBox.FocusLost:Connect(function(enterPressed)
		pauseFocusLost()

		if enterPressed and (tweenFrame.Time.TextBox.Text == nil or tweenFrame.Time.TextBox.Text == "") then
			tweenFrame.Time.TextBox:CaptureFocus()
			RunService.Heartbeat:Wait()
			tweenFrame.Time.TextBox.Text = ""
		end
	end)

	tweenFrame.Reverses:SetAttribute("Checked", false)
	connections[#connections+1] = tweenFrame.Reverses:GetAttributeChangedSignal("Checked"):Connect(function()
		tweenFrame.Reverses.Checkbox.Checkmark.Visible = tweenFrame.Reverses:GetAttribute("Checked")
	end)

	connections[#connections+1] = tweenFrame.Reverses.Checkbox.Button.MouseButton1Click:Connect(function()
		tweenFrame.Reverses:SetAttribute("Checked", not tweenFrame.Reverses:GetAttribute("Checked"))
	end)

	tweenFrame.Color:SetAttribute("Color", 0)
	tweenFrame.EasingStyle:SetAttribute("EasingStyle", "Linear")
	tweenFrame.EasingDirection:SetAttribute("EasingDirection", "InOut")

	connections[#connections+1] = tweenFrame.Color:GetAttributeChangedSignal("Color"):Connect(function()
		tweenFrame.Color.BackgroundColor3 = colors[tweenFrame.Color:GetAttribute("Color")]
		if tweenFrame.Color:GetAttribute("Color") == 0 then
			tweenFrame.Color.TextButton.Text = "Color"
		else
			tweenFrame.Color.TextButton.Text = ""
		end
	end)

	connections[#connections+1] = tweenFrame.Color.TextButton.MouseButton1Click:Connect(function()
		if sectionFrame.Dropdown:GetAttribute("Debounce") then return end
		sectionFrame.Dropdown:SetAttribute("Debounce", true)

		if sectionFrame.Dropdown:GetAttribute("Dropdown") == "Color" and sectionFrame.Dropdown:GetAttribute("CurrentTween") == tween then
			sectionFrame.Dropdown.Color.Visible = false
			sectionFrame.Dropdown:SetAttribute("Dropdown", nil)
			sectionFrame.Dropdown:SetAttribute("CurrentTween", nil)
		elseif sectionFrame.Dropdown:GetAttribute("Dropdown") == nil and sectionFrame.Dropdown:GetAttribute("CurrentTween") == nil then
			sectionFrame.Dropdown:SetAttribute("Dropdown", "Color")
			sectionFrame.Dropdown:SetAttribute("CurrentTween", tween)
			local colorConnections = {}

			colorConnections[#colorConnections+1] = sectionFrame.Dropdown:GetAttributeChangedSignal("CurrentTween"):Connect(function()
				for i = 1, #colorConnections do
					colorConnections[i]:Disconnect()
				end
			end)

			sectionFrame.Dropdown.Color.Visible = true
			sectionFrame.Dropdown.Color.Position = UDim2.new(0.5, 0, 0, (295*(tween - 1)) + 70)
			for i,v in pairs(sectionFrame.Dropdown.Color:GetChildren()) do
				if v:IsA("TextButton") then
					colorConnections[#colorConnections+1] = v.MouseButton1Click:Connect(function()
						tweenFrame.Color:SetAttribute("Color", v.LayoutOrder)
						sectionFrame.Dropdown.Color.Visible = false
						sectionFrame.Dropdown:SetAttribute("Dropdown", nil)
						sectionFrame.Dropdown:SetAttribute("CurrentTween",nil)
					end)
				end
			end
		end

		sectionFrame.Dropdown:SetAttribute("Debounce", false)
	end)

	connections[#connections+1] = tweenFrame.EasingStyle:GetAttributeChangedSignal("EasingStyle"):Connect(function()
		tweenFrame.EasingStyle.TextButton.Text = tweenFrame.EasingStyle:GetAttribute("EasingStyle")
	end)

	connections[#connections+1] = tweenFrame.EasingStyle.TextButton.MouseButton1Click:Connect(function()
		if sectionFrame.Dropdown:GetAttribute("Debounce") then return end
		sectionFrame.Dropdown:SetAttribute("Debounce", true)

		if sectionFrame.Dropdown:GetAttribute("Dropdown") == "EasingStyle" and sectionFrame.Dropdown:GetAttribute("CurrentTween") == tween then
			sectionFrame.Dropdown.EasingStyle.Visible = false
			sectionFrame.Dropdown:SetAttribute("Dropdown", nil)
			sectionFrame.Dropdown:SetAttribute("CurrentTween", nil)
		elseif sectionFrame.Dropdown:GetAttribute("Dropdown") == nil and sectionFrame.Dropdown:GetAttribute("CurrentTween") == nil then
			sectionFrame.Dropdown:SetAttribute("Dropdown", "EasingStyle")
			sectionFrame.Dropdown:SetAttribute("CurrentTween", tween)
			local easingStyleConnections = {}

			easingStyleConnections[#easingStyleConnections+1] = sectionFrame.Dropdown:GetAttributeChangedSignal("CurrentTween"):Connect(function()
				for i = 1, #easingStyleConnections do
					easingStyleConnections[i]:Disconnect()
				end
			end)

			sectionFrame.Dropdown.EasingStyle.Visible = true
			sectionFrame.Dropdown.EasingStyle.Position = UDim2.new(0.5, 0, 0, (295*(tween - 1)) + (70 + 105))
			for i,v in pairs(sectionFrame.Dropdown.EasingStyle:GetChildren()) do
				if v:IsA("TextButton") then
					easingStyleConnections[#easingStyleConnections+1] = v.MouseButton1Click:Connect(function()
						tweenFrame.EasingStyle:SetAttribute("EasingStyle", v.Name)
						sectionFrame.Dropdown.EasingStyle.Visible = false
						sectionFrame.Dropdown:SetAttribute("Dropdown", nil)
						sectionFrame.Dropdown:SetAttribute("CurrentTween",nil)
					end)
				end
			end
		end

		sectionFrame.Dropdown:SetAttribute("Debounce", false)
	end)

	connections[#connections+1] = tweenFrame.EasingDirection:GetAttributeChangedSignal("EasingDirection"):Connect(function()
		tweenFrame.EasingDirection.TextButton.Text = tweenFrame.EasingDirection:GetAttribute("EasingDirection")
	end)

	connections[#connections+1] = tweenFrame.EasingDirection.TextButton.MouseButton1Click:Connect(function()
		if sectionFrame.Dropdown:GetAttribute("Debounce") then return end
		sectionFrame.Dropdown:SetAttribute("Debounce", true)

		if sectionFrame.Dropdown:GetAttribute("Dropdown") == "EasingDirection" and sectionFrame.Dropdown:GetAttribute("CurrentTween") == tween then
			sectionFrame.Dropdown.EasingDirection.Visible = false
			sectionFrame.Dropdown:SetAttribute("Dropdown", nil)
			sectionFrame.Dropdown:SetAttribute("CurrentTween", nil)
		elseif sectionFrame.Dropdown:GetAttribute("Dropdown") == nil and sectionFrame.Dropdown:GetAttribute("CurrentTween") == nil then
			sectionFrame.Dropdown:SetAttribute("Dropdown", "EasingDirection")
			sectionFrame.Dropdown:SetAttribute("CurrentTween", tween)
			local easingDirectionConnections = {}

			easingDirectionConnections[#easingDirectionConnections+1] = sectionFrame.Dropdown:GetAttributeChangedSignal("CurrentTween"):Connect(function()
				for i = 1, #easingDirectionConnections do
					easingDirectionConnections[i]:Disconnect()
				end
			end)

			sectionFrame.Dropdown.EasingDirection.Visible = true
			sectionFrame.Dropdown.EasingDirection.Position = UDim2.new(0.5, 0, 0, (295*(tween - 1)) + (70 + 140))
			for i,v in pairs(sectionFrame.Dropdown.EasingDirection:GetChildren()) do
				if v:IsA("TextButton") then
					easingDirectionConnections[#easingDirectionConnections+1] = v.MouseButton1Click:Connect(function()
						tweenFrame.EasingDirection:SetAttribute("EasingDirection", v.Name)
						sectionFrame.Dropdown.EasingDirection.Visible = false
						sectionFrame.Dropdown:SetAttribute("Dropdown", nil)
						sectionFrame.Dropdown:SetAttribute("CurrentTween",nil)
					end)
				end
			end
		end

		sectionFrame.Dropdown:SetAttribute("Debounce", false)
	end)

	tweenFrame.Destroying:Connect(function()
		for i = 1, #connections do
			connections[i]:Disconnect()
		end
	end)
end

-- Update Coro
local function update(coro: table, section: number)
	local sectionFrame = faderContainer:WaitForChild(`Section{section}`)
	local currentTween = 1

	while RunService.Heartbeat:Wait() do
		if coro["run"] and pause == false then
			if sectionFrame.Options:FindFirstChild(`Tween{currentTween}`) then
				local success, message = pcall(function()
					if tweenPreviews[section] then
						tweenPreviews[section]:Cancel()
					end
					if tweenPreviewCompletedConnections[section] then
						tweenPreviewCompletedConnections[section]:Disconnect()
					end
	
					local tweenFrame = sectionFrame.Options:WaitForChild(`Tween{currentTween}`)
					if
						tonumber(tweenFrame.Time.TextBox.Text) == nil
						or tonumber(tweenFrame.RepeatCount.TextBox.Text) == nil
						or tonumber(tweenFrame.DelayTime.TextBox.Text) == nil
						or tonumber(tweenFrame.TransparencyGoal.TextBox.Text) == nil
					then
						tweenPreviews[section] = nil
						tweenPreviewCompletedConnections[section] = nil
						currentTween += 1
						RunService.Heartbeat:Wait()
						return
					end
					local tweenInfo = TweenInfo.new(
						tonumber(tweenFrame.Time.TextBox.Text),
						Enum.EasingStyle[tweenFrame.EasingStyle:GetAttribute("EasingStyle")],
						Enum.EasingDirection[tweenFrame.EasingDirection:GetAttribute("EasingDirection")],
						tonumber(tweenFrame.RepeatCount.TextBox.Text),
						tweenFrame.Reverses:GetAttribute("Checked"),
						tonumber(tweenFrame.DelayTime.TextBox.Text)
					)
					sectionFrame.Options.TopOptions.NameBox.BackgroundColor3 = colors[tweenFrame.Color:GetAttribute("Color")]
					tweenPreviews[section] = TweenService:Create(
						sectionFrame.Options.TopOptions.NameBox,
						tweenInfo,
						{BackgroundTransparency = tonumber(tweenFrame.TransparencyGoal.TextBox.Text)}
					)
					tweenPreviews[section]:Play()
					tweenPreviewCompletedConnections[section] = tweenPreviews[section].Completed:Wait()
					tweenPreviews[section] = nil
					tweenPreviewCompletedConnections[section] = nil
					currentTween += 1
				end)

				if not success then
					warn(message, debug.traceback())
					currentTween += 1
				end
			else
				currentTween = 1
			end
		elseif coro["run"] == false then
			break
		end
	end
end

-- Register Section
local function registerSection(section: number)
	local sectionFrame = faderContainer:FindFirstChild(`Section{section}`)
	local connections = {}

	sectionFrame:SetAttribute("Tweens", 1)

	registerTween(sectionFrame, 1)

	coroutines[section] = {
		run = true,
		coro = coroutine.create(update)
	}
	coroutine.resume(coroutines[section].coro, coroutines[section], section)

	sectionFrame.Options.TopOptions.NameBox.TextBox.PlaceholderText = `Fader{section}`

	connections[#connections+1] = sectionFrame.Options.TopOptions.NameBox.TextBox.FocusLost:Connect(function(enterPressed)
		if enterPressed then
			if faderContainer:FindFirstChild(`Section{section+1}`) then
				faderContainer:FindFirstChild(`Section{section+1}`).Options.TopOptions.NameBox.TextBox:CaptureFocus()
				RunService.Heartbeat:Wait()
				faderContainer:FindFirstChild(`Section{section+1}`).Options.TopOptions.NameBox.TextBox.Text = ""
			end
		end
	end)

	-- Handle Controls

	if section == 1 then
		sectionFrame.Buttons.TopControls.RemoveHolder.Visible = false
	end

	local function sectionAddVisible()
		if section ~= #faderContainer:GetChildren() - 2 then
			sectionFrame.Buttons.TopControls.AddHolder.Visible = false
			sectionFrame.Buttons.TopControls.RemoveHolder.Visible = false
		else
			sectionFrame.Buttons.TopControls.AddHolder.Visible = true
			sectionFrame.Buttons.TopControls.RemoveHolder.Visible = if section ~= 1 then true else false
		end
	end
	sectionAddVisible()
	connections[#connections+1] = faderContainer.ChildAdded:Connect(sectionAddVisible)
	connections[#connections+1] = faderContainer.ChildRemoved:Connect(sectionAddVisible)

	local function tweenChildrenChange()
		if sectionFrame:FindFirstChild("Buttons") == nil then return end
		if sectionFrame:GetAttribute("Tweens") == 1 then
			sectionFrame.Buttons.Controls.RemoveHolder.Visible = false
		else
			sectionFrame.Buttons.Controls.RemoveHolder.Visible = true
		end
		
		if sectionFrame:FindFirstChild("Options") == nil then return end
		if sectionFrame:FindFirstChild("Buttons") == nil then return end
		if #sectionFrame.Options:GetChildren() ~= (#sectionFrame.Buttons:GetChildren() - 1) then
			local difference = #sectionFrame.Options:GetChildren() - (#sectionFrame.Buttons:GetChildren() - 1)
			if difference > 0 then
				for i = 1, difference do
					local newFrame = Instance.new("Frame")
					newFrame.Name = `TweenFiller{#sectionFrame.Buttons:GetChildren()}`
					newFrame.BackgroundTransparency = 1
					newFrame.Size = UDim2.new(1, 0, 0, 290)
					newFrame.Parent = sectionFrame.Buttons
				end
			else
				for i = 1, -difference do
					sectionFrame.Buttons:FindFirstChild(`TweenFiller{(#sectionFrame.Buttons:GetChildren() - 1)}`):Destroy()
				end
			end
		end
	end
	tweenChildrenChange()
	connections[#connections+1] = sectionFrame.Options.ChildAdded:Connect(tweenChildrenChange)
	connections[#connections+1] = sectionFrame.Options.ChildRemoved:Connect(tweenChildrenChange)
	connections[#connections+1] = sectionFrame:GetAttributeChangedSignal("Tweens"):Connect(tweenChildrenChange)

	-- Add Section
	connections[#connections+1] = sectionFrame.Buttons.TopControls.AddHolder.Add.MouseButton1Click:Connect(function()
		local newSection = require(faderComponents:WaitForChild("section"))(section+1, colorDropdown, colorLabels)
		newSection.Parent = faderContainer
		registerSection(section+1)
	end)

	-- Remove Section
	connections[#connections+1] = sectionFrame.Buttons.TopControls.RemoveHolder.RemoveButton.MouseButton1Click:Connect(function()
		if section == 1 then return end
		if faders.container.Parent:WaitForChild("PopUps").BackgroundTransparency ~= 1 then return end
		faders.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
		confirmPrompt("Are you sure you want to remove this section? &lt;b>Any unsaved progress will be lost!&lt;/b>", function(confirm)
			faders.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
			if confirm then
				sectionFrame:Destroy()
			end
		end).Parent = faders.container.Parent.PopUps
	end)

	-- Add Angle
	connections[#connections+1] = sectionFrame.Buttons.Controls.AddHolder.Add.MouseButton1Click:Connect(function()
		sectionFrame:SetAttribute("Tweens", sectionFrame:GetAttribute("Tweens") + 1)
		local newTween = require(faderComponents:WaitForChild("tweenFrame"))(sectionFrame:GetAttribute("Tweens"))
		newTween.Parent = sectionFrame.Options
		registerTween(sectionFrame, sectionFrame:GetAttribute("Tweens"))
	end)

	-- Remove Angle
	connections[#connections+1] = sectionFrame.Buttons.Controls.RemoveHolder.RemoveButton.MouseButton1Click:Connect(function()
		if sectionFrame:GetAttribute("Tweens") == 1 then return end
		if confirmPrompt.container.Parent:WaitForChild("PopUps").BackgroundTransparency ~= 1 then return end
		faders.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
		confirmPrompt("Are you sure you want to remove this tween? &lt;b>Any unsaved progress will be lost!&lt;/b>", function(confirm)
			faders.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
			if confirm then
				sectionFrame.Options:FindFirstChild(`Tween{sectionFrame:GetAttribute("Tweens")}`):Destroy()
				sectionFrame:SetAttribute("Tweens", sectionFrame:GetAttribute("Tweens") - 1)
			end
		end).Parent = faders.container.Parent.PopUps
	end)

	connections[#connections+1] = sectionFrame.Destroying:Connect(function()
		coroutines[section].run = false
		for i = 1, #connections do
			connections[i]:Disconnect()
		end
	end)
end

registerSection(1)

-- Reset Handler
local function reset()
	setPause(true)
	pauseLocked = false

	for _,v in pairs(tweenPreviews) do
		v:Cancel()
	end

	for _,v in pairs(tweenPreviewCompletedConnections) do
		v:Disconnect()
	end

	for _,v in pairs(faderContainer:GetChildren()) do
		if v:IsA("ScrollingFrame") and v.Name ~= "Section1" then
			v:Destroy()
		end
	end

	faderContainer.Section1:SetAttribute("Tweens", 1)
	for _,v in pairs(faderContainer.Section1.Options:GetChildren()) do
		if v:IsA("Frame") and (v.Name ~= "Tween1" and v.Name ~= "TopOptions") then
			v:Destroy()
		end
	end

	faderContainer.Section1.Options.TopOptions.NameBox.BackgroundTransparency = 0
	faderContainer.Section1.Options.Tween1.DelayTime.TextBox.Text = ""
	faderContainer.Section1.Options.Tween1.RepeatCount.TextBox.Text = ""
	faderContainer.Section1.Options.Tween1.Time.TextBox.Text = ""
	faderContainer.Section1.Options.Tween1.TransparencyGoal.TextBox.Text = ""
	faderContainer.Section1.Options.Tween1.Color:SetAttribute("Color", 0)
	faderContainer.Section1.Options.Tween1.EasingStyle:SetAttribute("EasingStyle", "Linear")
	faderContainer.Section1.Options.Tween1.EasingDirection:SetAttribute("EasingDirection", "InOut")
	faderContainer.Section1.Options.TopOptions.NameBox.BackgroundColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar)
	faderContainer.Section1.Options.TopOptions.NameBox.TextBox.Text = ""
end

local function confirmReset()
	if faders.container == nil then return end
	if faders.container.Parent:WaitForChild("PopUps").BackgroundTransparency ~= 1 then return end
	faders.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
	confirmPrompt("Are you sure you want to reset? \n&lt;b>Any unsaved progress will be lost!&lt;/b>", function(confirm)
		if confirm then
			reset()
		end
		faders.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
	end).Parent = faders.container.Parent.PopUps
end

faders.loadFromTable = function(data: {number:{string:any}})
	reset()

	task.wait(0.1)

	for section=1,#data do
		local sectionData = data[section]
		if typeof(sectionData) == "table" and typeof(sectionData["Name"]) == "string" and typeof(sectionData["Tweens"]) == "table" then
			local sectionFrame = faderContainer.Section1
			if section ~= 1 then
				sectionFrame = require(faderComponents:WaitForChild("section"))(section, colorDropdown, colorLabels)
				sectionFrame.Parent = faderContainer
				registerSection(section)
			end
			
			sectionFrame.Options.TopOptions.NameBox.TextBox.Text = sectionData.Name
			sectionFrame:SetAttribute("Tweens", #sectionData.Tweens)

			for tween=1,#sectionData.Tweens do
				local tweenData = sectionData.Tweens[tween]
				if
					typeof(tweenData) == "table"
					and typeof(tweenData["DelayTime"]) == "number"
					and typeof(tweenData["RepeatCount"]) == "number"
					and typeof(tweenData["Time"]) == "number"
					and typeof(tweenData["TransparencyGoal"]) == "number"
					and typeof(tweenData["Color"]) == "number"
					and typeof(tweenData["EasingStyle"]) == "string"
					and typeof(tweenData["EasingDirection"]) == "string"
					and typeof(tweenData["Reverses"]) == "boolean"
				then
					local tweenFrame = sectionFrame.Options:FindFirstChild(`Tween{tween}`)
					if tweenFrame == nil then
						tweenFrame = require(faderComponents:WaitForChild("tweenFrame"))(tween)
						tweenFrame.Parent = sectionFrame.Options
						registerTween(sectionFrame, tween)
					end

					tweenFrame.DelayTime.TextBox.Text = tweenData.DelayTime
					tweenFrame.RepeatCount.TextBox.Text = tweenData.RepeatCount
					tweenFrame.Time.TextBox.Text = tweenData.Time
					tweenFrame.TransparencyGoal.TextBox.Text = tweenData.TransparencyGoal
					tweenFrame.Color:SetAttribute("Color", tweenData.Color)
					tweenFrame.EasingStyle:SetAttribute("EasingStyle", tweenData.EasingStyle)
					tweenFrame.EasingDirection:SetAttribute("EasingDirection", tweenData.EasingDirection)
					tweenFrame.Reverses:SetAttribute("Checked", tweenData.Reverses)
				elseif typeof(tweenData) == "table" then
					local tweenFrame = sectionFrame.Options:FindFirstChild(`Tween{tween}`)
					if tweenFrame == nil then
						tweenFrame = require(faderComponents:WaitForChild("tweenFrame"))(tween)
						tweenFrame.Parent = sectionFrame.Options
						registerTween(sectionFrame, tween)
					end
				end
			end
		end
	end
end

faders.toTable = function()
	local data = {}

	for _,section in pairs(faderContainer:GetChildren()) do
		if section:IsA("ScrollingFrame") then
			local sectionTable = {
				Name = section.Options.TopOptions.NameBox.TextBox.Text,
				Tweens = {}
			}

			for _,tween in pairs(section.Options:GetChildren()) do
				if tween:IsA("Frame") and tween.Name ~= "TopOptions" then
					local tweenTable = {
						DelayTime = tonumber(tween.DelayTime.TextBox.Text),
						RepeatCount = tonumber(tween.RepeatCount.TextBox.Text),
						Time = tonumber(tween.Time.TextBox.Text),
						TransparencyGoal = tonumber(tween.TransparencyGoal.TextBox.Text),
						Color = tween.Color:GetAttribute("Color"),
						EasingStyle = tween.EasingStyle:GetAttribute("EasingStyle"),
						EasingDirection = tween.EasingDirection:GetAttribute("EasingDirection"),
						Reverses = tween.Reverses:GetAttribute("Checked")
					}

					sectionTable.Tweens[tween.LayoutOrder] = tweenTable
				end
			end

			data[section.LayoutOrder] = sectionTable
		end
	end
	-- print(data)

	return data
end

-- Input Handler
faders.InputBegan = function(input: InputObject)
	if faders.enabled == false then return end

	if input.KeyCode == Enum.KeyCode.P then
		if pauseLocked then return end
		setPause(not pause)
	elseif input.KeyCode == Enum.KeyCode.R then
		confirmReset()
	end
end

pauseButton.Image.MouseButton1Click:Connect(function()
	if pauseLocked then return end
	setPause(not pause)
end)

resetButton.Image.MouseButton1Click:Connect(function()
	confirmReset()
end)

faders.Display = function(container: Frame)
	faderContainer.Parent = container
	controls.Parent = container
	faders.container = container
	faders.enabled = true
end

faders.StopDisplay = function()
	setPause(true)

	faderContainer.Parent = nil
	controls.Parent = nil
	faders.container = nil
	faders.enabled = false
end

pluginRoot.Destroying:Connect(function()
	faders.enabled = false
end)

return faders</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="70">
          <Properties>
            <string name="Name">loadSave</string>
            <string name="Source">--[[
	Redon Tech 2023-2024
	EVC V2
--]]

--------------------------------------------------------------------------------
-- Init --
--------------------------------------------------------------------------------

local StudioService = game:GetService("StudioService")
local HttpService = game:GetService("HttpService")
local Selection = game:GetService("Selection")
local pluginRoot = script.Parent.Parent.Parent
local loadSave = {enabled = false, canExport = false, container = nil}
local plugin: Plugin = pluginRoot:WaitForChild("Plugin").Value
local Is_RBXM = plugin.Name:find(".rbxm") ~= nil

--------------------------------------------------------------------------------
-- UI Setup --
--------------------------------------------------------------------------------

local Components = script.Parent.Parent:WaitForChild("Components")
loadSave["topBarButton"] = require(Components:WaitForChild("topBarButton"))("loadSave", 3, "Load/Save", 0.104, false)

local loadSaveComponents = Components:WaitForChild("loadSave")
local reusedContent = Components:WaitForChild("reusedContent")
local confirmPrompt = require(Components:WaitForChild("popups"):WaitForChild("confirm"))
local importLocalSavePopup = require(Components:WaitForChild("popups"):WaitForChild("importLocalSave"))

local loadSaveContainer = require(loadSaveComponents:WaitForChild("container"))()

--------------------------------------------------------------------------------
-- Module Functions --
--------------------------------------------------------------------------------

local function loadSaveData(saveData: {string:any})
	for module,data in pairs(saveData) do
		-- local module = loadSave.modules
		-- if module and typeof(module["loadFromTable"]) == "function" then
		-- 	module["loadFromTable"](data)
		-- end
		local success, message = pcall(function()
			local requiredModule = loadSave.modules[module]
			-- print(module, data, requiredModule)
			if requiredModule and typeof(requiredModule["loadFromTable"]) == "function" then
				requiredModule["loadFromTable"](data)
			end
		end)

		if not success then
			warn(`[EVC] Error loading save data for module {module}: {message}\n{debug.traceback()}`)
		end
	end
end

local function saveSaveData(saveName: string, saveData: {string:any})
	local saves = plugin:GetSetting("savesV2")

	if saves == nil then
		saves = {}
	end

	saves[saveName] = saveData
	plugin:SetSetting("savesV2", saves)
end

local function updateSaves()
	local saves = plugin:GetSetting("savesV2")

	if saves == nil then
		saves = {}
	end

	local saveList = loadSaveContainer.MainLoadSave.SavesContainer
	for i, v in pairs(saveList:GetChildren()) do
		if v:IsA("Frame") then
			v:Destroy()
		end
	end

	for name,save in pairs(saves) do
		local saveFrame = require(loadSaveComponents.save)(name)
		saveFrame.Parent = saveList
		local connections = {}
		connections[#connections+1] = saveFrame.SaveButton.MouseButton1Click:Connect(function()
			loadSave.container.Parent.PopUps.BackgroundTransparency = 0.5
			confirmPrompt("Are you sure you want to overwrite this save?\n&lt;b>This can not be undone&lt;/b>", function(confirm)
				loadSave.container.Parent.PopUps.BackgroundTransparency = 1
				if confirm then
					local saveData = {}
					for module,data in pairs(loadSave.modules) do
						if typeof(data["toTable"]) == "function" then
							saveData[module] = data["toTable"]()
						end
					end

					saveSaveData(name, saveData)
					updateSaves()
				end
			end).Parent = loadSave.container.Parent.PopUps
		end)

		connections[#connections+1] = saveFrame.LoadButton.MouseButton1Click:Connect(function()
			loadSave.container.Parent.PopUps.BackgroundTransparency = 0.5
			confirmPrompt("Are you sure you want to load this save, this will overwrite any unsaved data?\n&lt;b>This can not be undone&lt;/b>", function(confirm)
				loadSave.container.Parent.PopUps.BackgroundTransparency = 1
				if confirm then
					loadSaveData(save)
				end
			end).Parent = loadSave.container.Parent.PopUps
		end)

		connections[#connections+1] = saveFrame.ExportButton.MouseButton1Click:Connect(function()
			local success, message = pcall(function()
				local instanceToSave = Instance.new("Script")
				instanceToSave.Source = HttpService:JSONEncode(save)
				instanceToSave.Name = name
				instanceToSave.Parent = game
				local currentSelection = Selection:Get()
				Selection:Set({instanceToSave})
				task.wait(0.1)
				local saved = plugin:PromptSaveSelection(`{name}`)
				task.wait(0.1)
				Selection:Set(currentSelection)
				instanceToSave:Destroy()
			end)

			if not success then
				warn(`[EVC] Error exporting save: {message}\n{debug.traceback()}`)
			end
		end)

		connections[#connections+1] = saveFrame.DeleteButton.MouseButton1Click:Connect(function()
			loadSave.container.Parent.PopUps.BackgroundTransparency = 0.5
			confirmPrompt("Are you sure you want to delete this save?\n&lt;b>This can not be undone&lt;/b>", function(confirm)
				loadSave.container.Parent.PopUps.BackgroundTransparency = 1
				if confirm then
					local saves = plugin:GetSetting("savesV2")

					if saves == nil then
						saves = {}
					end

					saves[name] = nil
					plugin:SetSetting("savesV2", saves)
					updateSaves()
				end
			end).Parent = loadSave.container.Parent.PopUps
		end)

		saveFrame.Destroying:Connect(function()
			for index, value in pairs(connections) do
				value:Disconnect()
			end
		end)
	end
end

loadSaveContainer.MainLoadSave.ControlsHolder.CreateSave.MouseButton1Click:Connect(function()
	local name = loadSaveContainer.MainLoadSave.ControlsHolder.SaveName.Text

	if name == "" then
		name = "Untitled"
	end

	local saves = plugin:GetSetting("savesV2")

	if saves == nil then
		saves = {}
	end

	local currenNameWithCount = name
	local function checkName(checkDepth)
		if saves[currenNameWithCount] ~= nil then
			currenNameWithCount = `{name} ({checkDepth})`
			checkName(checkDepth+1)
		end
	end
	checkName(1)
	name = currenNameWithCount

	local saveData = {}
	for module,data in pairs(loadSave.modules) do
		if typeof(data["toTable"]) == "function" then
			saveData[module] = data["toTable"]()
		end
	end

	saveSaveData(name, saveData)
	updateSaves()
end)

loadSaveContainer.MainLoadSave.ControlsHolder.ImportSave.MouseButton1Click:Connect(function()
	local success, message = pcall(function()
		local file = StudioService:PromptImportFile({"lua"})

		if file then
			local saveData = HttpService:JSONDecode(file:GetBinaryContents())
			local name = file.Name:gsub(".lua", "")

			local saves = plugin:GetSetting("savesV2")

			if saves == nil then
				saves = {}
			end

			local currenNameWithCount = name
			local function checkName(checkDepth)
				if saves[currenNameWithCount] ~= nil then
					currenNameWithCount = `{name} ({checkDepth})`
					checkName(checkDepth+1)
				end
			end
			checkName(1)
			name = currenNameWithCount

			saveSaveData(name, saveData)
			updateSaves()
		end
	end)

	if not success then
		warn(`[EVC] Error importing save: {message}\n{debug.traceback()}`)
	end
end)

local function loadLegacySave(saveData: {string:any})
	local data = {elsCreator = {}}

	local sections = {
		[1] = {
			WaitTime = 0.1,
			Columns = {},
			Remove = 0,
		}
	}
	local organizedData = {}

	for i,v in pairs(saveData) do
		if i == "BPM" then
			sections[1].WaitTime = tonumber(v)
		else
			organizedData[tonumber(i)] = v
		end
	end

	for i=1,#organizedData do
		local v = organizedData[i]
		if v.Spacer == true then
			sections[#sections+1] = {
				WaitTime = tonumber(v.BPM),
				Columns = {},
				Remove = i
			}
		else
			local columnData = {Name = "", Rows = {}}
			for row,rowData in pairs(v.Rows) do
				columnData.Rows[tonumber(row)] = rowData
			end
			
			sections[#sections].Columns[i-sections[#sections]["Remove"]] = columnData
		end
	end

	data.elsCreator = sections

	loadSaveData(data)
end

local function updateLegacySaves()
	local saves = plugin:GetSetting("saves")

	if saves == nil then
		saves = {}
	end

	local saveList = loadSaveContainer.MainLegacySaves.SavesContainer
	for i, v in pairs(saveList:GetChildren()) do
		if v:IsA("Frame") then
			v:Destroy()
		end
	end

	for name,save in pairs(saves) do
		local saveFrame = require(loadSaveComponents.saveLegacy)(name)
		saveFrame.Parent = saveList
		local connection = saveFrame.LoadButton.MouseButton1Click:Connect(function()
			loadSave.container.Parent.PopUps.BackgroundTransparency = 0.5
			confirmPrompt("Are you sure you want to load this save, this will overwrite any unsaved data?\n&lt;b>This can not be undone&lt;/b>", function(confirm)
				loadSave.container.Parent.PopUps.BackgroundTransparency = 1
				if confirm then
					loadLegacySave(save)
				end
			end).Parent = loadSave.container.Parent.PopUps
		end)

		saveFrame.Destroying:Connect(function()
			connection:Disconnect()
		end)
	end
end

if Is_RBXM == false then
	loadSaveContainer.MainLegacySaves.ImportLegacySaves.Visible = false
else
	loadSaveContainer.MainLegacySaves.ImportLegacySaves.MouseButton1Click:Connect(function()
		loadSave.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
		importLocalSavePopup("Select a settings file to import", `%LocalAppData%\\Roblox\\{StudioService:GetUserId()}\\InstalledPlugins\\9953321418`, function(confirm)
			loadSave.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
			if confirm then
				local success, message = pcall(function()
					local file = StudioService:PromptImportFile({"json"})
					if file then
						local data = HttpService:JSONDecode(file:GetBinaryContents())

						if data then
							local currentSaves = plugin:GetSetting("saves")
							if currentSaves == nil then
								currentSaves = {}
							end

							if data["saves"] ~= nil then
								for i, v in pairs(data["saves"]) do
									if v["BPM"] ~= nil then
										currentSaves[i] = v
									end
								end
							end

							plugin:SetSetting("saves", currentSaves)
							updateLegacySaves()
						end
					end
				end)

				if not success then
					warn(`[EVC] Error importing legacy saves: {message}\n{debug.traceback()}`)
				end
			end
		end).Parent = loadSave.container.Parent.PopUps
	end)
end

loadSaveContainer.MainLegacySaves:GetPropertyChangedSignal("Visible"):Connect(function()
	loadSaveContainer.MainLoadSave.ShowLegacySaves.Visible = not loadSaveContainer.MainLegacySaves.Visible
end)

loadSaveContainer.MainLegacySaves.HideLegacySaves.MouseButton1Click:Connect(function()
	loadSaveContainer.MainLegacySaves.Visible = false
	plugin:SetSetting("legacySavesHidden", true)
end)

loadSaveContainer.MainLoadSave.ShowLegacySaves.MouseButton1Click:Connect(function()
	loadSaveContainer.MainLegacySaves.Visible = true
	plugin:SetSetting("legacySavesHidden", false)
end)

local showLegacySaves = plugin:GetSetting("legacySavesHidden")
if showLegacySaves == false then
	loadSaveContainer.MainLegacySaves.Visible = false
else
	loadSaveContainer.MainLoadSave.ShowLegacySaves.Visible = false
end


loadSave.Display = function(container: Frame)
	-- controls.Parent = container
	updateLegacySaves()
	updateSaves()

	loadSaveContainer.Parent = container
	loadSave.container = container
	loadSave.enabled = true
end

loadSave.StopDisplay = function()
	-- controls.Parent = nil
	loadSaveContainer.Parent = nil
	loadSave.container = nil
	loadSave.enabled = false
end

pluginRoot.Destroying:Connect(function()
	loadSave.enabled = false
end)

return loadSave</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="71">
          <Properties>
            <string name="Name">rotators</string>
            <string name="Source">--[[
Redon Tech 2023-2024
EVC V2
--]]

--------------------------------------------------------------------------------
-- Init --
--------------------------------------------------------------------------------

local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local pluginRoot = script.Parent.Parent.Parent
local rotators = {enabled = false, canExport = true, container = nil}

local colors = {
	[0] = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Titlebar),
	[1] = Color3.fromRGB(47, 71, 255),
	[2] = Color3.fromRGB(185, 58, 60),
	[3] = Color3.fromRGB(253, 194, 66),
	[4] = Color3.fromRGB(255, 255, 255),
	[5] = Color3.fromRGB(75, 255, 75),
	[6] = Color3.fromRGB(188, 12, 211),
}
local colorDropdown = {
	[0] = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText),
	[1] = Color3.fromRGB(47, 71, 255),
	[2] = Color3.fromRGB(185, 58, 60),
	[3] = Color3.fromRGB(253, 194, 66),
	[4] = Color3.fromRGB(255, 255, 255),
	[5] = Color3.fromRGB(75, 255, 75),
	[6] = Color3.fromRGB(188, 12, 211),
}
local colorLabels = {
	[0] = "None",
	[1] = "Blue",
	[2] = "Red",
	[3] = "Amber",
	[4] = "White",
	[5] = "Green",
	[6] = "Purple",
}
local pause, currentPreview, currentPreviewAngle = true, nil, nil

--------------------------------------------------------------------------------
-- UI Setup --
--------------------------------------------------------------------------------

local Components = script.Parent.Parent:WaitForChild("Components")
rotators["topBarButton"] = require(Components:WaitForChild("topBarButton"))("rotators", 2, "Rotators", 0.104, true)
local rotatorComponents = Components:WaitForChild("rotators")
local reusedContent = Components:WaitForChild("reusedContent")
local confirmPrompt = require(Components:WaitForChild("popups"):WaitForChild("confirm"))

local controls = require(reusedContent:WaitForChild("controls"))()
local rotatorContainer = require(rotatorComponents:WaitForChild("container"))(colorDropdown, colorLabels)

local pauseButton = require(reusedContent:WaitForChild("iconButton"))("Pause", 7, "rbxassetid://12758044104", "rbxassetid://12758044683")
local resetButton = require(reusedContent:WaitForChild("iconButton"))("Reset", 9, "rbxassetid://12758045258")
pauseButton.Parent = controls
pauseButton:SetAttribute("Icon", pause)
resetButton.Parent = controls

--------------------------------------------------------------------------------
-- Module Functions --
--------------------------------------------------------------------------------

local function setPause(value: boolean)
	pause = value
	pauseButton:SetAttribute("Icon", pause)
end

-- Preview
local function threadFunction()
	-- local currentTargetAngle = 0
	-- local currentMaxVelocity = 100
	-- local currentTween = nil

	-- while true do
	-- 	if rotators.enabled == false then break end

	-- 	if pause or currentPreview == nil then
	-- 		RunService.Heartbeat:Wait()
	-- 	else
	-- 		if
	-- 			rotatorContainer.ViewportFrame.WorldModel.Motor.Motor6D.DesiredAngle ~= currentTargetAngle
	-- 			or rotatorContainer.ViewportFrame.WorldModel.Motor.Motor6D.MaxVelocity ~= currentMaxVelocity
	-- 		then
	-- 			if currentTween then currentTween:Cancel() end

	-- 			currentTargetAngle = rotatorContainer.ViewportFrame.WorldModel.Motor.Motor6D.DesiredAngle
	-- 			currentTween = TweenService:Create(
	-- 				rotatorContainer.ViewportFrame.WorldModel.Motor.Motor6D,
	-- 				TweenInfo.new(math.abs(currentTargetAngle) - (rotatorContainer.ViewportFrame.WorldModel.Motor.Motor6D.MaxVelocity * 2.5), Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
	-- 				{C1 = CFrame.Angles(math.rad(90), 0, math.rad(math.deg(currentTargetAngle)))}
	-- 			)
	-- 			currentTween:Play()
	-- 		end

	-- 		RunService.Heartbeat:Wait()
	-- 	end
	-- end

	local currentRad = 0
	local currentTarget = 0
	local currentVelocity = 0
	local motor = rotatorContainer.ViewportFrame.WorldModel.Motor.Motor6D
	local connection
	connection = RunService.Heartbeat:Connect(function()
		if rotators.enabled == false then connection:Disconnect() end

		if motor:GetAttribute("Reset") == true then
			-- if currentPreview ~= nil and currentPreviewAngle ~= nil then
			-- 	local currentPreviewFrame = rotatorContainer.ControlsHolder:FindFirstChild(`Section{currentPreview}`)
			-- 	local currentPreviewAngleFrame = currentPreviewFrame.Options:FindFirstChild(`Angle{currentPreviewAngle}`)
			-- 	currentPreviewAngleFrame.ImageLabel.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
			-- end
			-- currentPreview, currentPreviewAngle = nil, nil

			currentRad = 0
			currentTarget = 0
			currentVelocity = 0
			motor.MaxVelocity = 100
			motor:SetAttribute("DesiredAngle", 0)
			motor.C1 = CFrame.Angles(math.rad(90), 0, 0)

			rotatorContainer.ViewportFrame.WorldModel.Part:SetAttribute("Color", 0)


			motor:SetAttribute("Reset", false)
		end

		if pause == false and currentPreview ~= nil then
			if -motor:GetAttribute("DesiredAngle") ~= currentTarget then
				currentTarget = -motor:GetAttribute("DesiredAngle")
			end
			if currentVelocity ~= motor.MaxVelocity then
				currentVelocity = motor.MaxVelocity
			end

			local diff = currentTarget - currentRad
			if diff &lt; 0.05 and diff > -0.05 then
				motor.C1 = CFrame.Angles(math.rad(90), 0, currentTarget)
				-- if rotatorContainer.ControlsHolder:FindFirstChild(`Section{currentPreview}`):GetAttribute("Angles") == currentPreviewAngle then
				-- 	setPause(true)
				-- 	rotatorContainer.ControlsHolder:FindFirstChild(`Section{currentPreview}`).Options:FindFirstChild(`Angle{currentPreviewAngle}`).ImageLabel.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
				-- else
				-- 	if currentPreview ~= nil and currentPreviewAngle ~= nil then
				-- 		rotatorContainer.ControlsHolder:FindFirstChild(`Section{currentPreview}`).Options:FindFirstChild(`Angle{currentPreviewAngle}`).ImageLabel.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
				-- 	end
				-- 	if currentPreviewAngle == nil then
				-- 		currentPreviewAngle = 1
				-- 	else
				-- 		currentPreviewAngle += 1
				-- 	end
				-- 	if currentPreview == nil or currentPreviewAngle == nil then return end
				-- 	local angleFrame = rotatorContainer.ControlsHolder:FindFirstChild(`Section{currentPreview}`).Options:FindFirstChild(`Angle{currentPreviewAngle}`)
				-- 	angleFrame.ImageLabel.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText, Enum.StudioStyleGuideModifier.Selected)
				-- 	rotatorContainer.ViewportFrame.WorldModel.Motor.Motor6D.MaxVelocity = tonumber(angleFrame.Velocity.TextBox.Text)
				-- 	rotatorContainer.ViewportFrame.WorldModel.Motor.Motor6D.DesiredAngle = math.rad(tonumber(angleFrame.Angle.TextBox.Text))
				-- 	rotatorContainer.ViewportFrame.WorldModel.Part:SetAttribute("Color", angleFrame.Color:GetAttribute("Color"))
				-- end
				if currentPreview ~= nil and currentPreviewAngle ~= nil then
					local currentPreviewFrame = rotatorContainer.ControlsHolder:FindFirstChild(`Section{currentPreview}`)
					local currentPreviewAngleFrame = currentPreviewFrame.Options:FindFirstChild(`Angle{currentPreviewAngle}`)

					if currentPreviewFrame:GetAttribute("Angles") == currentPreviewAngle then
						currentPreviewAngle = 1
					else
						currentPreviewAngle += 1
					end

					local angleFrame = currentPreviewFrame.Options:FindFirstChild(`Angle{currentPreviewAngle}`)
					currentPreviewAngleFrame.ImageLabel.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
					angleFrame.ImageLabel.ImageColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.Button, Enum.StudioStyleGuideModifier.Selected)
					if tonumber(angleFrame.Velocity.TextBox.Text) == nil or tonumber(angleFrame.Angle.TextBox.Text) == nil then
						setPause(true)
						return
					end
					motor.MaxVelocity = tonumber(angleFrame.Velocity.TextBox.Text)
					motor:SetAttribute("DesiredAngle", math.rad(tonumber(angleFrame.Angle.TextBox.Text)))
					rotatorContainer.ViewportFrame.WorldModel.Part:SetAttribute("Color", angleFrame.Color:GetAttribute("Color"))
				end
			else
				currentRad += if diff > 0 then currentVelocity else -currentVelocity
				motor.C1 = CFrame.Angles(math.rad(90), 0, currentRad)
			end
		end
	end)
end

rotatorContainer.ViewportFrame.WorldModel.Part:GetAttributeChangedSignal("Color"):Connect(function()
	local color = rotatorContainer.ViewportFrame.WorldModel.Part:GetAttribute("Color")

	if color == nil or color == 0 then
		rotatorContainer.ViewportFrame.WorldModel.Part.Transparency = 1
	else
		rotatorContainer.ViewportFrame.WorldModel.Part.Color = colors[color]
		rotatorContainer.ViewportFrame.WorldModel.Part.Transparency = 0
	end
end)

-- local function setPause(value: boolean)
-- 	if value == true then
-- 		pause = true
-- 		pauseButton:SetAttribute("Icon", pause)
-- 	else
-- 		if acceptedPause == false then
-- 			rotators.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
-- 			confirmPrompt("&lt;b>⚠️ WARNING ⚠️&lt;/b>\nBecause of the way Roblox works in order to simulate the rotator we must run the games physics.\n&lt;b>Any unanchored parts will be simulated, THIS CAN NOT BE UNDONE&lt;/b>", function(confirm)
-- 				rotators.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
-- 				if confirm then
-- 					pause = false
-- 					pauseButton:SetAttribute("Icon", pause)
-- 					acceptedPause = true
-- 				end
-- 			end).Parent = rotators.container.Parent.PopUps
-- 		else
-- 			pause = false
-- 			pauseButton:SetAttribute("Icon", pause)
-- 		end
-- 	end

-- 	if pause then
-- 		RunService:Stop()
-- 	elseif pause == true then
-- 		RunService:Run()
-- 	end
-- end

local function resetPreview()
	setPause(true)
	rotatorContainer.ViewportFrame.WorldModel.Motor.Motor6D:SetAttribute("Reset", true)
	-- rotatorContainer.ViewportFrame.WorldModel.Motor.Motor6D:GetAttributeChangedSignal("Reset"):Wait()
end

local function changePreview(section: number)
	setPause(true)
	pauseButton:SetAttribute("Icon", pause)
	resetPreview()
	task.wait(.1)

	if currentPreview == section then
		currentPreview = nil
		rotatorContainer.ControlsHolder:FindFirstChild(`Section{section}`).Options.TopOptions.Enabled.Checkbox.Checkmark.Visible = false
	else
		local oldSection = currentPreview
		local oldSectionFrame = rotatorContainer.ControlsHolder:FindFirstChild(`Section{oldSection}`)
		local sectionFrame = rotatorContainer.ControlsHolder:FindFirstChild(`Section{section}`)

		if oldSectionFrame then oldSectionFrame.Options.TopOptions.Enabled.Checkbox.Checkmark.Visible = false end
		sectionFrame.Options.TopOptions.Enabled.Checkbox.Checkmark.Visible = true

		currentPreview = section
		currentPreviewAngle = 1
	end
end

-- Register Angle
local function registerAngle(sectionFrame: Frame, angle: number)
	local angleFrame = sectionFrame.Options:FindFirstChild(`Angle{angle}`)
	local connections = {}
	local didSetPause = false

	connections[#connections+1] = angleFrame.Color:GetAttributeChangedSignal("Color"):Connect(function()
		angleFrame.Color.BackgroundColor3 = colors[angleFrame.Color:GetAttribute("Color")]
		-- if angleFrame.Color:GetAttribute("Color") == 0 then
		-- 	angleFrame.Color.TextButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
		-- 	angleFrame.Color.TextButton.Text = "Color"
		-- elseif angleFrame.Color:GetAttribute("Color") == 4 then
		-- 	angleFrame.Color.TextButton.Text = "White"
		-- 	angleFrame.Color.TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
		-- else
		-- 	angleFrame.Color.TextButton.TextColor3 = settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainText)
		-- 	angleFrame.Color.TextButton.Text = colorLabels[angleFrame.Color:GetAttribute("Color")]
		-- end
		if angleFrame.Color:GetAttribute("Color") == 0 then
			angleFrame.Color.TextButton.Text = "Color"
		else
			angleFrame.Color.TextButton.Text = ""
		end
	end)

	angleFrame.Color:SetAttribute("Color", 0)
	connections[#connections+1] = angleFrame.Color.TextButton.MouseButton1Click:Connect(function()
		if sectionFrame.Dropdown.Color:GetAttribute("debounce") == true then return end
		sectionFrame.Dropdown.Color:SetAttribute("debounce", true)
		if sectionFrame.Dropdown.Color:GetAttribute("currentFrame") == angle then
			sectionFrame.Dropdown.Color.Visible = false
		else
			local colorConnections = {}
			sectionFrame.Dropdown.Color:SetAttribute("currentFrame", angle)
			colorConnections[#colorConnections+1] = sectionFrame.Dropdown.Color:GetAttributeChangedSignal("currentFrame"):Connect(function()
				for i = 1, #colorConnections do
					colorConnections[i]:Disconnect()
				end
			end)
			sectionFrame.Dropdown.Color.Visible = true
			sectionFrame.Dropdown.Color.Position = UDim2.new(0.5, 0, 0, (105*(angle - 1)) + 170)
			for i,v in pairs(sectionFrame.Dropdown.Color:GetChildren()) do
				if v:IsA("TextButton") then
					colorConnections[#colorConnections+1] = v.MouseButton1Click:Connect(function()
						angleFrame.Color:SetAttribute("Color", v.LayoutOrder)
						sectionFrame.Dropdown.Color.Visible = false
						sectionFrame.Dropdown.Color:SetAttribute("currentFrame", nil)
						for i = 1, #colorConnections do
							colorConnections[i]:Disconnect()
						end
					end)
				end
			end
		end
		sectionFrame.Dropdown.Color:SetAttribute("debounce", false)
	end)

	connections[#connections+1] = angleFrame.Angle.TextBox.Focused:Connect(function()
		didSetPause = if pause == false then true else false
		setPause(true)
	end)

	connections[#connections+1] = angleFrame.Angle.TextBox.FocusLost:Connect(function(enterPressed)
		if didSetPause then
			setPause(false)
			didSetPause = false
		end

		if enterPressed and (angleFrame.Velocity.TextBox.Text == "" or angleFrame.Velocity.TextBox.Text == nil) then
			angleFrame.Velocity.TextBox:CaptureFocus()
			RunService.Heartbeat:Wait()
			angleFrame.Velocity.TextBox.Text = ""
		end
	end)

	connections[#connections+1] = angleFrame.Velocity.TextBox.Focused:Connect(function()
		didSetPause = if pause == false then true else false
		setPause(true)
	end)

	connections[#connections+1] = angleFrame.Velocity.TextBox.FocusLost:Connect(function()
		if didSetPause then
			setPause(false)
			didSetPause = false
		end
	end)

	connections[#connections+1] = angleFrame.Destroying:Connect(function()
		for i = 1, #connections do
			connections[i]:Disconnect()
		end
	end)
end

-- Register Sections
local function registerSection(section: number)
	local sectionFrame = rotatorContainer.ControlsHolder:FindFirstChild(`Section{section}`)
	local connections = {}

	sectionFrame:SetAttribute("Angles", 1)

	registerAngle(sectionFrame, 1)

	sectionFrame.Options.TopOptions.NameBox.TextBox.PlaceholderText = `Rotator{section}`

	connections[#connections+1] = sectionFrame.Options.TopOptions.NameBox.TextBox.FocusLost:Connect(function(enterPressed)
		if enterPressed then
			if rotatorContainer.ControlsHolder:FindFirstChild(`Section{section+1}`) then
				rotatorContainer.ControlsHolder:FindFirstChild(`Section{section+1}`).Options.TopOptions.NameBox.TextBox:CaptureFocus()
				RunService.Heartbeat:Wait()
				rotatorContainer.ControlsHolder:FindFirstChild(`Section{section+1}`).Options.TopOptions.NameBox.TextBox.Text = ""
			end
		end
	end)

	-- Handle Controls

	-- Set Preview
	connections[#connections+1] = sectionFrame.Options.TopOptions.Enabled.Checkbox.Button.MouseButton1Click:Connect(function()
		changePreview(section)
	end)

	if section == 1 then
		sectionFrame.Buttons.TopControls.RemoveHolder.Visible = false
	end

	local function sectionAddVisible()
		if rotatorContainer:FindFirstChild("ControlsHolder") == nil then return end
		if section ~= #rotatorContainer.ControlsHolder:GetChildren() - 2 then
			sectionFrame.Buttons.TopControls.AddHolder.Visible = false
			sectionFrame.Buttons.TopControls.RemoveHolder.Visible = false
		else
			sectionFrame.Buttons.TopControls.AddHolder.Visible = true
			sectionFrame.Buttons.TopControls.RemoveHolder.Visible = if section ~= 1 then true else false
		end
	end
	sectionAddVisible()
	connections[#connections+1] = rotatorContainer.ControlsHolder.ChildAdded:Connect(sectionAddVisible)
	connections[#connections+1] = rotatorContainer.ControlsHolder.ChildRemoved:Connect(sectionAddVisible)

	local function angleChildrenChange()
		if sectionFrame:FindFirstChild("Buttons") == nil then return end
		if sectionFrame:GetAttribute("Angles") == 1 then
			sectionFrame.Buttons.Controls.RemoveHolder.Visible = false
		else
			sectionFrame.Buttons.Controls.RemoveHolder.Visible = true
		end
		
		if sectionFrame:FindFirstChild("Options") == nil then return end
		if sectionFrame:FindFirstChild("Buttons") == nil then return end
		if #sectionFrame.Options:GetChildren() ~= #sectionFrame.Buttons:GetChildren() then
			local difference = #sectionFrame.Options:GetChildren() - #sectionFrame.Buttons:GetChildren()
			if difference > 0 then
				for i = 1, difference do
					local newFrame = Instance.new("Frame")
					newFrame.Name = `AngleFiller{#sectionFrame.Buttons:GetChildren() + 1}`
					newFrame.BackgroundTransparency = 1
					newFrame.Size = UDim2.new(1, 0, 0, 100)
					newFrame.Parent = sectionFrame.Buttons
				end
			else
				for i = 1, -difference do
					sectionFrame.Buttons:FindFirstChild(`AngleFiller{#sectionFrame.Buttons:GetChildren()}`):Destroy()
				end
			end
		end
	end
	angleChildrenChange()
	connections[#connections+1] = sectionFrame.Options.ChildAdded:Connect(angleChildrenChange)
	connections[#connections+1] = sectionFrame.Options.ChildRemoved:Connect(angleChildrenChange)
	connections[#connections+1] = sectionFrame:GetAttributeChangedSignal("Angles"):Connect(angleChildrenChange)

	-- Add Section
	connections[#connections+1] = sectionFrame.Buttons.TopControls.AddHolder.Add.MouseButton1Click:Connect(function()
		local newSection = require(rotatorComponents:WaitForChild("section"))(section+1, colorDropdown, colorLabels)
		newSection.Parent = rotatorContainer.ControlsHolder
		registerSection(section+1)
	end)

	-- Remove Section
	connections[#connections+1] = sectionFrame.Buttons.TopControls.RemoveHolder.RemoveButton.MouseButton1Click:Connect(function()
		if section == 1 then return end
		if rotators.container.Parent:WaitForChild("PopUps").BackgroundTransparency ~= 1 then return end
		rotators.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
		confirmPrompt("Are you sure you want to remove this section? &lt;b>Any unsaved progress will be lost!&lt;/b>", function(confirm)
			rotators.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
			if confirm then
				sectionFrame:Destroy()
			end
		end).Parent = rotators.container.Parent.PopUps
	end)

	-- Add Angle
	connections[#connections+1] = sectionFrame.Buttons.Controls.AddHolder.Add.MouseButton1Click:Connect(function()
		sectionFrame:SetAttribute("Angles", sectionFrame:GetAttribute("Angles") + 1)
		local newAngle = require(rotatorComponents:WaitForChild("angleRows"))(sectionFrame:GetAttribute("Angles"))
		newAngle.Parent = sectionFrame.Options
		registerAngle(sectionFrame, sectionFrame:GetAttribute("Angles"))
	end)

	-- Remove Angle
	connections[#connections+1] = sectionFrame.Buttons.Controls.RemoveHolder.RemoveButton.MouseButton1Click:Connect(function()
		if sectionFrame:GetAttribute("Angles") == 1 then return end
		if rotators.container.Parent:WaitForChild("PopUps").BackgroundTransparency ~= 1 then return end
		rotators.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
		confirmPrompt("Are you sure you want to remove this angle? &lt;b>Any unsaved progress will be lost!&lt;/b>", function(confirm)
			rotators.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
			if confirm then
				sectionFrame.Options:FindFirstChild(`Angle{sectionFrame:GetAttribute("Angles")}`):Destroy()
				sectionFrame:SetAttribute("Angles", sectionFrame:GetAttribute("Angles") - 1)
			end
		end).Parent = rotators.container.Parent.PopUps
	end)

	connections[#connections+1] = sectionFrame.Destroying:Connect(function()
		for i = 1, #connections do
			connections[i]:Disconnect()
		end
	end)
end

registerSection(1)
changePreview(1)

-- Reset Handler
local function reset()
	setPause(true)
	resetPreview()
	for i,v in pairs(rotatorContainer.ControlsHolder:GetChildren()) do
		if v:IsA("ScrollingFrame") and v.Name ~= "Section1" then
			v:Destroy()
		end
	end

	rotatorContainer.ControlsHolder.Section1:SetAttribute("Angles", 1)
	for i,v in pairs(rotatorContainer.ControlsHolder.Section1.Options:GetChildren()) do
		if v:IsA("Frame") and (v.Name ~= "Angle1" and v.Name ~= "Label" and v.Name ~= "TopOptions") then
			v:Destroy()
		end
	end

	rotatorContainer.ControlsHolder.Section1.Options.TopOptions.NameBox.TextBox.Text = ""
	rotatorContainer.ControlsHolder.Section1.Options.Angle1.Angle.TextBox.Text = ""
	rotatorContainer.ControlsHolder.Section1.Options.Angle1.Velocity.TextBox.Text = ""
	rotatorContainer.ControlsHolder.Section1.Options.Angle1.Color:SetAttribute("Color", 0)

	changePreview(1)
end

local function confirmReset()
	if rotators.container == nil then return end
	if rotators.container.Parent:WaitForChild("PopUps").BackgroundTransparency ~= 1 then return end
	rotators.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 0.5
	confirmPrompt("Are you sure you want to reset? \n&lt;b>Any unsaved progress will be lost!&lt;/b>", function(confirm)
		if confirm then
			reset()
		end
		rotators.container.Parent:WaitForChild("PopUps").BackgroundTransparency = 1
	end).Parent = rotators.container.Parent.PopUps
end

rotators.loadFromTable = function(data: {number:{string:any}})
	reset()

	task.wait(0.1)

	for section=1,#data do
		local sectionData = data[section]
		if typeof(sectionData) == "table" and typeof(sectionData["Name"]) == "string" and typeof(sectionData["Angles"]) == "table" then
			local sectionFrame = rotatorContainer.ControlsHolder.Section1
			if section ~= 1 then
				sectionFrame = require(rotatorComponents:WaitForChild("section"))(section, colorDropdown, colorLabels)
				sectionFrame.Parent = rotatorContainer.ControlsHolder
				registerSection(section)
			end

			sectionFrame:SetAttribute("Angles", #sectionData.Angles)
			sectionFrame.Options.TopOptions.NameBox.TextBox.Text = sectionData.Name
			
			for angle=1,#sectionData.Angles do
				local angleData = sectionData.Angles[angle]
				if typeof(angleData) == "table" and typeof(angleData["Angle"]) == "number" and typeof(angleData["Velocity"]) == "number" and typeof(angleData["Color"]) == "number" then
					local angleFrame = sectionFrame.Options:FindFirstChild(`Angle{angle}`)
					if angleFrame == nil then
						angleFrame = require(rotatorComponents:WaitForChild("angleRows"))(sectionFrame:GetAttribute("Angles"))
						angleFrame.Parent = sectionFrame.Options
						registerAngle(sectionFrame, sectionFrame:GetAttribute("Angles"))
					end

					angleFrame.Angle.TextBox.Text = angleData.Angle
					angleFrame.Velocity.TextBox.Text = angleData.Velocity
					angleFrame.Color:SetAttribute("Color", angleData.Color)
				end
			end
		end
	end

	changePreview(1)
end

rotators.toTable = function()
	local data = {}

	for _,section in pairs(rotatorContainer.ControlsHolder:GetChildren()) do
		if section:IsA("ScrollingFrame") then
			local sectionData = {
				Name = section.Options.TopOptions.NameBox.TextBox.Text,
				Angles = {}
			}

			for _,angle in pairs(section.Options:GetChildren()) do
				if angle:IsA("Frame") and angle.Name ~= "Label" and angle.Name ~= "TopOptions" then
					local angleData = {
						Angle = tonumber(angle.Angle.TextBox.Text),
						Velocity = tonumber(angle.Velocity.TextBox.Text),
						Color = angle.Color:GetAttribute("Color")
					}

					-- table.insert(sectionData.Angles, angleData)
					sectionData.Angles[angle.LayoutOrder] = angleData
				end
			end

			-- table.insert(data, sectionData)
			data[section.LayoutOrder] = sectionData
		end
	end

	return data
end

-- Input Handler
rotators.InputBegan = function(input: InputObject)
	if rotators.enabled == false then return end

	if input.KeyCode == Enum.KeyCode.P then
		setPause(not pause)
		pauseButton:SetAttribute("Icon", pause)
	elseif input.KeyCode == Enum.KeyCode.R then
		confirmReset()
	end
end

pauseButton.Image.MouseButton1Click:Connect(function()
	setPause(not pause)
	pauseButton:SetAttribute("Icon", pause)
end)

resetButton.Image.MouseButton1Click:Connect(function()
	confirmReset()
end)

rotators.Display = function(container: Frame)
	rotatorContainer.Parent = container
	controls.Parent = container
	rotators.container = container
	rotators.enabled = true

	task.spawn(threadFunction)
end

rotators.StopDisplay = function()
	setPause(true)

	rotatorContainer.Parent = nil
	controls.Parent = nil
	rotators.container = nil
	rotators.enabled = false
end

pluginRoot.Destroying:Connect(function()
	rotators.enabled = false
end)

return rotators</string>
          </Properties>
        </Item>
      </Item>
      <Item class="Folder" referent="72">
        <Properties>
          <string name="Name">Utils</string>
        </Properties>
        <Item class="ModuleScript" referent="73">
          <Properties>
            <string name="Name">settingsConverter</string>
            <string name="Source">--[[
	Redon Tech 2023-2024
	EVC V2
--]]

--------------------------------------------------------------------------------
-- Init --
--------------------------------------------------------------------------------

local settingsConverter = {converters = {}}
local pluginRoot = script.Parent.Parent.Parent

--------------------------------------------------------------------------------
-- Types --
--------------------------------------------------------------------------------
type v2_0_0 = {
	LightbarName: string,
	SirenName: string,
	Sirens: {EnumItem:{
		_Type: string,
		Name: string,
		OverrideOtherSounds: boolean,
		Modifiers: {String: {
			Name: string,
			PlayNonModified: boolean,
			PlayOnModifierChange: boolean,
			Delay: number,
		}}?
	}},
	Keybinds: {EnumItem:string},
	ParkMode: boolean,
	Colors: {number:Color3},
	Light: (Instance, number, {number:Color3}) -> nil,
	PluginVersion: string,
}

type v2_1_0 = {
	LightbarName: string,
	AdditionalLightbarLocations: {string:{[number]:string}},
	SirenName: string,
	Sirens: {EnumItem:{
		_Type: string,
		Name: string,
		OverrideOtherSounds: boolean,
		Modifiers: {String: {
			Name: string,
			PlayNonModified: boolean,
			PlayOnModifierChange: boolean,
			Delay: number,
		}}?
	}},
	Keybinds: {EnumItem:string},
	DefaultFunctionState: {string:number},
	Overrides: {string:{string:string|boolean}},
	Colors: {number:Color3},
	Light: (Instance, number, {number:Color3}) -> nil,
	PluginVersion: string,
}

--------------------------------------------------------------------------------
-- Module Functions --
--------------------------------------------------------------------------------

settingsConverter.converters["2_0_0"] = function(settings: ModuleScript, pluginSettings: v2_0_0): ModuleScript
	local newSettingsModule = pluginRoot.src.ExportTemplates.BlankSettings:Clone()
	local originalSource = settings.Source
	local source = newSettingsModule.Source
	source = source:gsub("LightbarName = nil,", `LightbarName = \"{pluginSettings.LightbarName}\",`, 1)
	source = source:gsub("SirenName = nil,", `SirenName = \"{pluginSettings.SirenName}\",`, 1)
	source = source:gsub("Sirens = nil,", "Sirens = {".. originalSource:split("Sirens = {")[2]:split("--")[1], 1)
	source = source:gsub("Keybinds = nil,", "Keybinds = {".. originalSource:split("Keybinds = {")[2]:split("--")[1], 1)
	source = source:gsub("Colors = nil,", "Colors = {".. originalSource:split("Colors = {")[2]:split("--")[1], 1)
	source = source:gsub("Light = nil,", "Light = function".. originalSource:split("Light = function")[2]:split("--")[1], 1)

	source = source:gsub("AdditionalLightbarLocations = nil,", "AdditionalLightbarLocations = {\n\t\tBody = {\n\t\t},\n\t\tMisc = {\n\t\t}\n\t},", 1)
	source = source:gsub("DefaultFunctionState = nil,", "DefaultFunctionState = {\n\t},", 1)
	source = source:gsub("Overrides = nil,", "Overrides = {\n\t\tSirens = {\n\t\t},\n\t\tChassis = {\n\t\t\tParkBrake = \"ParkBrakeOverride\",\n\t\t\tBrake = false,\n\t\t\tReverse = false,\n\t\t}\n\t},", 1)
	source = source:gsub("SecondaryKeybinds = nil,", "SecondaryKeybinds = {\n\t\t[Enum.KeyCode.DPadDown] = Enum.KeyCode.J,\n\t},", 1)

	newSettingsModule.Source = source
	return newSettingsModule
end

settingsConverter.converters["2_1_0"] = function(settings: ModuleScript, pluginSettings: v2_1_0): ModuleScript
	local newSettingsModule = pluginRoot.src.ExportTemplates.BlankSettings:Clone()
	local originalSource = settings.Source
	local source = newSettingsModule.Source

	source = source:gsub("LightbarName = nil,", `LightbarName = \"{pluginSettings.LightbarName}\",`, 1)
	source = source:gsub("AdditionalLightbarLocations = nil,", "AdditionalLightbarLocations = {".. originalSource:split("AdditionalLightbarLocations = {")[2]:split("--")[1], 1)
	source = source:gsub("SirenName = nil,", `SirenName = \"{pluginSettings.SirenName}\",`, 1)
	source = source:gsub("Sirens = nil,", "Sirens = {".. originalSource:split("Sirens = {")[2]:split("--")[1], 1)
	source = source:gsub("Keybinds = nil,", "Keybinds = {".. originalSource:split("Keybinds = {")[2]:split("--")[1], 1)
	source = source:gsub("DefaultFunctionState = nil,", "DefaultFunctionState = {".. originalSource:split("DefaultFunctionState = {")[2]:split("--")[1], 1)
	source = source:gsub("Overrides = nil,", "Overrides = {".. originalSource:split("Overrides = {")[2]:split("--")[1], 1)
	source = source:gsub("Colors = nil,", "Colors = {".. originalSource:split("Colors = {")[2]:split("--")[1], 1)
	source = source:gsub("Light = nil,", "Light = function".. originalSource:split("Light = function")[2]:split("--")[1], 1)
	
	source = source:gsub("SecondaryKeybinds = nil,", "SecondaryKeybinds = {\n\t\t[Enum.KeyCode.DPadDown] = Enum.KeyCode.J,\n\t},")


	newSettingsModule.Source = source
	return newSettingsModule
end

function settingsConverter.convert(settings: ModuleScript)
	local pluginSettings = require(settings)
	local formattedVersion = pluginSettings.PluginVersion:gsub("%.", "_")
	print(formattedVersion, settingsConverter.converters[formattedVersion])

	if settingsConverter.converters[formattedVersion] then
		return settingsConverter.converters[formattedVersion](settings, pluginSettings)
	end

	return
end

return settingsConverter</string>
          </Properties>
        </Item>
      </Item>
    </Item>
  </Item>
</roblox>